
prog1Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000303c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080030fc  080030fc  000130fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080032f4  080032f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080032f8  080032f8  000132f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000030  20000000  080032fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000358  20000030  0800332c  00020030  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000388  0800332c  00020388  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005166  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000ef1  00000000  00000000  000251be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000448  00000000  00000000  000260b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000003b0  00000000  00000000  000264f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001325f  00000000  00000000  000268a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000529a  00000000  00000000  00039b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0006107e  00000000  00000000  0003eda1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0009fe1f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000f14  00000000  00000000  0009fe74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .stabstr      000001b9  00000000  00000000  000a0d88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000030 	.word	0x20000030
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080030e4 	.word	0x080030e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000034 	.word	0x20000034
 8000104:	080030e4 	.word	0x080030e4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cfrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	1c08      	adds	r0, r1, #0
 8000234:	4661      	mov	r1, ip
 8000236:	e7ff      	b.n	8000238 <__aeabi_cfcmpeq>

08000238 <__aeabi_cfcmpeq>:
 8000238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023a:	f000 f8bf 	bl	80003bc <__lesf2>
 800023e:	2800      	cmp	r0, #0
 8000240:	d401      	bmi.n	8000246 <__aeabi_cfcmpeq+0xe>
 8000242:	2100      	movs	r1, #0
 8000244:	42c8      	cmn	r0, r1
 8000246:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000248 <__aeabi_fcmpeq>:
 8000248:	b510      	push	{r4, lr}
 800024a:	f000 f843 	bl	80002d4 <__eqsf2>
 800024e:	4240      	negs	r0, r0
 8000250:	3001      	adds	r0, #1
 8000252:	bd10      	pop	{r4, pc}

08000254 <__aeabi_fcmplt>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f000 f8b1 	bl	80003bc <__lesf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	db01      	blt.n	8000262 <__aeabi_fcmplt+0xe>
 800025e:	2000      	movs	r0, #0
 8000260:	bd10      	pop	{r4, pc}
 8000262:	2001      	movs	r0, #1
 8000264:	bd10      	pop	{r4, pc}
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <__aeabi_fcmple>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 f8a7 	bl	80003bc <__lesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	dd01      	ble.n	8000276 <__aeabi_fcmple+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			; (mov r8, r8)

0800027c <__aeabi_fcmpgt>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 f851 	bl	8000324 <__gesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	dc01      	bgt.n	800028a <__aeabi_fcmpgt+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__aeabi_fcmpge>:
 8000290:	b510      	push	{r4, lr}
 8000292:	f000 f847 	bl	8000324 <__gesf2>
 8000296:	2800      	cmp	r0, #0
 8000298:	da01      	bge.n	800029e <__aeabi_fcmpge+0xe>
 800029a:	2000      	movs	r0, #0
 800029c:	bd10      	pop	{r4, pc}
 800029e:	2001      	movs	r0, #1
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)

080002a4 <__aeabi_f2uiz>:
 80002a4:	219e      	movs	r1, #158	; 0x9e
 80002a6:	b510      	push	{r4, lr}
 80002a8:	05c9      	lsls	r1, r1, #23
 80002aa:	1c04      	adds	r4, r0, #0
 80002ac:	f7ff fff0 	bl	8000290 <__aeabi_fcmpge>
 80002b0:	2800      	cmp	r0, #0
 80002b2:	d103      	bne.n	80002bc <__aeabi_f2uiz+0x18>
 80002b4:	1c20      	adds	r0, r4, #0
 80002b6:	f000 fa93 	bl	80007e0 <__aeabi_f2iz>
 80002ba:	bd10      	pop	{r4, pc}
 80002bc:	219e      	movs	r1, #158	; 0x9e
 80002be:	1c20      	adds	r0, r4, #0
 80002c0:	05c9      	lsls	r1, r1, #23
 80002c2:	f000 f8c5 	bl	8000450 <__aeabi_fsub>
 80002c6:	f000 fa8b 	bl	80007e0 <__aeabi_f2iz>
 80002ca:	2380      	movs	r3, #128	; 0x80
 80002cc:	061b      	lsls	r3, r3, #24
 80002ce:	469c      	mov	ip, r3
 80002d0:	4460      	add	r0, ip
 80002d2:	e7f2      	b.n	80002ba <__aeabi_f2uiz+0x16>

080002d4 <__eqsf2>:
 80002d4:	b570      	push	{r4, r5, r6, lr}
 80002d6:	0042      	lsls	r2, r0, #1
 80002d8:	024e      	lsls	r6, r1, #9
 80002da:	004c      	lsls	r4, r1, #1
 80002dc:	0245      	lsls	r5, r0, #9
 80002de:	0a6d      	lsrs	r5, r5, #9
 80002e0:	0e12      	lsrs	r2, r2, #24
 80002e2:	0fc3      	lsrs	r3, r0, #31
 80002e4:	0a76      	lsrs	r6, r6, #9
 80002e6:	0e24      	lsrs	r4, r4, #24
 80002e8:	0fc9      	lsrs	r1, r1, #31
 80002ea:	2aff      	cmp	r2, #255	; 0xff
 80002ec:	d00f      	beq.n	800030e <__eqsf2+0x3a>
 80002ee:	2cff      	cmp	r4, #255	; 0xff
 80002f0:	d011      	beq.n	8000316 <__eqsf2+0x42>
 80002f2:	2001      	movs	r0, #1
 80002f4:	42a2      	cmp	r2, r4
 80002f6:	d000      	beq.n	80002fa <__eqsf2+0x26>
 80002f8:	bd70      	pop	{r4, r5, r6, pc}
 80002fa:	42b5      	cmp	r5, r6
 80002fc:	d1fc      	bne.n	80002f8 <__eqsf2+0x24>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d00d      	beq.n	800031e <__eqsf2+0x4a>
 8000302:	2a00      	cmp	r2, #0
 8000304:	d1f8      	bne.n	80002f8 <__eqsf2+0x24>
 8000306:	0028      	movs	r0, r5
 8000308:	1e45      	subs	r5, r0, #1
 800030a:	41a8      	sbcs	r0, r5
 800030c:	e7f4      	b.n	80002f8 <__eqsf2+0x24>
 800030e:	2001      	movs	r0, #1
 8000310:	2d00      	cmp	r5, #0
 8000312:	d1f1      	bne.n	80002f8 <__eqsf2+0x24>
 8000314:	e7eb      	b.n	80002ee <__eqsf2+0x1a>
 8000316:	2001      	movs	r0, #1
 8000318:	2e00      	cmp	r6, #0
 800031a:	d1ed      	bne.n	80002f8 <__eqsf2+0x24>
 800031c:	e7e9      	b.n	80002f2 <__eqsf2+0x1e>
 800031e:	2000      	movs	r0, #0
 8000320:	e7ea      	b.n	80002f8 <__eqsf2+0x24>
 8000322:	46c0      	nop			; (mov r8, r8)

08000324 <__gesf2>:
 8000324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000326:	0042      	lsls	r2, r0, #1
 8000328:	0246      	lsls	r6, r0, #9
 800032a:	024d      	lsls	r5, r1, #9
 800032c:	004c      	lsls	r4, r1, #1
 800032e:	0fc3      	lsrs	r3, r0, #31
 8000330:	0a76      	lsrs	r6, r6, #9
 8000332:	0e12      	lsrs	r2, r2, #24
 8000334:	0a6d      	lsrs	r5, r5, #9
 8000336:	0e24      	lsrs	r4, r4, #24
 8000338:	0fc8      	lsrs	r0, r1, #31
 800033a:	2aff      	cmp	r2, #255	; 0xff
 800033c:	d01f      	beq.n	800037e <__gesf2+0x5a>
 800033e:	2cff      	cmp	r4, #255	; 0xff
 8000340:	d010      	beq.n	8000364 <__gesf2+0x40>
 8000342:	2a00      	cmp	r2, #0
 8000344:	d11f      	bne.n	8000386 <__gesf2+0x62>
 8000346:	4271      	negs	r1, r6
 8000348:	4171      	adcs	r1, r6
 800034a:	2c00      	cmp	r4, #0
 800034c:	d101      	bne.n	8000352 <__gesf2+0x2e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	d01e      	beq.n	8000390 <__gesf2+0x6c>
 8000352:	2900      	cmp	r1, #0
 8000354:	d10e      	bne.n	8000374 <__gesf2+0x50>
 8000356:	4283      	cmp	r3, r0
 8000358:	d01e      	beq.n	8000398 <__gesf2+0x74>
 800035a:	2102      	movs	r1, #2
 800035c:	1e58      	subs	r0, r3, #1
 800035e:	4008      	ands	r0, r1
 8000360:	3801      	subs	r0, #1
 8000362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000364:	2d00      	cmp	r5, #0
 8000366:	d126      	bne.n	80003b6 <__gesf2+0x92>
 8000368:	2a00      	cmp	r2, #0
 800036a:	d1f4      	bne.n	8000356 <__gesf2+0x32>
 800036c:	4271      	negs	r1, r6
 800036e:	4171      	adcs	r1, r6
 8000370:	2900      	cmp	r1, #0
 8000372:	d0f0      	beq.n	8000356 <__gesf2+0x32>
 8000374:	2800      	cmp	r0, #0
 8000376:	d1f4      	bne.n	8000362 <__gesf2+0x3e>
 8000378:	2001      	movs	r0, #1
 800037a:	4240      	negs	r0, r0
 800037c:	e7f1      	b.n	8000362 <__gesf2+0x3e>
 800037e:	2e00      	cmp	r6, #0
 8000380:	d119      	bne.n	80003b6 <__gesf2+0x92>
 8000382:	2cff      	cmp	r4, #255	; 0xff
 8000384:	d0ee      	beq.n	8000364 <__gesf2+0x40>
 8000386:	2c00      	cmp	r4, #0
 8000388:	d1e5      	bne.n	8000356 <__gesf2+0x32>
 800038a:	2d00      	cmp	r5, #0
 800038c:	d1e3      	bne.n	8000356 <__gesf2+0x32>
 800038e:	e7e4      	b.n	800035a <__gesf2+0x36>
 8000390:	2000      	movs	r0, #0
 8000392:	2e00      	cmp	r6, #0
 8000394:	d0e5      	beq.n	8000362 <__gesf2+0x3e>
 8000396:	e7e0      	b.n	800035a <__gesf2+0x36>
 8000398:	42a2      	cmp	r2, r4
 800039a:	dc05      	bgt.n	80003a8 <__gesf2+0x84>
 800039c:	dbea      	blt.n	8000374 <__gesf2+0x50>
 800039e:	42ae      	cmp	r6, r5
 80003a0:	d802      	bhi.n	80003a8 <__gesf2+0x84>
 80003a2:	d3e7      	bcc.n	8000374 <__gesf2+0x50>
 80003a4:	2000      	movs	r0, #0
 80003a6:	e7dc      	b.n	8000362 <__gesf2+0x3e>
 80003a8:	4241      	negs	r1, r0
 80003aa:	4141      	adcs	r1, r0
 80003ac:	4248      	negs	r0, r1
 80003ae:	2102      	movs	r1, #2
 80003b0:	4008      	ands	r0, r1
 80003b2:	3801      	subs	r0, #1
 80003b4:	e7d5      	b.n	8000362 <__gesf2+0x3e>
 80003b6:	2002      	movs	r0, #2
 80003b8:	4240      	negs	r0, r0
 80003ba:	e7d2      	b.n	8000362 <__gesf2+0x3e>

080003bc <__lesf2>:
 80003bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003be:	0042      	lsls	r2, r0, #1
 80003c0:	0246      	lsls	r6, r0, #9
 80003c2:	024d      	lsls	r5, r1, #9
 80003c4:	004c      	lsls	r4, r1, #1
 80003c6:	0fc3      	lsrs	r3, r0, #31
 80003c8:	0a76      	lsrs	r6, r6, #9
 80003ca:	0e12      	lsrs	r2, r2, #24
 80003cc:	0a6d      	lsrs	r5, r5, #9
 80003ce:	0e24      	lsrs	r4, r4, #24
 80003d0:	0fc8      	lsrs	r0, r1, #31
 80003d2:	2aff      	cmp	r2, #255	; 0xff
 80003d4:	d00d      	beq.n	80003f2 <__lesf2+0x36>
 80003d6:	2cff      	cmp	r4, #255	; 0xff
 80003d8:	d00f      	beq.n	80003fa <__lesf2+0x3e>
 80003da:	2a00      	cmp	r2, #0
 80003dc:	d123      	bne.n	8000426 <__lesf2+0x6a>
 80003de:	4271      	negs	r1, r6
 80003e0:	4171      	adcs	r1, r6
 80003e2:	2c00      	cmp	r4, #0
 80003e4:	d10f      	bne.n	8000406 <__lesf2+0x4a>
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d10d      	bne.n	8000406 <__lesf2+0x4a>
 80003ea:	2000      	movs	r0, #0
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d014      	beq.n	800041a <__lesf2+0x5e>
 80003f0:	e00d      	b.n	800040e <__lesf2+0x52>
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d110      	bne.n	8000418 <__lesf2+0x5c>
 80003f6:	2cff      	cmp	r4, #255	; 0xff
 80003f8:	d115      	bne.n	8000426 <__lesf2+0x6a>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d10c      	bne.n	8000418 <__lesf2+0x5c>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	d103      	bne.n	800040a <__lesf2+0x4e>
 8000402:	4271      	negs	r1, r6
 8000404:	4171      	adcs	r1, r6
 8000406:	2900      	cmp	r1, #0
 8000408:	d108      	bne.n	800041c <__lesf2+0x60>
 800040a:	4283      	cmp	r3, r0
 800040c:	d010      	beq.n	8000430 <__lesf2+0x74>
 800040e:	2102      	movs	r1, #2
 8000410:	1e58      	subs	r0, r3, #1
 8000412:	4008      	ands	r0, r1
 8000414:	3801      	subs	r0, #1
 8000416:	e000      	b.n	800041a <__lesf2+0x5e>
 8000418:	2002      	movs	r0, #2
 800041a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800041c:	2800      	cmp	r0, #0
 800041e:	d1fc      	bne.n	800041a <__lesf2+0x5e>
 8000420:	2001      	movs	r0, #1
 8000422:	4240      	negs	r0, r0
 8000424:	e7f9      	b.n	800041a <__lesf2+0x5e>
 8000426:	2c00      	cmp	r4, #0
 8000428:	d1ef      	bne.n	800040a <__lesf2+0x4e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	d1ed      	bne.n	800040a <__lesf2+0x4e>
 800042e:	e7ee      	b.n	800040e <__lesf2+0x52>
 8000430:	42a2      	cmp	r2, r4
 8000432:	dc05      	bgt.n	8000440 <__lesf2+0x84>
 8000434:	dbf2      	blt.n	800041c <__lesf2+0x60>
 8000436:	42ae      	cmp	r6, r5
 8000438:	d802      	bhi.n	8000440 <__lesf2+0x84>
 800043a:	d3ef      	bcc.n	800041c <__lesf2+0x60>
 800043c:	2000      	movs	r0, #0
 800043e:	e7ec      	b.n	800041a <__lesf2+0x5e>
 8000440:	4241      	negs	r1, r0
 8000442:	4141      	adcs	r1, r0
 8000444:	4248      	negs	r0, r1
 8000446:	2102      	movs	r1, #2
 8000448:	4008      	ands	r0, r1
 800044a:	3801      	subs	r0, #1
 800044c:	e7e5      	b.n	800041a <__lesf2+0x5e>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fsub>:
 8000450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000452:	4646      	mov	r6, r8
 8000454:	46d6      	mov	lr, sl
 8000456:	464f      	mov	r7, r9
 8000458:	0243      	lsls	r3, r0, #9
 800045a:	0a5b      	lsrs	r3, r3, #9
 800045c:	00da      	lsls	r2, r3, #3
 800045e:	4694      	mov	ip, r2
 8000460:	024a      	lsls	r2, r1, #9
 8000462:	b5c0      	push	{r6, r7, lr}
 8000464:	0044      	lsls	r4, r0, #1
 8000466:	0a56      	lsrs	r6, r2, #9
 8000468:	1c05      	adds	r5, r0, #0
 800046a:	46b0      	mov	r8, r6
 800046c:	0e24      	lsrs	r4, r4, #24
 800046e:	004e      	lsls	r6, r1, #1
 8000470:	0992      	lsrs	r2, r2, #6
 8000472:	001f      	movs	r7, r3
 8000474:	0020      	movs	r0, r4
 8000476:	4692      	mov	sl, r2
 8000478:	0fed      	lsrs	r5, r5, #31
 800047a:	0e36      	lsrs	r6, r6, #24
 800047c:	0fc9      	lsrs	r1, r1, #31
 800047e:	2eff      	cmp	r6, #255	; 0xff
 8000480:	d100      	bne.n	8000484 <__aeabi_fsub+0x34>
 8000482:	e07f      	b.n	8000584 <__aeabi_fsub+0x134>
 8000484:	2201      	movs	r2, #1
 8000486:	4051      	eors	r1, r2
 8000488:	428d      	cmp	r5, r1
 800048a:	d051      	beq.n	8000530 <__aeabi_fsub+0xe0>
 800048c:	1ba2      	subs	r2, r4, r6
 800048e:	4691      	mov	r9, r2
 8000490:	2a00      	cmp	r2, #0
 8000492:	dc00      	bgt.n	8000496 <__aeabi_fsub+0x46>
 8000494:	e07e      	b.n	8000594 <__aeabi_fsub+0x144>
 8000496:	2e00      	cmp	r6, #0
 8000498:	d100      	bne.n	800049c <__aeabi_fsub+0x4c>
 800049a:	e099      	b.n	80005d0 <__aeabi_fsub+0x180>
 800049c:	2cff      	cmp	r4, #255	; 0xff
 800049e:	d100      	bne.n	80004a2 <__aeabi_fsub+0x52>
 80004a0:	e08c      	b.n	80005bc <__aeabi_fsub+0x16c>
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	4652      	mov	r2, sl
 80004a6:	04db      	lsls	r3, r3, #19
 80004a8:	431a      	orrs	r2, r3
 80004aa:	4692      	mov	sl, r2
 80004ac:	464a      	mov	r2, r9
 80004ae:	2301      	movs	r3, #1
 80004b0:	2a1b      	cmp	r2, #27
 80004b2:	dc08      	bgt.n	80004c6 <__aeabi_fsub+0x76>
 80004b4:	4653      	mov	r3, sl
 80004b6:	2120      	movs	r1, #32
 80004b8:	40d3      	lsrs	r3, r2
 80004ba:	1a89      	subs	r1, r1, r2
 80004bc:	4652      	mov	r2, sl
 80004be:	408a      	lsls	r2, r1
 80004c0:	1e51      	subs	r1, r2, #1
 80004c2:	418a      	sbcs	r2, r1
 80004c4:	4313      	orrs	r3, r2
 80004c6:	4662      	mov	r2, ip
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	015a      	lsls	r2, r3, #5
 80004cc:	d400      	bmi.n	80004d0 <__aeabi_fsub+0x80>
 80004ce:	e0f3      	b.n	80006b8 <__aeabi_fsub+0x268>
 80004d0:	019b      	lsls	r3, r3, #6
 80004d2:	099e      	lsrs	r6, r3, #6
 80004d4:	0030      	movs	r0, r6
 80004d6:	f000 f9a3 	bl	8000820 <__clzsi2>
 80004da:	3805      	subs	r0, #5
 80004dc:	4086      	lsls	r6, r0
 80004de:	4284      	cmp	r4, r0
 80004e0:	dd00      	ble.n	80004e4 <__aeabi_fsub+0x94>
 80004e2:	e0f7      	b.n	80006d4 <__aeabi_fsub+0x284>
 80004e4:	0032      	movs	r2, r6
 80004e6:	1b04      	subs	r4, r0, r4
 80004e8:	2020      	movs	r0, #32
 80004ea:	3401      	adds	r4, #1
 80004ec:	40e2      	lsrs	r2, r4
 80004ee:	1b04      	subs	r4, r0, r4
 80004f0:	40a6      	lsls	r6, r4
 80004f2:	0033      	movs	r3, r6
 80004f4:	1e5e      	subs	r6, r3, #1
 80004f6:	41b3      	sbcs	r3, r6
 80004f8:	2400      	movs	r4, #0
 80004fa:	4313      	orrs	r3, r2
 80004fc:	075a      	lsls	r2, r3, #29
 80004fe:	d004      	beq.n	800050a <__aeabi_fsub+0xba>
 8000500:	220f      	movs	r2, #15
 8000502:	401a      	ands	r2, r3
 8000504:	2a04      	cmp	r2, #4
 8000506:	d000      	beq.n	800050a <__aeabi_fsub+0xba>
 8000508:	3304      	adds	r3, #4
 800050a:	015a      	lsls	r2, r3, #5
 800050c:	d400      	bmi.n	8000510 <__aeabi_fsub+0xc0>
 800050e:	e0d6      	b.n	80006be <__aeabi_fsub+0x26e>
 8000510:	1c62      	adds	r2, r4, #1
 8000512:	2cfe      	cmp	r4, #254	; 0xfe
 8000514:	d100      	bne.n	8000518 <__aeabi_fsub+0xc8>
 8000516:	e0da      	b.n	80006ce <__aeabi_fsub+0x27e>
 8000518:	019b      	lsls	r3, r3, #6
 800051a:	0a5f      	lsrs	r7, r3, #9
 800051c:	b2d0      	uxtb	r0, r2
 800051e:	05c0      	lsls	r0, r0, #23
 8000520:	4338      	orrs	r0, r7
 8000522:	07ed      	lsls	r5, r5, #31
 8000524:	4328      	orrs	r0, r5
 8000526:	bce0      	pop	{r5, r6, r7}
 8000528:	46ba      	mov	sl, r7
 800052a:	46b1      	mov	r9, r6
 800052c:	46a8      	mov	r8, r5
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000530:	1ba2      	subs	r2, r4, r6
 8000532:	4691      	mov	r9, r2
 8000534:	2a00      	cmp	r2, #0
 8000536:	dd63      	ble.n	8000600 <__aeabi_fsub+0x1b0>
 8000538:	2e00      	cmp	r6, #0
 800053a:	d100      	bne.n	800053e <__aeabi_fsub+0xee>
 800053c:	e099      	b.n	8000672 <__aeabi_fsub+0x222>
 800053e:	2cff      	cmp	r4, #255	; 0xff
 8000540:	d03c      	beq.n	80005bc <__aeabi_fsub+0x16c>
 8000542:	2380      	movs	r3, #128	; 0x80
 8000544:	4652      	mov	r2, sl
 8000546:	04db      	lsls	r3, r3, #19
 8000548:	431a      	orrs	r2, r3
 800054a:	4692      	mov	sl, r2
 800054c:	464a      	mov	r2, r9
 800054e:	2301      	movs	r3, #1
 8000550:	2a1b      	cmp	r2, #27
 8000552:	dc08      	bgt.n	8000566 <__aeabi_fsub+0x116>
 8000554:	4653      	mov	r3, sl
 8000556:	2120      	movs	r1, #32
 8000558:	40d3      	lsrs	r3, r2
 800055a:	1a89      	subs	r1, r1, r2
 800055c:	4652      	mov	r2, sl
 800055e:	408a      	lsls	r2, r1
 8000560:	1e51      	subs	r1, r2, #1
 8000562:	418a      	sbcs	r2, r1
 8000564:	4313      	orrs	r3, r2
 8000566:	4463      	add	r3, ip
 8000568:	015a      	lsls	r2, r3, #5
 800056a:	d400      	bmi.n	800056e <__aeabi_fsub+0x11e>
 800056c:	e0a4      	b.n	80006b8 <__aeabi_fsub+0x268>
 800056e:	3401      	adds	r4, #1
 8000570:	2cff      	cmp	r4, #255	; 0xff
 8000572:	d100      	bne.n	8000576 <__aeabi_fsub+0x126>
 8000574:	e0ab      	b.n	80006ce <__aeabi_fsub+0x27e>
 8000576:	2201      	movs	r2, #1
 8000578:	4997      	ldr	r1, [pc, #604]	; (80007d8 <__aeabi_fsub+0x388>)
 800057a:	401a      	ands	r2, r3
 800057c:	085b      	lsrs	r3, r3, #1
 800057e:	400b      	ands	r3, r1
 8000580:	4313      	orrs	r3, r2
 8000582:	e7bb      	b.n	80004fc <__aeabi_fsub+0xac>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d032      	beq.n	80005ee <__aeabi_fsub+0x19e>
 8000588:	428d      	cmp	r5, r1
 800058a:	d035      	beq.n	80005f8 <__aeabi_fsub+0x1a8>
 800058c:	22ff      	movs	r2, #255	; 0xff
 800058e:	4252      	negs	r2, r2
 8000590:	4691      	mov	r9, r2
 8000592:	44a1      	add	r9, r4
 8000594:	464a      	mov	r2, r9
 8000596:	2a00      	cmp	r2, #0
 8000598:	d051      	beq.n	800063e <__aeabi_fsub+0x1ee>
 800059a:	1b30      	subs	r0, r6, r4
 800059c:	2c00      	cmp	r4, #0
 800059e:	d000      	beq.n	80005a2 <__aeabi_fsub+0x152>
 80005a0:	e09c      	b.n	80006dc <__aeabi_fsub+0x28c>
 80005a2:	4663      	mov	r3, ip
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d100      	bne.n	80005aa <__aeabi_fsub+0x15a>
 80005a8:	e0df      	b.n	800076a <__aeabi_fsub+0x31a>
 80005aa:	3801      	subs	r0, #1
 80005ac:	2800      	cmp	r0, #0
 80005ae:	d100      	bne.n	80005b2 <__aeabi_fsub+0x162>
 80005b0:	e0f7      	b.n	80007a2 <__aeabi_fsub+0x352>
 80005b2:	2eff      	cmp	r6, #255	; 0xff
 80005b4:	d000      	beq.n	80005b8 <__aeabi_fsub+0x168>
 80005b6:	e099      	b.n	80006ec <__aeabi_fsub+0x29c>
 80005b8:	000d      	movs	r5, r1
 80005ba:	4643      	mov	r3, r8
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d100      	bne.n	80005c2 <__aeabi_fsub+0x172>
 80005c0:	e085      	b.n	80006ce <__aeabi_fsub+0x27e>
 80005c2:	2780      	movs	r7, #128	; 0x80
 80005c4:	03ff      	lsls	r7, r7, #15
 80005c6:	431f      	orrs	r7, r3
 80005c8:	027f      	lsls	r7, r7, #9
 80005ca:	20ff      	movs	r0, #255	; 0xff
 80005cc:	0a7f      	lsrs	r7, r7, #9
 80005ce:	e7a6      	b.n	800051e <__aeabi_fsub+0xce>
 80005d0:	4652      	mov	r2, sl
 80005d2:	2a00      	cmp	r2, #0
 80005d4:	d074      	beq.n	80006c0 <__aeabi_fsub+0x270>
 80005d6:	2201      	movs	r2, #1
 80005d8:	4252      	negs	r2, r2
 80005da:	4690      	mov	r8, r2
 80005dc:	44c1      	add	r9, r8
 80005de:	464a      	mov	r2, r9
 80005e0:	2a00      	cmp	r2, #0
 80005e2:	d100      	bne.n	80005e6 <__aeabi_fsub+0x196>
 80005e4:	e0c8      	b.n	8000778 <__aeabi_fsub+0x328>
 80005e6:	2cff      	cmp	r4, #255	; 0xff
 80005e8:	d000      	beq.n	80005ec <__aeabi_fsub+0x19c>
 80005ea:	e75f      	b.n	80004ac <__aeabi_fsub+0x5c>
 80005ec:	e7e6      	b.n	80005bc <__aeabi_fsub+0x16c>
 80005ee:	2201      	movs	r2, #1
 80005f0:	4051      	eors	r1, r2
 80005f2:	42a9      	cmp	r1, r5
 80005f4:	d000      	beq.n	80005f8 <__aeabi_fsub+0x1a8>
 80005f6:	e749      	b.n	800048c <__aeabi_fsub+0x3c>
 80005f8:	22ff      	movs	r2, #255	; 0xff
 80005fa:	4252      	negs	r2, r2
 80005fc:	4691      	mov	r9, r2
 80005fe:	44a1      	add	r9, r4
 8000600:	464a      	mov	r2, r9
 8000602:	2a00      	cmp	r2, #0
 8000604:	d043      	beq.n	800068e <__aeabi_fsub+0x23e>
 8000606:	1b31      	subs	r1, r6, r4
 8000608:	2c00      	cmp	r4, #0
 800060a:	d100      	bne.n	800060e <__aeabi_fsub+0x1be>
 800060c:	e08c      	b.n	8000728 <__aeabi_fsub+0x2d8>
 800060e:	2eff      	cmp	r6, #255	; 0xff
 8000610:	d100      	bne.n	8000614 <__aeabi_fsub+0x1c4>
 8000612:	e092      	b.n	800073a <__aeabi_fsub+0x2ea>
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	4662      	mov	r2, ip
 8000618:	04db      	lsls	r3, r3, #19
 800061a:	431a      	orrs	r2, r3
 800061c:	4694      	mov	ip, r2
 800061e:	2301      	movs	r3, #1
 8000620:	291b      	cmp	r1, #27
 8000622:	dc09      	bgt.n	8000638 <__aeabi_fsub+0x1e8>
 8000624:	2020      	movs	r0, #32
 8000626:	4663      	mov	r3, ip
 8000628:	4662      	mov	r2, ip
 800062a:	40cb      	lsrs	r3, r1
 800062c:	1a41      	subs	r1, r0, r1
 800062e:	408a      	lsls	r2, r1
 8000630:	0011      	movs	r1, r2
 8000632:	1e48      	subs	r0, r1, #1
 8000634:	4181      	sbcs	r1, r0
 8000636:	430b      	orrs	r3, r1
 8000638:	0034      	movs	r4, r6
 800063a:	4453      	add	r3, sl
 800063c:	e794      	b.n	8000568 <__aeabi_fsub+0x118>
 800063e:	22fe      	movs	r2, #254	; 0xfe
 8000640:	1c66      	adds	r6, r4, #1
 8000642:	4232      	tst	r2, r6
 8000644:	d164      	bne.n	8000710 <__aeabi_fsub+0x2c0>
 8000646:	2c00      	cmp	r4, #0
 8000648:	d000      	beq.n	800064c <__aeabi_fsub+0x1fc>
 800064a:	e082      	b.n	8000752 <__aeabi_fsub+0x302>
 800064c:	4663      	mov	r3, ip
 800064e:	2b00      	cmp	r3, #0
 8000650:	d100      	bne.n	8000654 <__aeabi_fsub+0x204>
 8000652:	e0ab      	b.n	80007ac <__aeabi_fsub+0x35c>
 8000654:	4653      	mov	r3, sl
 8000656:	2b00      	cmp	r3, #0
 8000658:	d100      	bne.n	800065c <__aeabi_fsub+0x20c>
 800065a:	e760      	b.n	800051e <__aeabi_fsub+0xce>
 800065c:	4663      	mov	r3, ip
 800065e:	4652      	mov	r2, sl
 8000660:	1a9b      	subs	r3, r3, r2
 8000662:	015a      	lsls	r2, r3, #5
 8000664:	d400      	bmi.n	8000668 <__aeabi_fsub+0x218>
 8000666:	e0aa      	b.n	80007be <__aeabi_fsub+0x36e>
 8000668:	4663      	mov	r3, ip
 800066a:	4652      	mov	r2, sl
 800066c:	000d      	movs	r5, r1
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	e744      	b.n	80004fc <__aeabi_fsub+0xac>
 8000672:	4652      	mov	r2, sl
 8000674:	2a00      	cmp	r2, #0
 8000676:	d023      	beq.n	80006c0 <__aeabi_fsub+0x270>
 8000678:	2201      	movs	r2, #1
 800067a:	4252      	negs	r2, r2
 800067c:	4690      	mov	r8, r2
 800067e:	44c1      	add	r9, r8
 8000680:	464a      	mov	r2, r9
 8000682:	2a00      	cmp	r2, #0
 8000684:	d075      	beq.n	8000772 <__aeabi_fsub+0x322>
 8000686:	2cff      	cmp	r4, #255	; 0xff
 8000688:	d000      	beq.n	800068c <__aeabi_fsub+0x23c>
 800068a:	e75f      	b.n	800054c <__aeabi_fsub+0xfc>
 800068c:	e796      	b.n	80005bc <__aeabi_fsub+0x16c>
 800068e:	26fe      	movs	r6, #254	; 0xfe
 8000690:	3401      	adds	r4, #1
 8000692:	4226      	tst	r6, r4
 8000694:	d153      	bne.n	800073e <__aeabi_fsub+0x2ee>
 8000696:	2800      	cmp	r0, #0
 8000698:	d172      	bne.n	8000780 <__aeabi_fsub+0x330>
 800069a:	4663      	mov	r3, ip
 800069c:	2b00      	cmp	r3, #0
 800069e:	d100      	bne.n	80006a2 <__aeabi_fsub+0x252>
 80006a0:	e093      	b.n	80007ca <__aeabi_fsub+0x37a>
 80006a2:	4653      	mov	r3, sl
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d100      	bne.n	80006aa <__aeabi_fsub+0x25a>
 80006a8:	e739      	b.n	800051e <__aeabi_fsub+0xce>
 80006aa:	4463      	add	r3, ip
 80006ac:	2400      	movs	r4, #0
 80006ae:	015a      	lsls	r2, r3, #5
 80006b0:	d502      	bpl.n	80006b8 <__aeabi_fsub+0x268>
 80006b2:	4a4a      	ldr	r2, [pc, #296]	; (80007dc <__aeabi_fsub+0x38c>)
 80006b4:	3401      	adds	r4, #1
 80006b6:	4013      	ands	r3, r2
 80006b8:	075a      	lsls	r2, r3, #29
 80006ba:	d000      	beq.n	80006be <__aeabi_fsub+0x26e>
 80006bc:	e720      	b.n	8000500 <__aeabi_fsub+0xb0>
 80006be:	08db      	lsrs	r3, r3, #3
 80006c0:	2cff      	cmp	r4, #255	; 0xff
 80006c2:	d100      	bne.n	80006c6 <__aeabi_fsub+0x276>
 80006c4:	e77a      	b.n	80005bc <__aeabi_fsub+0x16c>
 80006c6:	025b      	lsls	r3, r3, #9
 80006c8:	0a5f      	lsrs	r7, r3, #9
 80006ca:	b2e0      	uxtb	r0, r4
 80006cc:	e727      	b.n	800051e <__aeabi_fsub+0xce>
 80006ce:	20ff      	movs	r0, #255	; 0xff
 80006d0:	2700      	movs	r7, #0
 80006d2:	e724      	b.n	800051e <__aeabi_fsub+0xce>
 80006d4:	4b41      	ldr	r3, [pc, #260]	; (80007dc <__aeabi_fsub+0x38c>)
 80006d6:	1a24      	subs	r4, r4, r0
 80006d8:	4033      	ands	r3, r6
 80006da:	e70f      	b.n	80004fc <__aeabi_fsub+0xac>
 80006dc:	2eff      	cmp	r6, #255	; 0xff
 80006de:	d100      	bne.n	80006e2 <__aeabi_fsub+0x292>
 80006e0:	e76a      	b.n	80005b8 <__aeabi_fsub+0x168>
 80006e2:	2380      	movs	r3, #128	; 0x80
 80006e4:	4662      	mov	r2, ip
 80006e6:	04db      	lsls	r3, r3, #19
 80006e8:	431a      	orrs	r2, r3
 80006ea:	4694      	mov	ip, r2
 80006ec:	2301      	movs	r3, #1
 80006ee:	281b      	cmp	r0, #27
 80006f0:	dc09      	bgt.n	8000706 <__aeabi_fsub+0x2b6>
 80006f2:	2420      	movs	r4, #32
 80006f4:	4663      	mov	r3, ip
 80006f6:	4662      	mov	r2, ip
 80006f8:	40c3      	lsrs	r3, r0
 80006fa:	1a20      	subs	r0, r4, r0
 80006fc:	4082      	lsls	r2, r0
 80006fe:	0010      	movs	r0, r2
 8000700:	1e44      	subs	r4, r0, #1
 8000702:	41a0      	sbcs	r0, r4
 8000704:	4303      	orrs	r3, r0
 8000706:	4652      	mov	r2, sl
 8000708:	000d      	movs	r5, r1
 800070a:	0034      	movs	r4, r6
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	e6dc      	b.n	80004ca <__aeabi_fsub+0x7a>
 8000710:	4663      	mov	r3, ip
 8000712:	4652      	mov	r2, sl
 8000714:	1a9e      	subs	r6, r3, r2
 8000716:	0173      	lsls	r3, r6, #5
 8000718:	d417      	bmi.n	800074a <__aeabi_fsub+0x2fa>
 800071a:	2e00      	cmp	r6, #0
 800071c:	d000      	beq.n	8000720 <__aeabi_fsub+0x2d0>
 800071e:	e6d9      	b.n	80004d4 <__aeabi_fsub+0x84>
 8000720:	2500      	movs	r5, #0
 8000722:	2000      	movs	r0, #0
 8000724:	2700      	movs	r7, #0
 8000726:	e6fa      	b.n	800051e <__aeabi_fsub+0xce>
 8000728:	4663      	mov	r3, ip
 800072a:	2b00      	cmp	r3, #0
 800072c:	d044      	beq.n	80007b8 <__aeabi_fsub+0x368>
 800072e:	3901      	subs	r1, #1
 8000730:	2900      	cmp	r1, #0
 8000732:	d04c      	beq.n	80007ce <__aeabi_fsub+0x37e>
 8000734:	2eff      	cmp	r6, #255	; 0xff
 8000736:	d000      	beq.n	800073a <__aeabi_fsub+0x2ea>
 8000738:	e771      	b.n	800061e <__aeabi_fsub+0x1ce>
 800073a:	4643      	mov	r3, r8
 800073c:	e73e      	b.n	80005bc <__aeabi_fsub+0x16c>
 800073e:	2cff      	cmp	r4, #255	; 0xff
 8000740:	d0c5      	beq.n	80006ce <__aeabi_fsub+0x27e>
 8000742:	4652      	mov	r2, sl
 8000744:	4462      	add	r2, ip
 8000746:	0853      	lsrs	r3, r2, #1
 8000748:	e7b6      	b.n	80006b8 <__aeabi_fsub+0x268>
 800074a:	4663      	mov	r3, ip
 800074c:	000d      	movs	r5, r1
 800074e:	1ad6      	subs	r6, r2, r3
 8000750:	e6c0      	b.n	80004d4 <__aeabi_fsub+0x84>
 8000752:	4662      	mov	r2, ip
 8000754:	2a00      	cmp	r2, #0
 8000756:	d116      	bne.n	8000786 <__aeabi_fsub+0x336>
 8000758:	4653      	mov	r3, sl
 800075a:	2b00      	cmp	r3, #0
 800075c:	d000      	beq.n	8000760 <__aeabi_fsub+0x310>
 800075e:	e72b      	b.n	80005b8 <__aeabi_fsub+0x168>
 8000760:	2780      	movs	r7, #128	; 0x80
 8000762:	2500      	movs	r5, #0
 8000764:	20ff      	movs	r0, #255	; 0xff
 8000766:	03ff      	lsls	r7, r7, #15
 8000768:	e6d9      	b.n	800051e <__aeabi_fsub+0xce>
 800076a:	000d      	movs	r5, r1
 800076c:	4643      	mov	r3, r8
 800076e:	0034      	movs	r4, r6
 8000770:	e7a6      	b.n	80006c0 <__aeabi_fsub+0x270>
 8000772:	4653      	mov	r3, sl
 8000774:	4463      	add	r3, ip
 8000776:	e6f7      	b.n	8000568 <__aeabi_fsub+0x118>
 8000778:	4663      	mov	r3, ip
 800077a:	4652      	mov	r2, sl
 800077c:	1a9b      	subs	r3, r3, r2
 800077e:	e6a4      	b.n	80004ca <__aeabi_fsub+0x7a>
 8000780:	4662      	mov	r2, ip
 8000782:	2a00      	cmp	r2, #0
 8000784:	d0d9      	beq.n	800073a <__aeabi_fsub+0x2ea>
 8000786:	4652      	mov	r2, sl
 8000788:	2a00      	cmp	r2, #0
 800078a:	d100      	bne.n	800078e <__aeabi_fsub+0x33e>
 800078c:	e716      	b.n	80005bc <__aeabi_fsub+0x16c>
 800078e:	2280      	movs	r2, #128	; 0x80
 8000790:	03d2      	lsls	r2, r2, #15
 8000792:	4213      	tst	r3, r2
 8000794:	d100      	bne.n	8000798 <__aeabi_fsub+0x348>
 8000796:	e711      	b.n	80005bc <__aeabi_fsub+0x16c>
 8000798:	4640      	mov	r0, r8
 800079a:	4210      	tst	r0, r2
 800079c:	d000      	beq.n	80007a0 <__aeabi_fsub+0x350>
 800079e:	e70d      	b.n	80005bc <__aeabi_fsub+0x16c>
 80007a0:	e70a      	b.n	80005b8 <__aeabi_fsub+0x168>
 80007a2:	4652      	mov	r2, sl
 80007a4:	000d      	movs	r5, r1
 80007a6:	0034      	movs	r4, r6
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	e68e      	b.n	80004ca <__aeabi_fsub+0x7a>
 80007ac:	4653      	mov	r3, sl
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d008      	beq.n	80007c4 <__aeabi_fsub+0x374>
 80007b2:	000d      	movs	r5, r1
 80007b4:	4647      	mov	r7, r8
 80007b6:	e6b2      	b.n	800051e <__aeabi_fsub+0xce>
 80007b8:	4643      	mov	r3, r8
 80007ba:	0034      	movs	r4, r6
 80007bc:	e780      	b.n	80006c0 <__aeabi_fsub+0x270>
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d000      	beq.n	80007c4 <__aeabi_fsub+0x374>
 80007c2:	e779      	b.n	80006b8 <__aeabi_fsub+0x268>
 80007c4:	2500      	movs	r5, #0
 80007c6:	2700      	movs	r7, #0
 80007c8:	e6a9      	b.n	800051e <__aeabi_fsub+0xce>
 80007ca:	4647      	mov	r7, r8
 80007cc:	e6a7      	b.n	800051e <__aeabi_fsub+0xce>
 80007ce:	4653      	mov	r3, sl
 80007d0:	0034      	movs	r4, r6
 80007d2:	4463      	add	r3, ip
 80007d4:	e6c8      	b.n	8000568 <__aeabi_fsub+0x118>
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	7dffffff 	.word	0x7dffffff
 80007dc:	fbffffff 	.word	0xfbffffff

080007e0 <__aeabi_f2iz>:
 80007e0:	0241      	lsls	r1, r0, #9
 80007e2:	0042      	lsls	r2, r0, #1
 80007e4:	0fc3      	lsrs	r3, r0, #31
 80007e6:	0a49      	lsrs	r1, r1, #9
 80007e8:	2000      	movs	r0, #0
 80007ea:	0e12      	lsrs	r2, r2, #24
 80007ec:	2a7e      	cmp	r2, #126	; 0x7e
 80007ee:	d903      	bls.n	80007f8 <__aeabi_f2iz+0x18>
 80007f0:	2a9d      	cmp	r2, #157	; 0x9d
 80007f2:	d902      	bls.n	80007fa <__aeabi_f2iz+0x1a>
 80007f4:	4a09      	ldr	r2, [pc, #36]	; (800081c <__aeabi_f2iz+0x3c>)
 80007f6:	1898      	adds	r0, r3, r2
 80007f8:	4770      	bx	lr
 80007fa:	2080      	movs	r0, #128	; 0x80
 80007fc:	0400      	lsls	r0, r0, #16
 80007fe:	4301      	orrs	r1, r0
 8000800:	2a95      	cmp	r2, #149	; 0x95
 8000802:	dc07      	bgt.n	8000814 <__aeabi_f2iz+0x34>
 8000804:	2096      	movs	r0, #150	; 0x96
 8000806:	1a82      	subs	r2, r0, r2
 8000808:	40d1      	lsrs	r1, r2
 800080a:	4248      	negs	r0, r1
 800080c:	2b00      	cmp	r3, #0
 800080e:	d1f3      	bne.n	80007f8 <__aeabi_f2iz+0x18>
 8000810:	0008      	movs	r0, r1
 8000812:	e7f1      	b.n	80007f8 <__aeabi_f2iz+0x18>
 8000814:	3a96      	subs	r2, #150	; 0x96
 8000816:	4091      	lsls	r1, r2
 8000818:	e7f7      	b.n	800080a <__aeabi_f2iz+0x2a>
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	7fffffff 	.word	0x7fffffff

08000820 <__clzsi2>:
 8000820:	211c      	movs	r1, #28
 8000822:	2301      	movs	r3, #1
 8000824:	041b      	lsls	r3, r3, #16
 8000826:	4298      	cmp	r0, r3
 8000828:	d301      	bcc.n	800082e <__clzsi2+0xe>
 800082a:	0c00      	lsrs	r0, r0, #16
 800082c:	3910      	subs	r1, #16
 800082e:	0a1b      	lsrs	r3, r3, #8
 8000830:	4298      	cmp	r0, r3
 8000832:	d301      	bcc.n	8000838 <__clzsi2+0x18>
 8000834:	0a00      	lsrs	r0, r0, #8
 8000836:	3908      	subs	r1, #8
 8000838:	091b      	lsrs	r3, r3, #4
 800083a:	4298      	cmp	r0, r3
 800083c:	d301      	bcc.n	8000842 <__clzsi2+0x22>
 800083e:	0900      	lsrs	r0, r0, #4
 8000840:	3904      	subs	r1, #4
 8000842:	a202      	add	r2, pc, #8	; (adr r2, 800084c <__clzsi2+0x2c>)
 8000844:	5c10      	ldrb	r0, [r2, r0]
 8000846:	1840      	adds	r0, r0, r1
 8000848:	4770      	bx	lr
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	02020304 	.word	0x02020304
 8000850:	01010101 	.word	0x01010101
	...

0800085c <APP_SX1272_setup>:

///////////////////////////////////////////////////////////////
// Setup function
///////////////////////////////////////////////////////////////
void APP_SX1272_setup()
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  // Power ON the module
  e = BSP_SX1272_ON(type_modulation);
 8000860:	4b78      	ldr	r3, [pc, #480]	; (8000a44 <APP_SX1272_setup+0x1e8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	0018      	movs	r0, r3
 8000866:	f000 fcb7 	bl	80011d8 <BSP_SX1272_ON>
 800086a:	0003      	movs	r3, r0
 800086c:	b25a      	sxtb	r2, r3
 800086e:	4b76      	ldr	r3, [pc, #472]	; (8000a48 <APP_SX1272_setup+0x1ec>)
 8000870:	701a      	strb	r2, [r3, #0]
  if (e == 0)
 8000872:	4b75      	ldr	r3, [pc, #468]	; (8000a48 <APP_SX1272_setup+0x1ec>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b25b      	sxtb	r3, r3
 8000878:	2b00      	cmp	r3, #0
 800087a:	d104      	bne.n	8000886 <APP_SX1272_setup+0x2a>
  {
    my_printf("SX1272 Module on\r\n");
 800087c:	4b73      	ldr	r3, [pc, #460]	; (8000a4c <APP_SX1272_setup+0x1f0>)
 800087e:	0018      	movs	r0, r3
 8000880:	f000 fc5c 	bl	800113c <my_printf>
 8000884:	e002      	b.n	800088c <APP_SX1272_setup+0x30>
  }
  else
  {
    //my_printfln(F("Problem of activation of SX1272 Module !"));
    ConfigOK = 0;
 8000886:	4b72      	ldr	r3, [pc, #456]	; (8000a50 <APP_SX1272_setup+0x1f4>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
  }
  // Select frequency channel
  e = BSP_SX1272_setChannel(freq_centrale);
 800088c:	4b71      	ldr	r3, [pc, #452]	; (8000a54 <APP_SX1272_setup+0x1f8>)
 800088e:	0018      	movs	r0, r3
 8000890:	f001 fc3e 	bl	8002110 <BSP_SX1272_setChannel>
 8000894:	0003      	movs	r3, r0
 8000896:	001a      	movs	r2, r3
 8000898:	4b6b      	ldr	r3, [pc, #428]	; (8000a48 <APP_SX1272_setup+0x1ec>)
 800089a:	701a      	strb	r2, [r3, #0]
  my_printf("Frequency channel ");
 800089c:	4b6e      	ldr	r3, [pc, #440]	; (8000a58 <APP_SX1272_setup+0x1fc>)
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 fc4c 	bl	800113c <my_printf>
  my_printf("%d",freq_centrale);
 80008a4:	4a6b      	ldr	r2, [pc, #428]	; (8000a54 <APP_SX1272_setup+0x1f8>)
 80008a6:	4b6d      	ldr	r3, [pc, #436]	; (8000a5c <APP_SX1272_setup+0x200>)
 80008a8:	0011      	movs	r1, r2
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 fc46 	bl	800113c <my_printf>
  if (e == 0)
 80008b0:	4b65      	ldr	r3, [pc, #404]	; (8000a48 <APP_SX1272_setup+0x1ec>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b25b      	sxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d104      	bne.n	80008c4 <APP_SX1272_setup+0x68>
  {
    my_printf(" has been successfully set.\r\n");
 80008ba:	4b69      	ldr	r3, [pc, #420]	; (8000a60 <APP_SX1272_setup+0x204>)
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 fc3d 	bl	800113c <my_printf>
 80008c2:	e006      	b.n	80008d2 <APP_SX1272_setup+0x76>
  }
  else
  {
    my_printf(" has not been set !\r\n");
 80008c4:	4b67      	ldr	r3, [pc, #412]	; (8000a64 <APP_SX1272_setup+0x208>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 fc38 	bl	800113c <my_printf>
    ConfigOK = 0;
 80008cc:	4b60      	ldr	r3, [pc, #384]	; (8000a50 <APP_SX1272_setup+0x1f4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
  }
  // Select output power
  e = BSP_SX1272_setPower(OutPower);
 80008d2:	200f      	movs	r0, #15
 80008d4:	f001 fca2 	bl	800221c <BSP_SX1272_setPower>
 80008d8:	0003      	movs	r3, r0
 80008da:	001a      	movs	r2, r3
 80008dc:	4b5a      	ldr	r3, [pc, #360]	; (8000a48 <APP_SX1272_setup+0x1ec>)
 80008de:	701a      	strb	r2, [r3, #0]
  my_printf("Output power ");
 80008e0:	4b61      	ldr	r3, [pc, #388]	; (8000a68 <APP_SX1272_setup+0x20c>)
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 fc2a 	bl	800113c <my_printf>
  my_printf("%d",OutPower);
 80008e8:	4b5c      	ldr	r3, [pc, #368]	; (8000a5c <APP_SX1272_setup+0x200>)
 80008ea:	210f      	movs	r1, #15
 80008ec:	0018      	movs	r0, r3
 80008ee:	f000 fc25 	bl	800113c <my_printf>
  if (e == 0)
 80008f2:	4b55      	ldr	r3, [pc, #340]	; (8000a48 <APP_SX1272_setup+0x1ec>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b25b      	sxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d104      	bne.n	8000906 <APP_SX1272_setup+0xaa>
  {
    my_printf(" has been successfully set.\r\n");
 80008fc:	4b58      	ldr	r3, [pc, #352]	; (8000a60 <APP_SX1272_setup+0x204>)
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 fc1c 	bl	800113c <my_printf>
 8000904:	e006      	b.n	8000914 <APP_SX1272_setup+0xb8>
  }
  else
  {
    my_printf(" has not been set !\r\n");
 8000906:	4b57      	ldr	r3, [pc, #348]	; (8000a64 <APP_SX1272_setup+0x208>)
 8000908:	0018      	movs	r0, r3
 800090a:	f000 fc17 	bl	800113c <my_printf>
    ConfigOK = 0;
 800090e:	4b50      	ldr	r3, [pc, #320]	; (8000a50 <APP_SX1272_setup+0x1f4>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
  }

  if (ConfigOK == 1)
 8000914:	4b4e      	ldr	r3, [pc, #312]	; (8000a50 <APP_SX1272_setup+0x1f4>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d000      	beq.n	800091e <APP_SX1272_setup+0xc2>
 800091c:	e082      	b.n	8000a24 <APP_SX1272_setup+0x1c8>
  {
	//////////////////////////////////////////////////////////////////////
  //config suppl�mentaire mode LORA
	//////////////////////////////////////////////////////////////////////
    if(type_modulation==0)
 800091e:	4b49      	ldr	r3, [pc, #292]	; (8000a44 <APP_SX1272_setup+0x1e8>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d132      	bne.n	800098c <APP_SX1272_setup+0x130>
    {
      // Set header
      e = BSP_SX1272_setHeaderON();
 8000926:	f000 fd99 	bl	800145c <BSP_SX1272_setHeaderON>
 800092a:	0003      	movs	r3, r0
 800092c:	001a      	movs	r2, r3
 800092e:	4b46      	ldr	r3, [pc, #280]	; (8000a48 <APP_SX1272_setup+0x1ec>)
 8000930:	701a      	strb	r2, [r3, #0]
      // Set transmission mode
      e = BSP_SX1272_setCR(paramCR);    // CR_5 : CR = 4/5
 8000932:	2001      	movs	r0, #1
 8000934:	f001 f9f6 	bl	8001d24 <BSP_SX1272_setCR>
 8000938:	0003      	movs	r3, r0
 800093a:	001a      	movs	r2, r3
 800093c:	4b42      	ldr	r3, [pc, #264]	; (8000a48 <APP_SX1272_setup+0x1ec>)
 800093e:	701a      	strb	r2, [r3, #0]
      e = BSP_SX1272_setSF(paramSF);   // SF = 12
 8000940:	200c      	movs	r0, #12
 8000942:	f000 fecf 	bl	80016e4 <BSP_SX1272_setSF>
 8000946:	0003      	movs	r3, r0
 8000948:	b25a      	sxtb	r2, r3
 800094a:	4b3f      	ldr	r3, [pc, #252]	; (8000a48 <APP_SX1272_setup+0x1ec>)
 800094c:	701a      	strb	r2, [r3, #0]
      e = BSP_SX1272_setBW(paramBW);    // BW = 125 KHz
 800094e:	2000      	movs	r0, #0
 8000950:	f001 f8e2 	bl	8001b18 <BSP_SX1272_setBW>
 8000954:	0003      	movs	r3, r0
 8000956:	001a      	movs	r2, r3
 8000958:	4b3b      	ldr	r3, [pc, #236]	; (8000a48 <APP_SX1272_setup+0x1ec>)
 800095a:	701a      	strb	r2, [r3, #0]
      // Set CRC
      e = BSP_SX1272_setCRC_ON();
 800095c:	f000 fe0e 	bl	800157c <BSP_SX1272_setCRC_ON>
 8000960:	0003      	movs	r3, r0
 8000962:	b25a      	sxtb	r2, r3
 8000964:	4b38      	ldr	r3, [pc, #224]	; (8000a48 <APP_SX1272_setup+0x1ec>)
 8000966:	701a      	strb	r2, [r3, #0]
      // Set the node address
      e = BSP_SX1272_setNodeAddress(RX_Addr);
 8000968:	2001      	movs	r0, #1
 800096a:	f001 fd7b 	bl	8002464 <BSP_SX1272_setNodeAddress>
 800096e:	0003      	movs	r3, r0
 8000970:	001a      	movs	r2, r3
 8000972:	4b35      	ldr	r3, [pc, #212]	; (8000a48 <APP_SX1272_setup+0x1ec>)
 8000974:	701a      	strb	r2, [r3, #0]
      // Set the length of preamble
      e = BSP_SX1272_setPreambleLength(PreambLong);
 8000976:	200c      	movs	r0, #12
 8000978:	f001 fcac 	bl	80022d4 <BSP_SX1272_setPreambleLength>
 800097c:	0003      	movs	r3, r0
 800097e:	b25a      	sxtb	r2, r3
 8000980:	4b31      	ldr	r3, [pc, #196]	; (8000a48 <APP_SX1272_setup+0x1ec>)
 8000982:	701a      	strb	r2, [r3, #0]
      // Set the number of transmission retries
      currentstate._maxRetries = MaxNbRetries;
 8000984:	4b39      	ldr	r3, [pc, #228]	; (8000a6c <APP_SX1272_setup+0x210>)
 8000986:	2203      	movs	r2, #3
 8000988:	769a      	strb	r2, [r3, #26]
 800098a:	e046      	b.n	8000a1a <APP_SX1272_setup+0x1be>
	//config suppl�mentaire mode FSK
	//////////////////////////////////////////////////////////////////////
    else
    {
      // Set CRC
      e = BSP_SX1272_setCRC_ON();
 800098c:	f000 fdf6 	bl	800157c <BSP_SX1272_setCRC_ON>
 8000990:	0003      	movs	r3, r0
 8000992:	b25a      	sxtb	r2, r3
 8000994:	4b2c      	ldr	r3, [pc, #176]	; (8000a48 <APP_SX1272_setup+0x1ec>)
 8000996:	701a      	strb	r2, [r3, #0]
      // Set the node address
      e = BSP_SX1272_setNodeAddress(RX_Addr);
 8000998:	2001      	movs	r0, #1
 800099a:	f001 fd63 	bl	8002464 <BSP_SX1272_setNodeAddress>
 800099e:	0003      	movs	r3, r0
 80009a0:	001a      	movs	r2, r3
 80009a2:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <APP_SX1272_setup+0x1ec>)
 80009a4:	701a      	strb	r2, [r3, #0]
      // Set the length of preamble
      e = BSP_SX1272_setPreambleLength(PreambLong);
 80009a6:	200c      	movs	r0, #12
 80009a8:	f001 fc94 	bl	80022d4 <BSP_SX1272_setPreambleLength>
 80009ac:	0003      	movs	r3, r0
 80009ae:	b25a      	sxtb	r2, r3
 80009b0:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <APP_SX1272_setup+0x1ec>)
 80009b2:	701a      	strb	r2, [r3, #0]
      // Set the number of transmission retries
      currentstate._maxRetries = MaxNbRetries;
 80009b4:	4b2d      	ldr	r3, [pc, #180]	; (8000a6c <APP_SX1272_setup+0x210>)
 80009b6:	2203      	movs	r2, #3
 80009b8:	769a      	strb	r2, [r3, #26]

      BSP_SX1272_Write(REG_SYNC_VALUE1,0x05);
 80009ba:	2105      	movs	r1, #5
 80009bc:	2028      	movs	r0, #40	; 0x28
 80009be:	f002 fa0d 	bl	8002ddc <BSP_SX1272_Write>
      BSP_SX1272_Write(REG_SYNC_VALUE2,0x05);
 80009c2:	2105      	movs	r1, #5
 80009c4:	2029      	movs	r0, #41	; 0x29
 80009c6:	f002 fa09 	bl	8002ddc <BSP_SX1272_Write>
      BSP_SX1272_Write(REG_SYNC_VALUE3,0x05);
 80009ca:	2105      	movs	r1, #5
 80009cc:	202a      	movs	r0, #42	; 0x2a
 80009ce:	f002 fa05 	bl	8002ddc <BSP_SX1272_Write>
      BSP_SX1272_Write(REG_SYNC_VALUE4,0x05);
 80009d2:	2105      	movs	r1, #5
 80009d4:	202b      	movs	r0, #43	; 0x2b
 80009d6:	f002 fa01 	bl	8002ddc <BSP_SX1272_Write>

	  //Set the frequency deviation an bit rate parameters
	  BSP_SX1272_Write(REG_FDEV_MSB,(RegFdev>>8)&0x00FF);// FDA = Fstep*FDEV = 61Hz*Fdev : ex: 0x7FF*61 = 125kHz ex2: 0X52*61=5kHz
 80009da:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <APP_SX1272_setup+0x214>)
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	0a1b      	lsrs	r3, r3, #8
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	0019      	movs	r1, r3
 80009e6:	2004      	movs	r0, #4
 80009e8:	f002 f9f8 	bl	8002ddc <BSP_SX1272_Write>
	  BSP_SX1272_Write(REG_FDEV_LSB,RegFdev&0x00FF);//...
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <APP_SX1272_setup+0x214>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	0019      	movs	r1, r3
 80009f4:	2005      	movs	r0, #5
 80009f6:	f002 f9f1 	bl	8002ddc <BSP_SX1272_Write>
      BSP_SX1272_Write(REG_BITRATE_MSB,(RegBitRate>>8)&0x00FF);//FXOSC=32Mz, BR = FXOSC/(Bitrate + BitrateFrac/16), ex: FXOSC/0x682B = 1200 bauds, ex2: FXOSC/0x200=62.5 kbauds
 80009fa:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <APP_SX1272_setup+0x218>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	0a1b      	lsrs	r3, r3, #8
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	0019      	movs	r1, r3
 8000a06:	2002      	movs	r0, #2
 8000a08:	f002 f9e8 	bl	8002ddc <BSP_SX1272_Write>
      BSP_SX1272_Write(REG_BITRATE_LSB,RegBitRate&0x00FF);//...
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <APP_SX1272_setup+0x218>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	0019      	movs	r1, r3
 8000a14:	2003      	movs	r0, #3
 8000a16:	f002 f9e1 	bl	8002ddc <BSP_SX1272_Write>

    }
    my_printf("SX1272 successfully configured !\r\n");
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <APP_SX1272_setup+0x21c>)
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f000 fb8d 	bl	800113c <my_printf>
 8000a22:	e003      	b.n	8000a2c <APP_SX1272_setup+0x1d0>
  }
  else
  {
    my_printf("SX1272 initialization failed !\r\n");
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <APP_SX1272_setup+0x220>)
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 fb88 	bl	800113c <my_printf>
  }

  waitPeriod = PeriodTransmission;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <APP_SX1272_setup+0x224>)
 8000a2e:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <APP_SX1272_setup+0x228>)
 8000a30:	601a      	str	r2, [r3, #0]

  BSP_DELAY_ms(1000);
 8000a32:	23fa      	movs	r3, #250	; 0xfa
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	0018      	movs	r0, r3
 8000a38:	f002 fa24 	bl	8002e84 <BSP_DELAY_ms>
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	20000020 	.word	0x20000020
 8000a48:	20000058 	.word	0x20000058
 8000a4c:	080030fc 	.word	0x080030fc
 8000a50:	20000028 	.word	0x20000028
 8000a54:	00d91333 	.word	0x00d91333
 8000a58:	08003110 	.word	0x08003110
 8000a5c:	08003124 	.word	0x08003124
 8000a60:	08003128 	.word	0x08003128
 8000a64:	08003148 	.word	0x08003148
 8000a68:	08003160 	.word	0x08003160
 8000a6c:	2000005c 	.word	0x2000005c
 8000a70:	20000026 	.word	0x20000026
 8000a74:	20000024 	.word	0x20000024
 8000a78:	08003170 	.word	0x08003170
 8000a7c:	08003194 	.word	0x08003194
 8000a80:	20000050 	.word	0x20000050
 8000a84:	459c4000 	.word	0x459c4000

08000a88 <APP_SX1272_runTransmit>:

void APP_SX1272_runTransmit()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
	uint8_t dest_address = TX_Addr;
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]

	//////////////////////////////////////////////////////////////////////////////////
	// Transmit a packet continuously with a pause of "waitPeriod"
	if (ConfigOK == 1)
 8000a94:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <APP_SX1272_runTransmit+0xb4>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d14b      	bne.n	8000b34 <APP_SX1272_runTransmit+0xac>
	{

		if( currentstate._modem == FSK )
 8000a9c:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <APP_SX1272_runTransmit+0xb8>)
 8000a9e:	7f1b      	ldrb	r3, [r3, #28]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d102      	bne.n	8000aaa <APP_SX1272_runTransmit+0x22>
		{
			BSP_SX1272_setLORA();		  		// Setting LoRa mode
 8000aa4:	f000 fc26 	bl	80012f4 <BSP_SX1272_setLORA>
 8000aa8:	e003      	b.n	8000ab2 <APP_SX1272_runTransmit+0x2a>
		}
		else
		{
			/// LoRa mode
			// LoRa standby mode
			BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);
 8000aaa:	2181      	movs	r1, #129	; 0x81
 8000aac:	2001      	movs	r0, #1
 8000aae:	f002 f995 	bl	8002ddc <BSP_SX1272_Write>
		}

		LgMsg=strlen(Message);
 8000ab2:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <APP_SX1272_runTransmit+0xbc>)
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f7ff fb27 	bl	8000108 <strlen>
 8000aba:	0003      	movs	r3, r0
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <APP_SX1272_runTransmit+0xc0>)
 8000ac0:	701a      	strb	r2, [r3, #0]
		e = BSP_SX1272_sendPacketTimeout(dest_address,Message,WaitTxMax);
 8000ac2:	4a22      	ldr	r2, [pc, #136]	; (8000b4c <APP_SX1272_runTransmit+0xc4>)
 8000ac4:	491f      	ldr	r1, [pc, #124]	; (8000b44 <APP_SX1272_runTransmit+0xbc>)
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	0018      	movs	r0, r3
 8000acc:	f001 ff6a 	bl	80029a4 <BSP_SX1272_sendPacketTimeout>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	b25a      	sxtb	r2, r3
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <APP_SX1272_runTransmit+0xc8>)
 8000ad6:	701a      	strb	r2, [r3, #0]
//		if(type_modulation)
//		{
//			BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE); // FSK standby mode to switch off the RF field
//		}

		if (e == 0)
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <APP_SX1272_runTransmit+0xc8>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	b25b      	sxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d11b      	bne.n	8000b1a <APP_SX1272_runTransmit+0x92>
		{
			my_printf("\n Packet number ");
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <APP_SX1272_runTransmit+0xcc>)
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f000 fb29 	bl	800113c <my_printf>
			my_printf("%d",cp);
 8000aea:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <APP_SX1272_runTransmit+0xd0>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <APP_SX1272_runTransmit+0xd4>)
 8000af0:	0011      	movs	r1, r2
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 fb22 	bl	800113c <my_printf>
			my_printf(" ;Rx node address ");
 8000af8:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <APP_SX1272_runTransmit+0xd8>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 fb1e 	bl	800113c <my_printf>
			my_printf("%d\r\n",dest_address);
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	781a      	ldrb	r2, [r3, #0]
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <APP_SX1272_runTransmit+0xdc>)
 8000b06:	0011      	movs	r1, r2
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f000 fb17 	bl	800113c <my_printf>
			cp++;
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <APP_SX1272_runTransmit+0xd0>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <APP_SX1272_runTransmit+0xd0>)
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	e003      	b.n	8000b22 <APP_SX1272_runTransmit+0x9a>
		}
		else
		{
			my_printf("\n Trasmission problem !\r\n");
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <APP_SX1272_runTransmit+0xe0>)
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f000 fb0d 	bl	800113c <my_printf>
		}
		BSP_DELAY_ms(waitPeriod); //delay to send packet every PeriodTransmission
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <APP_SX1272_runTransmit+0xe4>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	1c18      	adds	r0, r3, #0
 8000b28:	f7ff fbbc 	bl	80002a4 <__aeabi_f2uiz>
 8000b2c:	0003      	movs	r3, r0
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f002 f9a8 	bl	8002e84 <BSP_DELAY_ms>
	}
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b002      	add	sp, #8
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000028 	.word	0x20000028
 8000b40:	2000005c 	.word	0x2000005c
 8000b44:	20000000 	.word	0x20000000
 8000b48:	2000004c 	.word	0x2000004c
 8000b4c:	00001388 	.word	0x00001388
 8000b50:	20000058 	.word	0x20000058
 8000b54:	080031b8 	.word	0x080031b8
 8000b58:	20000054 	.word	0x20000054
 8000b5c:	08003124 	.word	0x08003124
 8000b60:	080031cc 	.word	0x080031cc
 8000b64:	080031e0 	.word	0x080031e0
 8000b68:	080031e8 	.word	0x080031e8
 8000b6c:	20000050 	.word	0x20000050

08000b70 <main>:
#include "appSX1272.h"

static void SystemClock_Config();

int main()
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
	uint32_t curtime=0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
	uint32_t i=0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]

	// Initialize System clock to 48MHz from external clock
	SystemClock_Config();
 8000b7e:	f000 f823 	bl	8000bc8 <SystemClock_Config>
	// Initialize timebase
	BSP_TIMER_Timebase_Init();
 8000b82:	f002 f825 	bl	8002bd0 <BSP_TIMER_Timebase_Init>
	// Initialize NVIC
	BSP_NVIC_Init();
 8000b86:	f002 f851 	bl	8002c2c <BSP_NVIC_Init>
	// Initialize SPI interface
	BSP_SPI1_Init();
 8000b8a:	f002 f86d 	bl	8002c68 <BSP_SPI1_Init>
	// Initialize Debug Console
	BSP_Console_Init();
 8000b8e:	f001 ffbb 	bl	8002b08 <BSP_Console_Init>

	my_printf("Console ready!\r\n");
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <main+0x54>)
 8000b94:	0018      	movs	r0, r3
 8000b96:	f000 fad1 	bl	800113c <my_printf>

	///////////////////////////////////////////
	//setup SX1272
	APP_SX1272_setup();
 8000b9a:	f7ff fe5f 	bl	800085c <APP_SX1272_setup>

	while(1)
	{
		curtime=BSP_millis();
 8000b9e:	f002 f859 	bl	8002c54 <BSP_millis>
 8000ba2:	0003      	movs	r3, r0
 8000ba4:	603b      	str	r3, [r7, #0]

		if((curtime%1000)==0)//send every 1000ms
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	22fa      	movs	r2, #250	; 0xfa
 8000baa:	0091      	lsls	r1, r2, #2
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff fb39 	bl	8000224 <__aeabi_uidivmod>
 8000bb2:	1e0b      	subs	r3, r1, #0
 8000bb4:	d1f3      	bne.n	8000b9e <main+0x2e>
		{
			APP_SX1272_runTransmit();
 8000bb6:	f7ff ff67 	bl	8000a88 <APP_SX1272_runTransmit>
			//APP_SX1272_runReceive();
			i++;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
		curtime=BSP_millis();
 8000bc0:	e7ed      	b.n	8000b9e <main+0x2e>
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	08003290 	.word	0x08003290

08000bc8 <SystemClock_Config>:
 *
 *  Laurent Latorre - 05/08/2017
 */

static void SystemClock_Config()
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
	uint32_t	HSE_Status;
	uint32_t	PLL_Status;
	uint32_t	SW_Status;
	uint32_t	timeout = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]

	timeout = 1000000;
 8000bd2:	4b64      	ldr	r3, [pc, #400]	; (8000d64 <SystemClock_Config+0x19c>)
 8000bd4:	60fb      	str	r3, [r7, #12]

	// Start HSE in Bypass Mode
	RCC->CR |= RCC_CR_HSEBYP;
 8000bd6:	4b64      	ldr	r3, [pc, #400]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	4b63      	ldr	r3, [pc, #396]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000bdc:	2180      	movs	r1, #128	; 0x80
 8000bde:	02c9      	lsls	r1, r1, #11
 8000be0:	430a      	orrs	r2, r1
 8000be2:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;
 8000be4:	4b60      	ldr	r3, [pc, #384]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b5f      	ldr	r3, [pc, #380]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000bea:	2180      	movs	r1, #128	; 0x80
 8000bec:	0249      	lsls	r1, r1, #9
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	601a      	str	r2, [r3, #0]

	// Wait until HSE is ready
	do
	{
		HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 8000bf2:	4b5d      	ldr	r3, [pc, #372]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	029b      	lsls	r3, r3, #10
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	60bb      	str	r3, [r7, #8]
		timeout--;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
	} while ((HSE_Status == 0) && (timeout > 0));
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d102      	bne.n	8000c10 <SystemClock_Config+0x48>
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1f0      	bne.n	8000bf2 <SystemClock_Config+0x2a>

	// Select HSE as PLL input source
	RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 8000c10:	4b55      	ldr	r3, [pc, #340]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	4b54      	ldr	r3, [pc, #336]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000c16:	4955      	ldr	r1, [pc, #340]	; (8000d6c <SystemClock_Config+0x1a4>)
 8000c18:	400a      	ands	r2, r1
 8000c1a:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x02 <<RCC_CFGR_PLLSRC_Pos);
 8000c1c:	4b52      	ldr	r3, [pc, #328]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000c1e:	685a      	ldr	r2, [r3, #4]
 8000c20:	4b51      	ldr	r3, [pc, #324]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000c22:	2180      	movs	r1, #128	; 0x80
 8000c24:	0249      	lsls	r1, r1, #9
 8000c26:	430a      	orrs	r2, r1
 8000c28:	605a      	str	r2, [r3, #4]

	// Set PLL PREDIV to /1
	RCC->CFGR2 = 0x00000000;
 8000c2a:	4b4f      	ldr	r3, [pc, #316]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set PLL MUL to x6
	RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 8000c30:	4b4d      	ldr	r3, [pc, #308]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	4b4c      	ldr	r3, [pc, #304]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000c36:	494e      	ldr	r1, [pc, #312]	; (8000d70 <SystemClock_Config+0x1a8>)
 8000c38:	400a      	ands	r2, r1
 8000c3a:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x04 <<RCC_CFGR_PLLMUL_Pos);
 8000c3c:	4b4a      	ldr	r3, [pc, #296]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	4b49      	ldr	r3, [pc, #292]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000c42:	2180      	movs	r1, #128	; 0x80
 8000c44:	0349      	lsls	r1, r1, #13
 8000c46:	430a      	orrs	r2, r1
 8000c48:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;
 8000c4a:	4b47      	ldr	r3, [pc, #284]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b46      	ldr	r3, [pc, #280]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	0449      	lsls	r1, r1, #17
 8000c54:	430a      	orrs	r2, r1
 8000c56:	601a      	str	r2, [r3, #0]

	// Wait until PLL is ready
	do
	{
		PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 8000c58:	4b43      	ldr	r3, [pc, #268]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	049b      	lsls	r3, r3, #18
 8000c60:	4013      	ands	r3, r2
 8000c62:	607b      	str	r3, [r7, #4]
		timeout--;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	60fb      	str	r3, [r7, #12]
	} while ((PLL_Status == 0) && (timeout > 0));
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <SystemClock_Config+0xae>
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1f0      	bne.n	8000c58 <SystemClock_Config+0x90>

        // Set AHB prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 8000c76:	4b3c      	ldr	r3, [pc, #240]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	4b3b      	ldr	r3, [pc, #236]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000c7c:	21f0      	movs	r1, #240	; 0xf0
 8000c7e:	438a      	bics	r2, r1
 8000c80:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000c82:	4a39      	ldr	r2, [pc, #228]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000c84:	4b38      	ldr	r3, [pc, #224]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000c86:	6852      	ldr	r2, [r2, #4]
 8000c88:	605a      	str	r2, [r3, #4]

	//Set APB1 prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 8000c8a:	4b37      	ldr	r3, [pc, #220]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	4b36      	ldr	r3, [pc, #216]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000c90:	4938      	ldr	r1, [pc, #224]	; (8000d74 <SystemClock_Config+0x1ac>)
 8000c92:	400a      	ands	r2, r1
 8000c94:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 8000c96:	4a34      	ldr	r2, [pc, #208]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000c98:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000c9a:	6852      	ldr	r2, [r2, #4]
 8000c9c:	605a      	str	r2, [r3, #4]

	// Enable FLASH Prefetch Buffer and set Flash Latency
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8000c9e:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <SystemClock_Config+0x1b0>)
 8000ca0:	2211      	movs	r2, #17
 8000ca2:	601a      	str	r2, [r3, #0]

	/* --- Until this point, MCU was still clocked by HSI at 8MHz ---*/
	/* --- Switching to PLL at 48MHz Now!  Fasten your seat belt! ---*/

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 8000ca4:	4b30      	ldr	r3, [pc, #192]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000caa:	2103      	movs	r1, #3
 8000cac:	438a      	bics	r2, r1
 8000cae:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000cb0:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	4b2c      	ldr	r3, [pc, #176]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000cb6:	2102      	movs	r1, #2
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	605a      	str	r2, [r3, #4]

	// Wait until PLL becomes main switch input
	do
	{
		SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 8000cbc:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	220c      	movs	r2, #12
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	603b      	str	r3, [r7, #0]
		timeout--;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
	} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	2b08      	cmp	r3, #8
 8000cd0:	d002      	beq.n	8000cd8 <SystemClock_Config+0x110>
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1f1      	bne.n	8000cbc <SystemClock_Config+0xf4>
	/* --- Here we go! ---*/

	/*--- Use PA8 as MCO output at 48/16 = 3MHz ---*/

	// Set MCO source as SYSCLK (48MHz)
	RCC->CFGR &= ~RCC_CFGR_MCO_Msk;
 8000cd8:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	4b22      	ldr	r3, [pc, #136]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000cde:	4927      	ldr	r1, [pc, #156]	; (8000d7c <SystemClock_Config+0x1b4>)
 8000ce0:	400a      	ands	r2, r1
 8000ce2:	605a      	str	r2, [r3, #4]
	RCC->CFGR |=  RCC_CFGR_MCOSEL_SYSCLK;
 8000ce4:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000cea:	2180      	movs	r1, #128	; 0x80
 8000cec:	04c9      	lsls	r1, r1, #19
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	605a      	str	r2, [r3, #4]

	// Set MCO prescaler to /16 -> 3MHz
	RCC->CFGR &= ~RCC_CFGR_MCOPRE_Msk;
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000cf8:	4921      	ldr	r1, [pc, #132]	; (8000d80 <SystemClock_Config+0x1b8>)
 8000cfa:	400a      	ands	r2, r1
 8000cfc:	605a      	str	r2, [r3, #4]
	RCC->CFGR |=  RCC_CFGR_MCOPRE_DIV16;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000d04:	2180      	movs	r1, #128	; 0x80
 8000d06:	05c9      	lsls	r1, r1, #23
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	605a      	str	r2, [r3, #4]

	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000d0e:	695a      	ldr	r2, [r3, #20]
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <SystemClock_Config+0x1a0>)
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	0289      	lsls	r1, r1, #10
 8000d16:	430a      	orrs	r2, r1
 8000d18:	615a      	str	r2, [r3, #20]

	// Configure PA8 as Alternate function
	GPIOA->MODER &= ~GPIO_MODER_MODER8_Msk;
 8000d1a:	2390      	movs	r3, #144	; 0x90
 8000d1c:	05db      	lsls	r3, r3, #23
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	2390      	movs	r3, #144	; 0x90
 8000d22:	05db      	lsls	r3, r3, #23
 8000d24:	4917      	ldr	r1, [pc, #92]	; (8000d84 <SystemClock_Config+0x1bc>)
 8000d26:	400a      	ands	r2, r1
 8000d28:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER8_Pos);
 8000d2a:	2390      	movs	r3, #144	; 0x90
 8000d2c:	05db      	lsls	r3, r3, #23
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	2390      	movs	r3, #144	; 0x90
 8000d32:	05db      	lsls	r3, r3, #23
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	0289      	lsls	r1, r1, #10
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	601a      	str	r2, [r3, #0]

	// Set to AF0 (MCO output)
	GPIOA->AFR[1] &= ~(0x0000000F);
 8000d3c:	2390      	movs	r3, #144	; 0x90
 8000d3e:	05db      	lsls	r3, r3, #23
 8000d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d42:	2390      	movs	r3, #144	; 0x90
 8000d44:	05db      	lsls	r3, r3, #23
 8000d46:	210f      	movs	r1, #15
 8000d48:	438a      	bics	r2, r1
 8000d4a:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1] |=  (0x00000000);
 8000d4c:	2390      	movs	r3, #144	; 0x90
 8000d4e:	05da      	lsls	r2, r3, #23
 8000d50:	2390      	movs	r3, #144	; 0x90
 8000d52:	05db      	lsls	r3, r3, #23
 8000d54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d56:	625a      	str	r2, [r3, #36]	; 0x24

	// Update SystemCoreClock global variable
	SystemCoreClockUpdate();
 8000d58:	f002 f91a 	bl	8002f90 <SystemCoreClockUpdate>
}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b004      	add	sp, #16
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	000f4240 	.word	0x000f4240
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	fffe7fff 	.word	0xfffe7fff
 8000d70:	ffc3ffff 	.word	0xffc3ffff
 8000d74:	fffff8ff 	.word	0xfffff8ff
 8000d78:	40022000 	.word	0x40022000
 8000d7c:	f0ffffff 	.word	0xf0ffffff
 8000d80:	8fffffff 	.word	0x8fffffff
 8000d84:	fffcffff 	.word	0xfffcffff

08000d88 <printchar>:

#include <stdarg.h>
#include "stm32f0xx.h"

static void printchar(char **str, int c)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
	if (str) {
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d00a      	beq.n	8000dae <printchar+0x26>
		**str = c;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	683a      	ldr	r2, [r7, #0]
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	701a      	strb	r2, [r3, #0]
		++(*str);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	1c5a      	adds	r2, r3, #1
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	601a      	str	r2, [r3, #0]
	else
	{
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART2->TDR = c;
	}
}
 8000dac:	e00a      	b.n	8000dc4 <printchar+0x3c>
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <printchar+0x44>)
 8000db2:	69db      	ldr	r3, [r3, #28]
 8000db4:	2240      	movs	r2, #64	; 0x40
 8000db6:	4013      	ands	r3, r2
 8000db8:	2b40      	cmp	r3, #64	; 0x40
 8000dba:	d1f9      	bne.n	8000db0 <printchar+0x28>
		USART2->TDR = c;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <printchar+0x44>)
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	b292      	uxth	r2, r2
 8000dc2:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b002      	add	sp, #8
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40004400 	.word	0x40004400

08000dd0 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 8000dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd2:	46c6      	mov	lr, r8
 8000dd4:	b500      	push	{lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 8000de2:	2400      	movs	r4, #0
 8000de4:	2320      	movs	r3, #32
 8000de6:	4698      	mov	r8, r3

	if (width > 0) {
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	dd16      	ble.n	8000e1c <prints+0x4c>
		register int len = 0;
 8000dee:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000df0:	68be      	ldr	r6, [r7, #8]
 8000df2:	e001      	b.n	8000df8 <prints+0x28>
 8000df4:	3501      	adds	r5, #1
 8000df6:	3601      	adds	r6, #1
 8000df8:	7833      	ldrb	r3, [r6, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1fa      	bne.n	8000df4 <prints+0x24>
		if (len >= width) width = 0;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	429d      	cmp	r5, r3
 8000e02:	db02      	blt.n	8000e0a <prints+0x3a>
 8000e04:	2300      	movs	r3, #0
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	e002      	b.n	8000e10 <prints+0x40>
		else width -= len;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	1b5b      	subs	r3, r3, r5
 8000e0e:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	2202      	movs	r2, #2
 8000e14:	4013      	ands	r3, r2
 8000e16:	d001      	beq.n	8000e1c <prints+0x4c>
 8000e18:	2330      	movs	r3, #48	; 0x30
 8000e1a:	4698      	mov	r8, r3
	}
	if (!(pad & PAD_RIGHT)) {
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	2201      	movs	r2, #1
 8000e20:	4013      	ands	r3, r2
 8000e22:	d119      	bne.n	8000e58 <prints+0x88>
		for ( ; width > 0; --width) {
 8000e24:	e008      	b.n	8000e38 <prints+0x68>
			printchar (out, padchar);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	4641      	mov	r1, r8
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f7ff ffac 	bl	8000d88 <printchar>
			++pc;
 8000e30:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	dcf3      	bgt.n	8000e26 <prints+0x56>
		}
	}
	for ( ; *string ; ++string) {
 8000e3e:	e00b      	b.n	8000e58 <prints+0x88>
		printchar (out, *string);
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	001a      	movs	r2, r3
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	0011      	movs	r1, r2
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f7ff ff9c 	bl	8000d88 <printchar>
		++pc;
 8000e50:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	3301      	adds	r3, #1
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1ef      	bne.n	8000e40 <prints+0x70>
	}
	for ( ; width > 0; --width) {
 8000e60:	e008      	b.n	8000e74 <prints+0xa4>
		printchar (out, padchar);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	4641      	mov	r1, r8
 8000e66:	0018      	movs	r0, r3
 8000e68:	f7ff ff8e 	bl	8000d88 <printchar>
		++pc;
 8000e6c:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	dcf3      	bgt.n	8000e62 <prints+0x92>
	}

	return pc;
 8000e7a:	0023      	movs	r3, r4
}
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b004      	add	sp, #16
 8000e82:	bc80      	pop	{r7}
 8000e84:	46b8      	mov	r8, r7
 8000e86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e88 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8000e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e8a:	46ce      	mov	lr, r9
 8000e8c:	4647      	mov	r7, r8
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b089      	sub	sp, #36	; 0x24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	60f8      	str	r0, [r7, #12]
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	4699      	mov	r9, r3
 8000ea0:	2600      	movs	r6, #0
	register unsigned int u = i;
 8000ea2:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10e      	bne.n	8000ec8 <printi+0x40>
		print_buf[0] = '0';
 8000eaa:	2114      	movs	r1, #20
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2230      	movs	r2, #48	; 0x30
 8000eb0:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 8000eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ebc:	1879      	adds	r1, r7, r1
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f7ff ff86 	bl	8000dd0 <prints>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	e04e      	b.n	8000f66 <printi+0xde>
	}

	if (sg && b == 10 && i < 0) {
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d00a      	beq.n	8000ee4 <printi+0x5c>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0a      	cmp	r3, #10
 8000ed2:	d107      	bne.n	8000ee4 <printi+0x5c>
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	da04      	bge.n	8000ee4 <printi+0x5c>
		neg = 1;
 8000eda:	2301      	movs	r3, #1
 8000edc:	4699      	mov	r9, r3
		u = -i;
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	425b      	negs	r3, r3
 8000ee2:	001d      	movs	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8000ee4:	2314      	movs	r3, #20
 8000ee6:	18fc      	adds	r4, r7, r3
 8000ee8:	340b      	adds	r4, #11
	*s = '\0';
 8000eea:	2300      	movs	r3, #0
 8000eec:	7023      	strb	r3, [r4, #0]

	while (u) {
 8000eee:	e019      	b.n	8000f24 <printi+0x9c>
		t = u % b;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	0019      	movs	r1, r3
 8000ef4:	0028      	movs	r0, r5
 8000ef6:	f7ff f995 	bl	8000224 <__aeabi_uidivmod>
 8000efa:	000b      	movs	r3, r1
 8000efc:	4698      	mov	r8, r3
		if( t >= 10 )
 8000efe:	4643      	mov	r3, r8
 8000f00:	2b09      	cmp	r3, #9
 8000f02:	dd02      	ble.n	8000f0a <printi+0x82>
			t += letbase - '0' - 10;
 8000f04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f06:	3b3a      	subs	r3, #58	; 0x3a
 8000f08:	4498      	add	r8, r3
		*--s = t + '0';
 8000f0a:	4643      	mov	r3, r8
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	3c01      	subs	r4, #1
 8000f10:	3330      	adds	r3, #48	; 0x30
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	7023      	strb	r3, [r4, #0]
		u /= b;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	0019      	movs	r1, r3
 8000f1a:	0028      	movs	r0, r5
 8000f1c:	f7ff f8fc 	bl	8000118 <__udivsi3>
 8000f20:	0003      	movs	r3, r0
 8000f22:	001d      	movs	r5, r3
	while (u) {
 8000f24:	2d00      	cmp	r5, #0
 8000f26:	d1e3      	bne.n	8000ef0 <printi+0x68>
	}

	if (neg) {
 8000f28:	464b      	mov	r3, r9
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d013      	beq.n	8000f56 <printi+0xce>
		if( width && (pad & PAD_ZERO) ) {
 8000f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00d      	beq.n	8000f50 <printi+0xc8>
 8000f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f36:	2202      	movs	r2, #2
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d009      	beq.n	8000f50 <printi+0xc8>
			printchar (out, '-');
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	212d      	movs	r1, #45	; 0x2d
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff ff21 	bl	8000d88 <printchar>
			++pc;
 8000f46:	3601      	adds	r6, #1
			--width;
 8000f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	643b      	str	r3, [r7, #64]	; 0x40
 8000f4e:	e002      	b.n	8000f56 <printi+0xce>
		}
		else {
			*--s = '-';
 8000f50:	3c01      	subs	r4, #1
 8000f52:	232d      	movs	r3, #45	; 0x2d
 8000f54:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8000f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	0021      	movs	r1, r4
 8000f5e:	f7ff ff37 	bl	8000dd0 <prints>
 8000f62:	0003      	movs	r3, r0
 8000f64:	18f3      	adds	r3, r6, r3
}
 8000f66:	0018      	movs	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b009      	add	sp, #36	; 0x24
 8000f6c:	bcc0      	pop	{r6, r7}
 8000f6e:	46b9      	mov	r9, r7
 8000f70:	46b0      	mov	r8, r6
 8000f72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f74 <print>:

static int print(char **out, const char *format, va_list args )
{
 8000f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f76:	b08b      	sub	sp, #44	; 0x2c
 8000f78:	af04      	add	r7, sp, #16
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 8000f80:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 8000f82:	e0c6      	b.n	8001112 <print+0x19e>
		if (*format == '%') {
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b25      	cmp	r3, #37	; 0x25
 8000f8a:	d000      	beq.n	8000f8e <print+0x1a>
 8000f8c:	e0b2      	b.n	80010f4 <print+0x180>
			++format;
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	3301      	adds	r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 8000f94:	2600      	movs	r6, #0
 8000f96:	0035      	movs	r5, r6
			if (*format == '\0') break;
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d100      	bne.n	8000fa2 <print+0x2e>
 8000fa0:	e0bd      	b.n	800111e <print+0x1aa>
			if (*format == '%') goto out;
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b25      	cmp	r3, #37	; 0x25
 8000fa8:	d100      	bne.n	8000fac <print+0x38>
 8000faa:	e0a5      	b.n	80010f8 <print+0x184>
			if (*format == '-') {
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b2d      	cmp	r3, #45	; 0x2d
 8000fb2:	d10a      	bne.n	8000fca <print+0x56>
				++format;
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 8000fba:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 8000fbc:	e005      	b.n	8000fca <print+0x56>
				++format;
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	4333      	orrs	r3, r6
 8000fc8:	001e      	movs	r6, r3
			while (*format == '0') {
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b30      	cmp	r3, #48	; 0x30
 8000fd0:	d0f5      	beq.n	8000fbe <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000fd2:	e00b      	b.n	8000fec <print+0x78>
				width *= 10;
 8000fd4:	002b      	movs	r3, r5
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	195b      	adds	r3, r3, r5
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	001d      	movs	r5, r3
				width += *format - '0';
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	3b30      	subs	r3, #48	; 0x30
 8000fe4:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b2f      	cmp	r3, #47	; 0x2f
 8000ff2:	d903      	bls.n	8000ffc <print+0x88>
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b39      	cmp	r3, #57	; 0x39
 8000ffa:	d9eb      	bls.n	8000fd4 <print+0x60>
			}
			if( *format == 's' ) {
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b73      	cmp	r3, #115	; 0x73
 8001002:	d10f      	bne.n	8001024 <print+0xb0>
				register char *s = (char *)va_arg( args, int );
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	1d1a      	adds	r2, r3, #4
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	1e19      	subs	r1, r3, #0
				pc += prints (out, s?s:"(null)", width, pad);
 800100e:	d000      	beq.n	8001012 <print+0x9e>
 8001010:	e000      	b.n	8001014 <print+0xa0>
 8001012:	4949      	ldr	r1, [pc, #292]	; (8001138 <print+0x1c4>)
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	0033      	movs	r3, r6
 8001018:	002a      	movs	r2, r5
 800101a:	f7ff fed9 	bl	8000dd0 <prints>
 800101e:	0003      	movs	r3, r0
 8001020:	18e4      	adds	r4, r4, r3
				continue;
 8001022:	e073      	b.n	800110c <print+0x198>
			}
			if( *format == 'd' ) {
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b64      	cmp	r3, #100	; 0x64
 800102a:	d10f      	bne.n	800104c <print+0xd8>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	1d1a      	adds	r2, r3, #4
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	6819      	ldr	r1, [r3, #0]
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	2361      	movs	r3, #97	; 0x61
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	9601      	str	r6, [sp, #4]
 800103c:	9500      	str	r5, [sp, #0]
 800103e:	2301      	movs	r3, #1
 8001040:	220a      	movs	r2, #10
 8001042:	f7ff ff21 	bl	8000e88 <printi>
 8001046:	0003      	movs	r3, r0
 8001048:	18e4      	adds	r4, r4, r3
				continue;
 800104a:	e05f      	b.n	800110c <print+0x198>
			}
			if( *format == 'x' ) {
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b78      	cmp	r3, #120	; 0x78
 8001052:	d10f      	bne.n	8001074 <print+0x100>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	1d1a      	adds	r2, r3, #4
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	6819      	ldr	r1, [r3, #0]
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	2361      	movs	r3, #97	; 0x61
 8001060:	9302      	str	r3, [sp, #8]
 8001062:	9601      	str	r6, [sp, #4]
 8001064:	9500      	str	r5, [sp, #0]
 8001066:	2300      	movs	r3, #0
 8001068:	2210      	movs	r2, #16
 800106a:	f7ff ff0d 	bl	8000e88 <printi>
 800106e:	0003      	movs	r3, r0
 8001070:	18e4      	adds	r4, r4, r3
				continue;
 8001072:	e04b      	b.n	800110c <print+0x198>
			}
			if( *format == 'X' ) {
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b58      	cmp	r3, #88	; 0x58
 800107a:	d10f      	bne.n	800109c <print+0x128>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	1d1a      	adds	r2, r3, #4
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	6819      	ldr	r1, [r3, #0]
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	2341      	movs	r3, #65	; 0x41
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	9601      	str	r6, [sp, #4]
 800108c:	9500      	str	r5, [sp, #0]
 800108e:	2300      	movs	r3, #0
 8001090:	2210      	movs	r2, #16
 8001092:	f7ff fef9 	bl	8000e88 <printi>
 8001096:	0003      	movs	r3, r0
 8001098:	18e4      	adds	r4, r4, r3
				continue;
 800109a:	e037      	b.n	800110c <print+0x198>
			}
			if( *format == 'u' ) {
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b75      	cmp	r3, #117	; 0x75
 80010a2:	d10f      	bne.n	80010c4 <print+0x150>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	1d1a      	adds	r2, r3, #4
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	6819      	ldr	r1, [r3, #0]
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	2361      	movs	r3, #97	; 0x61
 80010b0:	9302      	str	r3, [sp, #8]
 80010b2:	9601      	str	r6, [sp, #4]
 80010b4:	9500      	str	r5, [sp, #0]
 80010b6:	2300      	movs	r3, #0
 80010b8:	220a      	movs	r2, #10
 80010ba:	f7ff fee5 	bl	8000e88 <printi>
 80010be:	0003      	movs	r3, r0
 80010c0:	18e4      	adds	r4, r4, r3
				continue;
 80010c2:	e023      	b.n	800110c <print+0x198>
			}
			if( *format == 'c' ) {
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b63      	cmp	r3, #99	; 0x63
 80010ca:	d11f      	bne.n	800110c <print+0x198>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	1d1a      	adds	r2, r3, #4
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	2114      	movs	r1, #20
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	2200      	movs	r2, #0
 80010e0:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 80010e2:	1879      	adds	r1, r7, r1
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	0033      	movs	r3, r6
 80010e8:	002a      	movs	r2, r5
 80010ea:	f7ff fe71 	bl	8000dd0 <prints>
 80010ee:	0003      	movs	r3, r0
 80010f0:	18e4      	adds	r4, r4, r3
				continue;
 80010f2:	e00b      	b.n	800110c <print+0x198>
			}
		}
		else {
		out:
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	e000      	b.n	80010fa <print+0x186>
			if (*format == '%') goto out;
 80010f8:	46c0      	nop			; (mov r8, r8)
			printchar (out, *format);
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	001a      	movs	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	0011      	movs	r1, r2
 8001104:	0018      	movs	r0, r3
 8001106:	f7ff fe3f 	bl	8000d88 <printchar>
			++pc;
 800110a:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	3301      	adds	r3, #1
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d000      	beq.n	800111c <print+0x1a8>
 800111a:	e733      	b.n	8000f84 <print+0x10>
 800111c:	e000      	b.n	8001120 <print+0x1ac>
			if (*format == '\0') break;
 800111e:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <print+0x1ba>
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 800112e:	0023      	movs	r3, r4
}
 8001130:	0018      	movs	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	b007      	add	sp, #28
 8001136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001138:	080032a4 	.word	0x080032a4

0800113c <my_printf>:

int my_printf(const char *format, ...)
{
 800113c:	b40f      	push	{r0, r1, r2, r3}
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 8001144:	2314      	movs	r3, #20
 8001146:	18fb      	adds	r3, r7, r3
 8001148:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	0019      	movs	r1, r3
 8001150:	2000      	movs	r0, #0
 8001152:	f7ff ff0f 	bl	8000f74 <print>
 8001156:	0003      	movs	r3, r0
}
 8001158:	0018      	movs	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	b002      	add	sp, #8
 800115e:	bc80      	pop	{r7}
 8001160:	bc08      	pop	{r3}
 8001162:	b004      	add	sp, #16
 8001164:	4718      	bx	r3

08001166 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	af00      	add	r7, sp, #0
}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001174:	e7fe      	b.n	8001174 <HardFault_Handler+0x4>

08001176 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0
}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
}
 8001184:	46c0      	nop			; (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	af00      	add	r7, sp, #0
  //HAL_IncTick();
}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <TIM6_DAC_IRQHandler>:
 */

extern uint32_t timebase_tick_ms;

void TIM6_DAC_IRQHandler()
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	// Test for TIM6 update pending interrupt
	if ((TIM6->SR & TIM_SR_UIF) == TIM_SR_UIF)
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <TIM6_DAC_IRQHandler+0x2c>)
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	2201      	movs	r2, #1
 800119e:	4013      	ands	r3, r2
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d10a      	bne.n	80011ba <TIM6_DAC_IRQHandler+0x26>
	{
		// Clear pending interrupt flag
		TIM6->SR &= ~TIM_SR_UIF;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <TIM6_DAC_IRQHandler+0x2c>)
 80011a6:	691a      	ldr	r2, [r3, #16]
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <TIM6_DAC_IRQHandler+0x2c>)
 80011aa:	2101      	movs	r1, #1
 80011ac:	438a      	bics	r2, r1
 80011ae:	611a      	str	r2, [r3, #16]

		// Do what you need
		timebase_tick_ms++;
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <TIM6_DAC_IRQHandler+0x30>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <TIM6_DAC_IRQHandler+0x30>)
 80011b8:	601a      	str	r2, [r3, #0]
	}
}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40001000 	.word	0x40001000
 80011c4:	20000384 	.word	0x20000384

080011c8 <millis>:
    5.397940008672037609572522210551,
    5.6989700043360188047862611052755
};

int millis()
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	return BSP_millis();
 80011cc:	f001 fd42 	bl	8002c54 <BSP_millis>
 80011d0:	0003      	movs	r3, r0
}
 80011d2:	0018      	movs	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <BSP_SX1272_ON>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_ON(int type_mod)
{
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	uint8_t state = 2;
 80011e0:	240f      	movs	r4, #15
 80011e2:	193b      	adds	r3, r7, r4
 80011e4:	2202      	movs	r2, #2
 80011e6:	701a      	strb	r2, [r3, #0]

	// Initialize class variables
	currentstate._bandwidth = BW_125;
 80011e8:	4b26      	ldr	r3, [pc, #152]	; (8001284 <BSP_SX1272_ON+0xac>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	705a      	strb	r2, [r3, #1]
	currentstate._codingRate = CR_5;
 80011ee:	4b25      	ldr	r3, [pc, #148]	; (8001284 <BSP_SX1272_ON+0xac>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	709a      	strb	r2, [r3, #2]
	currentstate._spreadingFactor = SF_7;
 80011f4:	4b23      	ldr	r3, [pc, #140]	; (8001284 <BSP_SX1272_ON+0xac>)
 80011f6:	2207      	movs	r2, #7
 80011f8:	70da      	strb	r2, [r3, #3]
	currentstate._channel = CH_868v1;
 80011fa:	4b22      	ldr	r3, [pc, #136]	; (8001284 <BSP_SX1272_ON+0xac>)
 80011fc:	4a22      	ldr	r2, [pc, #136]	; (8001288 <BSP_SX1272_ON+0xb0>)
 80011fe:	605a      	str	r2, [r3, #4]
	currentstate._header = HEADER_ON;
 8001200:	4b20      	ldr	r3, [pc, #128]	; (8001284 <BSP_SX1272_ON+0xac>)
 8001202:	2200      	movs	r2, #0
 8001204:	74da      	strb	r2, [r3, #19]
	currentstate._CRC = CRC_OFF;
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <BSP_SX1272_ON+0xac>)
 8001208:	2200      	movs	r2, #0
 800120a:	755a      	strb	r2, [r3, #21]
	currentstate._modem = FSK;
 800120c:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <BSP_SX1272_ON+0xac>)
 800120e:	2200      	movs	r2, #0
 8001210:	771a      	strb	r2, [r3, #28]
	currentstate._power = 15;
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <BSP_SX1272_ON+0xac>)
 8001214:	220f      	movs	r2, #15
 8001216:	721a      	strb	r2, [r3, #8]
	currentstate._packetNumber = 0;
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <BSP_SX1272_ON+0xac>)
 800121a:	2200      	movs	r2, #0
 800121c:	75da      	strb	r2, [r3, #23]
	currentstate._reception = CORRECT_PACKET;
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <BSP_SX1272_ON+0xac>)
 8001220:	2200      	movs	r2, #0
 8001222:	761a      	strb	r2, [r3, #24]
	currentstate._retries = 0;
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <BSP_SX1272_ON+0xac>)
 8001226:	2200      	movs	r2, #0
 8001228:	765a      	strb	r2, [r3, #25]
	currentstate._maxRetries = 3;
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <BSP_SX1272_ON+0xac>)
 800122c:	2203      	movs	r2, #3
 800122e:	769a      	strb	r2, [r3, #26]
	currentstate.packet_sent.retry = currentstate._retries;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <BSP_SX1272_ON+0xac>)
 8001232:	7e59      	ldrb	r1, [r3, #25]
 8001234:	4a13      	ldr	r2, [pc, #76]	; (8001284 <BSP_SX1272_ON+0xac>)
 8001236:	238e      	movs	r3, #142	; 0x8e
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	54d1      	strb	r1, [r2, r3]
	//BSP_DELAY_ms(100);
	//BSP_DELAY_ms(100);
	//BSP_DELAY_ms(100);

	// Set Maximum Over Current Protection
	state = BSP_SX1272_setMaxCurrent(0x1B);
 800123c:	201b      	movs	r0, #27
 800123e:	f001 f96b 	bl	8002518 <BSP_SX1272_setMaxCurrent>
 8001242:	0003      	movs	r3, r0
 8001244:	001a      	movs	r2, r3
 8001246:	193b      	adds	r3, r7, r4
 8001248:	701a      	strb	r2, [r3, #0]

	if( state == 0 )
 800124a:	193b      	adds	r3, r7, r4
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <BSP_SX1272_ON+0x7e>
	{

	}
	else
	{
		return 1;
 8001252:	2301      	movs	r3, #1
 8001254:	e012      	b.n	800127c <BSP_SX1272_ON+0xa4>
	}

	if(type_mod==0)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d106      	bne.n	800126a <BSP_SX1272_ON+0x92>
	{
		// set LoRa mode
		state = BSP_SX1272_setLORA();
 800125c:	230f      	movs	r3, #15
 800125e:	18fc      	adds	r4, r7, r3
 8001260:	f000 f848 	bl	80012f4 <BSP_SX1272_setLORA>
 8001264:	0003      	movs	r3, r0
 8001266:	7023      	strb	r3, [r4, #0]
 8001268:	e005      	b.n	8001276 <BSP_SX1272_ON+0x9e>
	}
	else
	{
		state = BSP_SX1272_setFSK();
 800126a:	230f      	movs	r3, #15
 800126c:	18fc      	adds	r4, r7, r3
 800126e:	f000 f87f 	bl	8001370 <BSP_SX1272_setFSK>
 8001272:	0003      	movs	r3, r0
 8001274:	7023      	strb	r3, [r4, #0]
	}
	return state;
 8001276:	230f      	movs	r3, #15
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	781b      	ldrb	r3, [r3, #0]
}
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	b005      	add	sp, #20
 8001282:	bd90      	pop	{r4, r7, pc}
 8001284:	2000005c 	.word	0x2000005c
 8001288:	00d90666 	.word	0x00d90666

0800128c <BSP_SX1272_clearFlags>:
 * should be written only in Sleep and Stand-by modes.
 *
 * Returns: Nothing
*/
void BSP_SX1272_clearFlags()
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
    uint8_t st0;

	// Save the previous status
	st0 = BSP_SX1272_Read(REG_OP_MODE);
 8001292:	1dfc      	adds	r4, r7, #7
 8001294:	2001      	movs	r0, #1
 8001296:	f001 fd73 	bl	8002d80 <BSP_SX1272_Read>
 800129a:	0003      	movs	r3, r0
 800129c:	7023      	strb	r3, [r4, #0]

	if( currentstate._modem == LORA )
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <BSP_SX1272_clearFlags+0x64>)
 80012a0:	7f1b      	ldrb	r3, [r3, #28]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d10e      	bne.n	80012c4 <BSP_SX1272_clearFlags+0x38>
	{
		/// LoRa mode
		// Stdby mode to write in registers
		BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);
 80012a6:	2181      	movs	r1, #129	; 0x81
 80012a8:	2001      	movs	r0, #1
 80012aa:	f001 fd97 	bl	8002ddc <BSP_SX1272_Write>
		// LoRa mode flags register
		BSP_SX1272_Write(REG_IRQ_FLAGS, 0xFF);
 80012ae:	21ff      	movs	r1, #255	; 0xff
 80012b0:	2012      	movs	r0, #18
 80012b2:	f001 fd93 	bl	8002ddc <BSP_SX1272_Write>
		// Getting back to previous status
		BSP_SX1272_Write(REG_OP_MODE, st0);
 80012b6:	1dfb      	adds	r3, r7, #7
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	0019      	movs	r1, r3
 80012bc:	2001      	movs	r0, #1
 80012be:	f001 fd8d 	bl	8002ddc <BSP_SX1272_Write>

		#if (SX1272_debug_mode > 1)
			my_printf("## FSK flags cleared ##\r\n");
		#endif
	}
}
 80012c2:	e011      	b.n	80012e8 <BSP_SX1272_clearFlags+0x5c>
		BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);
 80012c4:	2101      	movs	r1, #1
 80012c6:	2001      	movs	r0, #1
 80012c8:	f001 fd88 	bl	8002ddc <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_IRQ_FLAGS1, 0xFF);
 80012cc:	21ff      	movs	r1, #255	; 0xff
 80012ce:	203e      	movs	r0, #62	; 0x3e
 80012d0:	f001 fd84 	bl	8002ddc <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_IRQ_FLAGS2, 0xFF);
 80012d4:	21ff      	movs	r1, #255	; 0xff
 80012d6:	203f      	movs	r0, #63	; 0x3f
 80012d8:	f001 fd80 	bl	8002ddc <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_OP_MODE, st0);
 80012dc:	1dfb      	adds	r3, r7, #7
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	0019      	movs	r1, r3
 80012e2:	2001      	movs	r0, #1
 80012e4:	f001 fd7a 	bl	8002ddc <BSP_SX1272_Write>
}
 80012e8:	46c0      	nop			; (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b003      	add	sp, #12
 80012ee:	bd90      	pop	{r4, r7, pc}
 80012f0:	2000005c 	.word	0x2000005c

080012f4 <BSP_SX1272_setLORA>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_setLORA()
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
    uint8_t state = 2;
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	2202      	movs	r2, #2
 80012fe:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'BSP_SX1272_setLORA'\r\n");
	#endif

	BSP_SX1272_Write(REG_OP_MODE, FSK_SLEEP_MODE);    // Sleep mode (mandatory to set LoRa mode)
 8001300:	2100      	movs	r1, #0
 8001302:	2001      	movs	r0, #1
 8001304:	f001 fd6a 	bl	8002ddc <BSP_SX1272_Write>
	BSP_SX1272_Write(REG_OP_MODE, LORA_SLEEP_MODE);    // LoRa sleep mode
 8001308:	2180      	movs	r1, #128	; 0x80
 800130a:	2001      	movs	r0, #1
 800130c:	f001 fd66 	bl	8002ddc <BSP_SX1272_Write>
	BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);	// LoRa standby mode
 8001310:	2181      	movs	r1, #129	; 0x81
 8001312:	2001      	movs	r0, #1
 8001314:	f001 fd62 	bl	8002ddc <BSP_SX1272_Write>

	BSP_SX1272_Write(REG_MAX_PAYLOAD_LENGTH,MAX_LENGTH);
 8001318:	21ff      	movs	r1, #255	; 0xff
 800131a:	2023      	movs	r0, #35	; 0x23
 800131c:	f001 fd5e 	bl	8002ddc <BSP_SX1272_Write>

	// Set RegModemConfig1 to Default values
	BSP_SX1272_Write(REG_MODEM_CONFIG1, 0x08);
 8001320:	2108      	movs	r1, #8
 8001322:	201d      	movs	r0, #29
 8001324:	f001 fd5a 	bl	8002ddc <BSP_SX1272_Write>
	// Set RegModemConfig2 to Default values
	BSP_SX1272_Write(REG_MODEM_CONFIG2, 0x74);
 8001328:	2174      	movs	r1, #116	; 0x74
 800132a:	201e      	movs	r0, #30
 800132c:	f001 fd56 	bl	8002ddc <BSP_SX1272_Write>

	//BSP_DELAY_ms(100);

	st0 = BSP_SX1272_Read(REG_OP_MODE);	// Reading config mode
 8001330:	1dbc      	adds	r4, r7, #6
 8001332:	2001      	movs	r0, #1
 8001334:	f001 fd24 	bl	8002d80 <BSP_SX1272_Read>
 8001338:	0003      	movs	r3, r0
 800133a:	7023      	strb	r3, [r4, #0]
	if( st0 == LORA_STANDBY_MODE )
 800133c:	1dbb      	adds	r3, r7, #6
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b81      	cmp	r3, #129	; 0x81
 8001342:	d106      	bne.n	8001352 <BSP_SX1272_setLORA+0x5e>
	{ // LoRa mode
		currentstate._modem = LORA;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <BSP_SX1272_setLORA+0x78>)
 8001346:	2201      	movs	r2, #1
 8001348:	771a      	strb	r2, [r3, #28]
		state = 0;
 800134a:	1dfb      	adds	r3, r7, #7
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
 8001350:	e005      	b.n	800135e <BSP_SX1272_setLORA+0x6a>
			my_printf("\r\n");
		#endif
	}
	else
	{ // FSK mode
		currentstate._modem = FSK;
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <BSP_SX1272_setLORA+0x78>)
 8001354:	2200      	movs	r2, #0
 8001356:	771a      	strb	r2, [r3, #28]
		state = 1;
 8001358:	1dfb      	adds	r3, r7, #7
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
		#if (SX1272_debug_mode > 1)
			my_printf("** There has been an error while setting LoRa **\r\n");
			my_printf("\r\n");
		#endif
	}
	return state;
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
}
 8001362:	0018      	movs	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	b003      	add	sp, #12
 8001368:	bd90      	pop	{r4, r7, pc}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	2000005c 	.word	0x2000005c

08001370 <BSP_SX1272_setFSK>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_setFSK()
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
	uint8_t state = 2;
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	2202      	movs	r2, #2
 800137a:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'setFSK'\r\n");
	#endif

  BSP_SX1272_Write(REG_OP_MODE, LORA_SLEEP_MODE);
 800137c:	2180      	movs	r1, #128	; 0x80
 800137e:	2001      	movs	r0, #1
 8001380:	f001 fd2c 	bl	8002ddc <BSP_SX1272_Write>
	BSP_SX1272_Write(REG_OP_MODE, FSK_SLEEP_MODE);	// Sleep mode (mandatory to change mode)
 8001384:	2100      	movs	r1, #0
 8001386:	2001      	movs	r0, #1
 8001388:	f001 fd28 	bl	8002ddc <BSP_SX1272_Write>
	BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);	// FSK standby mode
 800138c:	2101      	movs	r1, #1
 800138e:	2001      	movs	r0, #1
 8001390:	f001 fd24 	bl	8002ddc <BSP_SX1272_Write>

	/////////////////////////////////////////////////////////////////////////////////////////
  // Config REG_PACKET_CONFIG1
	config1 = BSP_SX1272_Read(REG_PACKET_CONFIG1);
 8001394:	1dbc      	adds	r4, r7, #6
 8001396:	2030      	movs	r0, #48	; 0x30
 8001398:	f001 fcf2 	bl	8002d80 <BSP_SX1272_Read>
 800139c:	0003      	movs	r3, r0
 800139e:	7023      	strb	r3, [r4, #0]
	config1 = config1 & 0b01111101;		// clears bits 8 and 1 from REG_PACKET_CONFIG1
 80013a0:	1dbb      	adds	r3, r7, #6
 80013a2:	1dba      	adds	r2, r7, #6
 80013a4:	7812      	ldrb	r2, [r2, #0]
 80013a6:	217d      	movs	r1, #125	; 0x7d
 80013a8:	400a      	ands	r2, r1
 80013aa:	701a      	strb	r2, [r3, #0]
	config1 = config1 | 0b00000100;		// sets bit 2 from REG_PACKET_CONFIG1
 80013ac:	1dbb      	adds	r3, r7, #6
 80013ae:	1dba      	adds	r2, r7, #6
 80013b0:	7812      	ldrb	r2, [r2, #0]
 80013b2:	2104      	movs	r1, #4
 80013b4:	430a      	orrs	r2, r1
 80013b6:	701a      	strb	r2, [r3, #0]
  BSP_SX1272_Write(REG_PACKET_CONFIG1,config1);	// Packet format fixe, AddressFiltering = NodeAddress + BroadcastAddress
 80013b8:	1dbb      	adds	r3, r7, #6
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	0019      	movs	r1, r3
 80013be:	2030      	movs	r0, #48	; 0x30
 80013c0:	f001 fd0c 	bl	8002ddc <BSP_SX1272_Write>
  /////////////////////////////////////////////////////////////////////////////////////////

	BSP_SX1272_Write(REG_FIFO_THRESH, 0x80);	// condition to start packet tx
 80013c4:	2180      	movs	r1, #128	; 0x80
 80013c6:	2035      	movs	r0, #53	; 0x35
 80013c8:	f001 fd08 	bl	8002ddc <BSP_SX1272_Write>

	/////////////////////////////////////////////////////////////////////////////////////////
  // Config REG_SYNC_CONFIG
	config1 = BSP_SX1272_Read(REG_SYNC_CONFIG);
 80013cc:	1dbc      	adds	r4, r7, #6
 80013ce:	2027      	movs	r0, #39	; 0x27
 80013d0:	f001 fcd6 	bl	8002d80 <BSP_SX1272_Read>
 80013d4:	0003      	movs	r3, r0
 80013d6:	7023      	strb	r3, [r4, #0]
	config1 = config1 & 0b00111111; //Auto-restart off, sync word detection on, sync size = 4 words
 80013d8:	1dbb      	adds	r3, r7, #6
 80013da:	1dba      	adds	r2, r7, #6
 80013dc:	7812      	ldrb	r2, [r2, #0]
 80013de:	213f      	movs	r1, #63	; 0x3f
 80013e0:	400a      	ands	r2, r1
 80013e2:	701a      	strb	r2, [r3, #0]
	BSP_SX1272_Write(REG_SYNC_CONFIG,config1);
 80013e4:	1dbb      	adds	r3, r7, #6
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	0019      	movs	r1, r3
 80013ea:	2027      	movs	r0, #39	; 0x27
 80013ec:	f001 fcf6 	bl	8002ddc <BSP_SX1272_Write>

  BSP_SX1272_Write(REG_FDEV_MSB,0x07);
 80013f0:	2107      	movs	r1, #7
 80013f2:	2004      	movs	r0, #4
 80013f4:	f001 fcf2 	bl	8002ddc <BSP_SX1272_Write>
  BSP_SX1272_Write(REG_FDEV_LSB,0xFF);
 80013f8:	21ff      	movs	r1, #255	; 0xff
 80013fa:	2005      	movs	r0, #5
 80013fc:	f001 fcee 	bl	8002ddc <BSP_SX1272_Write>

  BSP_SX1272_Write(REG_BITRATE_MSB,0x68);
 8001400:	2168      	movs	r1, #104	; 0x68
 8001402:	2002      	movs	r0, #2
 8001404:	f001 fcea 	bl	8002ddc <BSP_SX1272_Write>
  BSP_SX1272_Write(REG_BITRATE_LSB,0x2B);
 8001408:	212b      	movs	r1, #43	; 0x2b
 800140a:	2003      	movs	r0, #3
 800140c:	f001 fce6 	bl	8002ddc <BSP_SX1272_Write>

  /////////////////////////////////////////////////////////////////////////////////////////
  // Config REG_PACKET_CONFIG2
  BSP_SX1272_Write(REG_PACKET_CONFIG2,0x40); // packet mode
 8001410:	2140      	movs	r1, #64	; 0x40
 8001412:	2031      	movs	r0, #49	; 0x31
 8001414:	f001 fce2 	bl	8002ddc <BSP_SX1272_Write>
  /////////////////////////////////////////////////////////////////////////////////////////

	BSP_DELAY_ms(100);
 8001418:	2064      	movs	r0, #100	; 0x64
 800141a:	f001 fd33 	bl	8002e84 <BSP_DELAY_ms>

	st0 = BSP_SX1272_Read(REG_OP_MODE);	// Reading config mode
 800141e:	1d7c      	adds	r4, r7, #5
 8001420:	2001      	movs	r0, #1
 8001422:	f001 fcad 	bl	8002d80 <BSP_SX1272_Read>
 8001426:	0003      	movs	r3, r0
 8001428:	7023      	strb	r3, [r4, #0]
	if( st0 == FSK_STANDBY_MODE )
 800142a:	1d7b      	adds	r3, r7, #5
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d106      	bne.n	8001440 <BSP_SX1272_setFSK+0xd0>
	{ // FSK mode
		currentstate._modem = FSK;
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <BSP_SX1272_setFSK+0xe8>)
 8001434:	2200      	movs	r2, #0
 8001436:	771a      	strb	r2, [r3, #28]
		state = 0;
 8001438:	1dfb      	adds	r3, r7, #7
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	e005      	b.n	800144c <BSP_SX1272_setFSK+0xdc>
			my_printf("\r\n");
		#endif
	}
	else
	{ // LoRa mode
		currentstate._modem = LORA;
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <BSP_SX1272_setFSK+0xe8>)
 8001442:	2201      	movs	r2, #1
 8001444:	771a      	strb	r2, [r3, #28]
		state = 1;
 8001446:	1dfb      	adds	r3, r7, #7
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
		#if (SX1272_debug_mode > 1)
			my_printf("** There has been an error while setting FSK **\r\n");
			my_printf("\r\n");
		#endif
	}
	return state;
 800144c:	1dfb      	adds	r3, r7, #7
 800144e:	781b      	ldrb	r3, [r3, #0]
}
 8001450:	0018      	movs	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	b003      	add	sp, #12
 8001456:	bd90      	pop	{r4, r7, pc}
 8001458:	2000005c 	.word	0x2000005c

0800145c <BSP_SX1272_setHeaderON>:
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
   state = -1 --> Forbidden command for this protocol
*/
int8_t	BSP_SX1272_setHeaderON()
{
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
  int8_t state = 2;
 8001462:	1dfb      	adds	r3, r7, #7
 8001464:	2202      	movs	r2, #2
 8001466:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'setHeaderON'\r\n");
  #endif

  if( currentstate._modem == FSK )
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <BSP_SX1272_setHeaderON+0x98>)
 800146a:	7f1b      	ldrb	r3, [r3, #28]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d103      	bne.n	8001478 <BSP_SX1272_setHeaderON+0x1c>
  {
	  state = -1;		// header is not available in FSK mode
 8001470:	1dfb      	adds	r3, r7, #7
 8001472:	22ff      	movs	r2, #255	; 0xff
 8001474:	701a      	strb	r2, [r3, #0]
 8001476:	e035      	b.n	80014e4 <BSP_SX1272_setHeaderON+0x88>
		  my_printf("\r\n");
	  #endif
  }
  else
  {
	config1 = BSP_SX1272_Read(REG_MODEM_CONFIG1);	// Save config1 to modify only the header bit
 8001478:	1dbc      	adds	r4, r7, #6
 800147a:	201d      	movs	r0, #29
 800147c:	f001 fc80 	bl	8002d80 <BSP_SX1272_Read>
 8001480:	0003      	movs	r3, r0
 8001482:	7023      	strb	r3, [r4, #0]
	if( currentstate._spreadingFactor == 6 )
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <BSP_SX1272_setHeaderON+0x98>)
 8001486:	78db      	ldrb	r3, [r3, #3]
 8001488:	2b06      	cmp	r3, #6
 800148a:	d103      	bne.n	8001494 <BSP_SX1272_setHeaderON+0x38>
	{
		state = -1;		// Mandatory headerOFF with SF = 6
 800148c:	1dfb      	adds	r3, r7, #7
 800148e:	22ff      	movs	r2, #255	; 0xff
 8001490:	701a      	strb	r2, [r3, #0]
 8001492:	e00b      	b.n	80014ac <BSP_SX1272_setHeaderON+0x50>
			my_printf("## Mandatory implicit header mode with spreading factor = 6 ##\r\n");
		#endif
	}
	else
	{
		config1 = config1 & 0b11111011;			// clears bit 2 from config1 = headerON
 8001494:	1dbb      	adds	r3, r7, #6
 8001496:	1dba      	adds	r2, r7, #6
 8001498:	7812      	ldrb	r2, [r2, #0]
 800149a:	2104      	movs	r1, #4
 800149c:	438a      	bics	r2, r1
 800149e:	701a      	strb	r2, [r3, #0]
		BSP_SX1272_Write(REG_MODEM_CONFIG1,config1);	// Update config1
 80014a0:	1dbb      	adds	r3, r7, #6
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	0019      	movs	r1, r3
 80014a6:	201d      	movs	r0, #29
 80014a8:	f001 fc98 	bl	8002ddc <BSP_SX1272_Write>
	}
	if( currentstate._spreadingFactor != 6 )
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <BSP_SX1272_setHeaderON+0x98>)
 80014ae:	78db      	ldrb	r3, [r3, #3]
 80014b0:	2b06      	cmp	r3, #6
 80014b2:	d017      	beq.n	80014e4 <BSP_SX1272_setHeaderON+0x88>
	{ // checking headerON taking out bit 2 from REG_MODEM_CONFIG1
		config1 = BSP_SX1272_Read(REG_MODEM_CONFIG1);
 80014b4:	1dbc      	adds	r4, r7, #6
 80014b6:	201d      	movs	r0, #29
 80014b8:	f001 fc62 	bl	8002d80 <BSP_SX1272_Read>
 80014bc:	0003      	movs	r3, r0
 80014be:	7023      	strb	r3, [r4, #0]
		if( bitRead(config1, 2) == HEADER_ON )
 80014c0:	1dbb      	adds	r3, r7, #6
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	001a      	movs	r2, r3
 80014ca:	2301      	movs	r3, #1
 80014cc:	4013      	ands	r3, r2
 80014ce:	d106      	bne.n	80014de <BSP_SX1272_setHeaderON+0x82>
		{
			state = 0;
 80014d0:	1dfb      	adds	r3, r7, #7
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
			currentstate._header = HEADER_ON;
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <BSP_SX1272_setHeaderON+0x98>)
 80014d8:	2200      	movs	r2, #0
 80014da:	74da      	strb	r2, [r3, #19]
 80014dc:	e002      	b.n	80014e4 <BSP_SX1272_setHeaderON+0x88>
				my_printf("\r\n");
			#endif
		}
		else
		{
			state = 1;
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	2201      	movs	r2, #1
 80014e2:	701a      	strb	r2, [r3, #0]
		}
	}
  }
  return state;
 80014e4:	1dfb      	adds	r3, r7, #7
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b25b      	sxtb	r3, r3
}
 80014ea:	0018      	movs	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b003      	add	sp, #12
 80014f0:	bd90      	pop	{r4, r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	2000005c 	.word	0x2000005c

080014f8 <BSP_SX1272_setHeaderOFF>:
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
   state = -1 --> Forbidden command for this protocol
*/
int8_t	BSP_SX1272_setHeaderOFF()
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
	uint8_t state = 2;
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	2202      	movs	r2, #2
 8001502:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'setHeaderOFF'\r\n");
	#endif

	if( currentstate._modem == FSK )
 8001504:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <BSP_SX1272_setHeaderOFF+0x80>)
 8001506:	7f1b      	ldrb	r3, [r3, #28]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d103      	bne.n	8001514 <BSP_SX1272_setHeaderOFF+0x1c>
	{
		// header is not available in FSK mode
		state = -1;
 800150c:	1dfb      	adds	r3, r7, #7
 800150e:	22ff      	movs	r2, #255	; 0xff
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	e029      	b.n	8001568 <BSP_SX1272_setHeaderOFF+0x70>
		#endif
	}
	else
	{
		// Read config1 to modify only the header bit
		config1 = BSP_SX1272_Read(REG_MODEM_CONFIG1);
 8001514:	1dbc      	adds	r4, r7, #6
 8001516:	201d      	movs	r0, #29
 8001518:	f001 fc32 	bl	8002d80 <BSP_SX1272_Read>
 800151c:	0003      	movs	r3, r0
 800151e:	7023      	strb	r3, [r4, #0]

		// sets bit 2 from REG_MODEM_CONFIG1 = headerOFF
		config1 = config1 | 0b00000100;
 8001520:	1dbb      	adds	r3, r7, #6
 8001522:	1dba      	adds	r2, r7, #6
 8001524:	7812      	ldrb	r2, [r2, #0]
 8001526:	2104      	movs	r1, #4
 8001528:	430a      	orrs	r2, r1
 800152a:	701a      	strb	r2, [r3, #0]
		// Update config1
		BSP_SX1272_Write(REG_MODEM_CONFIG1,config1);
 800152c:	1dbb      	adds	r3, r7, #6
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	0019      	movs	r1, r3
 8001532:	201d      	movs	r0, #29
 8001534:	f001 fc52 	bl	8002ddc <BSP_SX1272_Write>

		// check register
		config1 = BSP_SX1272_Read(REG_MODEM_CONFIG1);
 8001538:	1dbc      	adds	r4, r7, #6
 800153a:	201d      	movs	r0, #29
 800153c:	f001 fc20 	bl	8002d80 <BSP_SX1272_Read>
 8001540:	0003      	movs	r3, r0
 8001542:	7023      	strb	r3, [r4, #0]
		if( bitRead(config1, 2) == HEADER_OFF )
 8001544:	1dbb      	adds	r3, r7, #6
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	b2db      	uxtb	r3, r3
 800154c:	001a      	movs	r2, r3
 800154e:	2301      	movs	r3, #1
 8001550:	4013      	ands	r3, r2
 8001552:	d006      	beq.n	8001562 <BSP_SX1272_setHeaderOFF+0x6a>
		{
			// checking headerOFF taking out bit 2 from REG_MODEM_CONFIG1
			state = 0;
 8001554:	1dfb      	adds	r3, r7, #7
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
			currentstate._header = HEADER_OFF;
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <BSP_SX1272_setHeaderOFF+0x80>)
 800155c:	2201      	movs	r2, #1
 800155e:	74da      	strb	r2, [r3, #19]
 8001560:	e002      	b.n	8001568 <BSP_SX1272_setHeaderOFF+0x70>
			    my_printf("\r\n");
			#endif
		}
		else
		{
			state = 1;
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
				my_printf("** Header hasn't been desactivated ##\r\n");
				my_printf("\r\n");
			#endif
		}
	}
	return state;
 8001568:	1dfb      	adds	r3, r7, #7
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b25b      	sxtb	r3, r3
}
 800156e:	0018      	movs	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	b003      	add	sp, #12
 8001574:	bd90      	pop	{r4, r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	2000005c 	.word	0x2000005c

0800157c <BSP_SX1272_setCRC_ON>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t	BSP_SX1272_setCRC_ON()
{
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
  uint8_t state = 2;
 8001582:	1dfb      	adds	r3, r7, #7
 8001584:	2202      	movs	r2, #2
 8001586:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'setCRC_ON'\r\n");
  #endif

  if( currentstate._modem == LORA )
 8001588:	4b31      	ldr	r3, [pc, #196]	; (8001650 <BSP_SX1272_setCRC_ON+0xd4>)
 800158a:	7f1b      	ldrb	r3, [r3, #28]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d129      	bne.n	80015e4 <BSP_SX1272_setCRC_ON+0x68>
  { // LORA mode
	config1 = BSP_SX1272_Read(REG_MODEM_CONFIG1);	// Save config1 to modify only the CRC bit
 8001590:	1dbc      	adds	r4, r7, #6
 8001592:	201d      	movs	r0, #29
 8001594:	f001 fbf4 	bl	8002d80 <BSP_SX1272_Read>
 8001598:	0003      	movs	r3, r0
 800159a:	7023      	strb	r3, [r4, #0]
	config1 = config1 | 0b00000010;				// sets bit 1 from REG_MODEM_CONFIG1 = CRC_ON
 800159c:	1dbb      	adds	r3, r7, #6
 800159e:	1dba      	adds	r2, r7, #6
 80015a0:	7812      	ldrb	r2, [r2, #0]
 80015a2:	2102      	movs	r1, #2
 80015a4:	430a      	orrs	r2, r1
 80015a6:	701a      	strb	r2, [r3, #0]
	BSP_SX1272_Write(REG_MODEM_CONFIG1,config1);
 80015a8:	1dbb      	adds	r3, r7, #6
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	0019      	movs	r1, r3
 80015ae:	201d      	movs	r0, #29
 80015b0:	f001 fc14 	bl	8002ddc <BSP_SX1272_Write>

	state = 1;
 80015b4:	1dfb      	adds	r3, r7, #7
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]

	config1 = BSP_SX1272_Read(REG_MODEM_CONFIG1);
 80015ba:	1dbc      	adds	r4, r7, #6
 80015bc:	201d      	movs	r0, #29
 80015be:	f001 fbdf 	bl	8002d80 <BSP_SX1272_Read>
 80015c2:	0003      	movs	r3, r0
 80015c4:	7023      	strb	r3, [r4, #0]
	if( bitRead(config1, 1) == CRC_ON )
 80015c6:	1dbb      	adds	r3, r7, #6
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	085b      	lsrs	r3, r3, #1
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	001a      	movs	r2, r3
 80015d0:	2301      	movs	r3, #1
 80015d2:	4013      	ands	r3, r2
 80015d4:	d02f      	beq.n	8001636 <BSP_SX1272_setCRC_ON+0xba>
	{ // take out bit 1 from REG_MODEM_CONFIG1 indicates RxPayloadCrcOn
		state = 0;
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
		currentstate._CRC = CRC_ON;
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <BSP_SX1272_setCRC_ON+0xd4>)
 80015de:	2201      	movs	r2, #1
 80015e0:	755a      	strb	r2, [r3, #21]
 80015e2:	e028      	b.n	8001636 <BSP_SX1272_setCRC_ON+0xba>
		#endif
	}
  }
  else
  { // FSK mode
	config1 = BSP_SX1272_Read(REG_PACKET_CONFIG1);	// Save config1 to modify only the CRC bit
 80015e4:	1dbc      	adds	r4, r7, #6
 80015e6:	2030      	movs	r0, #48	; 0x30
 80015e8:	f001 fbca 	bl	8002d80 <BSP_SX1272_Read>
 80015ec:	0003      	movs	r3, r0
 80015ee:	7023      	strb	r3, [r4, #0]
	config1 = config1 | 0b00010000;				// set bit 4 and 3 from REG_MODEM_CONFIG1 = CRC_ON
 80015f0:	1dbb      	adds	r3, r7, #6
 80015f2:	1dba      	adds	r2, r7, #6
 80015f4:	7812      	ldrb	r2, [r2, #0]
 80015f6:	2110      	movs	r1, #16
 80015f8:	430a      	orrs	r2, r1
 80015fa:	701a      	strb	r2, [r3, #0]
	BSP_SX1272_Write(REG_PACKET_CONFIG1,config1);
 80015fc:	1dbb      	adds	r3, r7, #6
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	0019      	movs	r1, r3
 8001602:	2030      	movs	r0, #48	; 0x30
 8001604:	f001 fbea 	bl	8002ddc <BSP_SX1272_Write>

	state = 1;
 8001608:	1dfb      	adds	r3, r7, #7
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]

	config1 = BSP_SX1272_Read(REG_PACKET_CONFIG1);
 800160e:	1dbc      	adds	r4, r7, #6
 8001610:	2030      	movs	r0, #48	; 0x30
 8001612:	f001 fbb5 	bl	8002d80 <BSP_SX1272_Read>
 8001616:	0003      	movs	r3, r0
 8001618:	7023      	strb	r3, [r4, #0]
	if( bitRead(config1, 4) == CRC_ON )
 800161a:	1dbb      	adds	r3, r7, #6
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	091b      	lsrs	r3, r3, #4
 8001620:	b2db      	uxtb	r3, r3
 8001622:	001a      	movs	r2, r3
 8001624:	2301      	movs	r3, #1
 8001626:	4013      	ands	r3, r2
 8001628:	d005      	beq.n	8001636 <BSP_SX1272_setCRC_ON+0xba>
	{ // take out bit 4 from REG_PACKET_CONFIG1 indicates CrcOn
		state = 0;
 800162a:	1dfb      	adds	r3, r7, #7
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
		currentstate._CRC = CRC_ON;
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <BSP_SX1272_setCRC_ON+0xd4>)
 8001632:	2201      	movs	r2, #1
 8001634:	755a      	strb	r2, [r3, #21]
			my_printf("## CRC has been activated ##\r\n");
			my_printf("\r\n");
		#endif
	}
  }
  if( state != 0 )
 8001636:	1dfb      	adds	r3, r7, #7
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <BSP_SX1272_setCRC_ON+0xc8>
  {
	  state = 1;
 800163e:	1dfb      	adds	r3, r7, #7
 8001640:	2201      	movs	r2, #1
 8001642:	701a      	strb	r2, [r3, #0]
	  #if (SX1272_debug_mode > 1)
		  my_printf("** There has been an error while setting CRC ON **\r\n");
		  my_printf("\r\n");
	  #endif
  }
  return state;
 8001644:	1dfb      	adds	r3, r7, #7
 8001646:	781b      	ldrb	r3, [r3, #0]
}
 8001648:	0018      	movs	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	b003      	add	sp, #12
 800164e:	bd90      	pop	{r4, r7, pc}
 8001650:	2000005c 	.word	0x2000005c

08001654 <BSP_SX1272_isSF>:
		  it's '0' if the SF value does not exist.
 Parameters:
   spr: spreading factor value to check.
*/
uint8_t	BSP_SX1272_isSF(uint8_t spr)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	0002      	movs	r2, r0
 800165c:	1dfb      	adds	r3, r7, #7
 800165e:	701a      	strb	r2, [r3, #0]
	  my_printf("\r\n");
	  my_printf("Starting 'BSP_SX1272_isSF'\r\n");
  #endif

  // Checking available values for currentstate._spreadingFactor
  switch(spr)
 8001660:	1dfb      	adds	r3, r7, #7
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	3b06      	subs	r3, #6
 8001666:	2b06      	cmp	r3, #6
 8001668:	d801      	bhi.n	800166e <BSP_SX1272_isSF+0x1a>
	  case SF_7:
	  case SF_8:
	  case SF_9:
	  case SF_10:
	  case SF_11:
	  case SF_12:	return 1;
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <BSP_SX1272_isSF+0x1c>
					break;

	  default:		return 0;
 800166e:	2300      	movs	r3, #0
  }
  #if (SX1272_debug_mode > 1)
	  my_printf("## Finished 'BSP_SX1272_isSF' ##\r\n");
	  my_printf("\r\n");
  #endif
}
 8001670:	0018      	movs	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	b002      	add	sp, #8
 8001676:	bd80      	pop	{r7, pc}

08001678 <BSP_SX1272_getSF>:
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
   state = -1 --> Forbidden command for this protocol
*/
int8_t	BSP_SX1272_getSF()
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
  int8_t state = 2;
 800167e:	1dfb      	adds	r3, r7, #7
 8001680:	2202      	movs	r2, #2
 8001682:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'getSF'\r\n");
  #endif

  if( currentstate._modem == FSK )
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <BSP_SX1272_getSF+0x68>)
 8001686:	7f1b      	ldrb	r3, [r3, #28]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d103      	bne.n	8001694 <BSP_SX1272_getSF+0x1c>
  {
	  state = -1;		// SF is not available in FSK mode
 800168c:	1dfb      	adds	r3, r7, #7
 800168e:	22ff      	movs	r2, #255	; 0xff
 8001690:	701a      	strb	r2, [r3, #0]
 8001692:	e01e      	b.n	80016d2 <BSP_SX1272_getSF+0x5a>
	  #endif
  }
  else
  {
	// take out bits 7-4 from REG_MODEM_CONFIG2 indicates currentstate._spreadingFactor
	config2 = (BSP_SX1272_Read(REG_MODEM_CONFIG2)) >> 4;
 8001694:	201e      	movs	r0, #30
 8001696:	f001 fb73 	bl	8002d80 <BSP_SX1272_Read>
 800169a:	0003      	movs	r3, r0
 800169c:	001a      	movs	r2, r3
 800169e:	1dbb      	adds	r3, r7, #6
 80016a0:	0912      	lsrs	r2, r2, #4
 80016a2:	701a      	strb	r2, [r3, #0]
	currentstate._spreadingFactor = config2;
 80016a4:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <BSP_SX1272_getSF+0x68>)
 80016a6:	1dba      	adds	r2, r7, #6
 80016a8:	7812      	ldrb	r2, [r2, #0]
 80016aa:	70da      	strb	r2, [r3, #3]
	state = 1;
 80016ac:	1dfb      	adds	r3, r7, #7
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]

	if( (config2 == currentstate._spreadingFactor) && BSP_SX1272_isSF(currentstate._spreadingFactor) )
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <BSP_SX1272_getSF+0x68>)
 80016b4:	78db      	ldrb	r3, [r3, #3]
 80016b6:	1dba      	adds	r2, r7, #6
 80016b8:	7812      	ldrb	r2, [r2, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d109      	bne.n	80016d2 <BSP_SX1272_getSF+0x5a>
 80016be:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <BSP_SX1272_getSF+0x68>)
 80016c0:	78db      	ldrb	r3, [r3, #3]
 80016c2:	0018      	movs	r0, r3
 80016c4:	f7ff ffc6 	bl	8001654 <BSP_SX1272_isSF>
 80016c8:	1e03      	subs	r3, r0, #0
 80016ca:	d002      	beq.n	80016d2 <BSP_SX1272_getSF+0x5a>
	{
		state = 0;
 80016cc:	1dfb      	adds	r3, r7, #7
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
			my_printf(" ##\r\n");
			my_printf("\r\n");
		#endif
	}
  }
  return state;
 80016d2:	1dfb      	adds	r3, r7, #7
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b25b      	sxtb	r3, r3
}
 80016d8:	0018      	movs	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	b002      	add	sp, #8
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	2000005c 	.word	0x2000005c

080016e4 <BSP_SX1272_setSF>:
   state = 0  --> The command has been executed with no errors
 Parameters:
   spr: spreading factor value to set in LoRa modem configuration.
*/
uint8_t	BSP_SX1272_setSF(uint8_t spr)
{
 80016e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	0002      	movs	r2, r0
 80016ec:	1dfb      	adds	r3, r7, #7
 80016ee:	701a      	strb	r2, [r3, #0]
	uint8_t st0;
	int8_t state = 2;
 80016f0:	250f      	movs	r5, #15
 80016f2:	197b      	adds	r3, r7, r5
 80016f4:	2202      	movs	r2, #2
 80016f6:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'BSP_SX1272_setSF'\r\n");
	#endif

	st0 = BSP_SX1272_Read(REG_OP_MODE);	// Save the previous status
 80016f8:	230c      	movs	r3, #12
 80016fa:	18fc      	adds	r4, r7, r3
 80016fc:	2001      	movs	r0, #1
 80016fe:	f001 fb3f 	bl	8002d80 <BSP_SX1272_Read>
 8001702:	0003      	movs	r3, r0
 8001704:	7023      	strb	r3, [r4, #0]

	if( currentstate._modem == FSK )
 8001706:	4bcc      	ldr	r3, [pc, #816]	; (8001a38 <BSP_SX1272_setSF+0x354>)
 8001708:	7f1b      	ldrb	r3, [r3, #28]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <BSP_SX1272_setSF+0x38>
		/// FSK mode
		#if (SX1272_debug_mode > 1)
			my_printf("## Notice that FSK hasn't Spreading Factor parameter, ");
			my_printf("so you are configuring it in LoRa mode ##\r\n");
		#endif
		state = BSP_SX1272_setLORA();				// Setting LoRa mode
 800170e:	f7ff fdf1 	bl	80012f4 <BSP_SX1272_setLORA>
 8001712:	0003      	movs	r3, r0
 8001714:	001a      	movs	r2, r3
 8001716:	197b      	adds	r3, r7, r5
 8001718:	701a      	strb	r2, [r3, #0]
 800171a:	e194      	b.n	8001a46 <BSP_SX1272_setSF+0x362>
	}
	else
	{
		/// LoRa mode
		// LoRa standby mode
		BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);
 800171c:	2181      	movs	r1, #129	; 0x81
 800171e:	2001      	movs	r0, #1
 8001720:	f001 fb5c 	bl	8002ddc <BSP_SX1272_Write>

		// Read config1 to modify only the LowDataRateOptimize
		config1 = (BSP_SX1272_Read(REG_MODEM_CONFIG1));
 8001724:	230e      	movs	r3, #14
 8001726:	18fc      	adds	r4, r7, r3
 8001728:	201d      	movs	r0, #29
 800172a:	f001 fb29 	bl	8002d80 <BSP_SX1272_Read>
 800172e:	0003      	movs	r3, r0
 8001730:	7023      	strb	r3, [r4, #0]
		// Read config2 to modify SF value (bits 7-4)
		config2 = (BSP_SX1272_Read(REG_MODEM_CONFIG2));
 8001732:	230d      	movs	r3, #13
 8001734:	18fc      	adds	r4, r7, r3
 8001736:	201e      	movs	r0, #30
 8001738:	f001 fb22 	bl	8002d80 <BSP_SX1272_Read>
 800173c:	0003      	movs	r3, r0
 800173e:	7023      	strb	r3, [r4, #0]

		switch(spr)
 8001740:	1dfb      	adds	r3, r7, #7
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	3b06      	subs	r3, #6
 8001746:	2b06      	cmp	r3, #6
 8001748:	d900      	bls.n	800174c <BSP_SX1272_setSF+0x68>
 800174a:	e07b      	b.n	8001844 <BSP_SX1272_setSF+0x160>
 800174c:	009a      	lsls	r2, r3, #2
 800174e:	4bbb      	ldr	r3, [pc, #748]	; (8001a3c <BSP_SX1272_setSF+0x358>)
 8001750:	18d3      	adds	r3, r2, r3
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	469f      	mov	pc, r3
		{
			case SF_6:
					config2 = config2 & 0b01101111;	// clears bits 7 & 4 from REG_MODEM_CONFIG2
 8001756:	200d      	movs	r0, #13
 8001758:	183b      	adds	r3, r7, r0
 800175a:	183a      	adds	r2, r7, r0
 800175c:	7812      	ldrb	r2, [r2, #0]
 800175e:	216f      	movs	r1, #111	; 0x6f
 8001760:	400a      	ands	r2, r1
 8001762:	701a      	strb	r2, [r3, #0]
					config2 = config2 | 0b01100000;	// sets bits 6 & 5 from REG_MODEM_CONFIG2
 8001764:	183b      	adds	r3, r7, r0
 8001766:	183a      	adds	r2, r7, r0
 8001768:	7812      	ldrb	r2, [r2, #0]
 800176a:	2160      	movs	r1, #96	; 0x60
 800176c:	430a      	orrs	r2, r1
 800176e:	701a      	strb	r2, [r3, #0]
					break;
 8001770:	e068      	b.n	8001844 <BSP_SX1272_setSF+0x160>
			case SF_7:
					config2 = config2 & 0b01111111;	// clears bits 7 from REG_MODEM_CONFIG2
 8001772:	200d      	movs	r0, #13
 8001774:	183b      	adds	r3, r7, r0
 8001776:	183a      	adds	r2, r7, r0
 8001778:	7812      	ldrb	r2, [r2, #0]
 800177a:	217f      	movs	r1, #127	; 0x7f
 800177c:	400a      	ands	r2, r1
 800177e:	701a      	strb	r2, [r3, #0]
					config2 = config2 | 0b01110000;	// sets bits 6, 5 & 4
 8001780:	183b      	adds	r3, r7, r0
 8001782:	183a      	adds	r2, r7, r0
 8001784:	7812      	ldrb	r2, [r2, #0]
 8001786:	2170      	movs	r1, #112	; 0x70
 8001788:	430a      	orrs	r2, r1
 800178a:	701a      	strb	r2, [r3, #0]
					break;
 800178c:	e05a      	b.n	8001844 <BSP_SX1272_setSF+0x160>

			case SF_8:
					config2 = config2 & 0b10001111;	// clears bits 6, 5 & 4 from REG_MODEM_CONFIG2
 800178e:	200d      	movs	r0, #13
 8001790:	183b      	adds	r3, r7, r0
 8001792:	183a      	adds	r2, r7, r0
 8001794:	7812      	ldrb	r2, [r2, #0]
 8001796:	2170      	movs	r1, #112	; 0x70
 8001798:	438a      	bics	r2, r1
 800179a:	701a      	strb	r2, [r3, #0]
					config2 = config2 | 0b10000000;	// sets bit 7 from REG_MODEM_CONFIG2
 800179c:	183b      	adds	r3, r7, r0
 800179e:	183a      	adds	r2, r7, r0
 80017a0:	7812      	ldrb	r2, [r2, #0]
 80017a2:	2180      	movs	r1, #128	; 0x80
 80017a4:	4249      	negs	r1, r1
 80017a6:	430a      	orrs	r2, r1
 80017a8:	701a      	strb	r2, [r3, #0]
					break;
 80017aa:	e04b      	b.n	8001844 <BSP_SX1272_setSF+0x160>

			case SF_9:
					config2 = config2 & 0b10011111;	// clears bits 6, 5 & 4 from REG_MODEM_CONFIG2
 80017ac:	200d      	movs	r0, #13
 80017ae:	183b      	adds	r3, r7, r0
 80017b0:	183a      	adds	r2, r7, r0
 80017b2:	7812      	ldrb	r2, [r2, #0]
 80017b4:	2160      	movs	r1, #96	; 0x60
 80017b6:	438a      	bics	r2, r1
 80017b8:	701a      	strb	r2, [r3, #0]
					config2 = config2 | 0b10010000;	// sets bits 7 & 4 from REG_MODEM_CONFIG2
 80017ba:	183b      	adds	r3, r7, r0
 80017bc:	183a      	adds	r2, r7, r0
 80017be:	7812      	ldrb	r2, [r2, #0]
 80017c0:	2170      	movs	r1, #112	; 0x70
 80017c2:	4249      	negs	r1, r1
 80017c4:	430a      	orrs	r2, r1
 80017c6:	701a      	strb	r2, [r3, #0]
					break;
 80017c8:	e03c      	b.n	8001844 <BSP_SX1272_setSF+0x160>

			case SF_10:	config2 = config2 & 0b10101111;	// clears bits 6 & 4 from REG_MODEM_CONFIG2
 80017ca:	200d      	movs	r0, #13
 80017cc:	183b      	adds	r3, r7, r0
 80017ce:	183a      	adds	r2, r7, r0
 80017d0:	7812      	ldrb	r2, [r2, #0]
 80017d2:	2150      	movs	r1, #80	; 0x50
 80017d4:	438a      	bics	r2, r1
 80017d6:	701a      	strb	r2, [r3, #0]
					config2 = config2 | 0b10100000;	// sets bits 7 & 5 from REG_MODEM_CONFIG2
 80017d8:	183b      	adds	r3, r7, r0
 80017da:	183a      	adds	r2, r7, r0
 80017dc:	7812      	ldrb	r2, [r2, #0]
 80017de:	2160      	movs	r1, #96	; 0x60
 80017e0:	4249      	negs	r1, r1
 80017e2:	430a      	orrs	r2, r1
 80017e4:	701a      	strb	r2, [r3, #0]
					break;
 80017e6:	e02d      	b.n	8001844 <BSP_SX1272_setSF+0x160>

			case SF_11:
					config2 = config2 & 0b10111111;	// clears bit 6 from REG_MODEM_CONFIG2
 80017e8:	200d      	movs	r0, #13
 80017ea:	183b      	adds	r3, r7, r0
 80017ec:	183a      	adds	r2, r7, r0
 80017ee:	7812      	ldrb	r2, [r2, #0]
 80017f0:	2140      	movs	r1, #64	; 0x40
 80017f2:	438a      	bics	r2, r1
 80017f4:	701a      	strb	r2, [r3, #0]
					config2 = config2 | 0b10110000;	// sets bits 7, 5 & 4 from REG_MODEM_CONFIG2
 80017f6:	183b      	adds	r3, r7, r0
 80017f8:	183a      	adds	r2, r7, r0
 80017fa:	7812      	ldrb	r2, [r2, #0]
 80017fc:	2150      	movs	r1, #80	; 0x50
 80017fe:	4249      	negs	r1, r1
 8001800:	430a      	orrs	r2, r1
 8001802:	701a      	strb	r2, [r3, #0]
					BSP_SX1272_getBW();
 8001804:	f000 f950 	bl	8001aa8 <BSP_SX1272_getBW>
					//if( currentstate._bandwidth == BW_125 )
					{ // LowDataRateOptimize (Mandatory with SF_11 if BW_125)
						config1 = config1 | 0b00000001;
 8001808:	220e      	movs	r2, #14
 800180a:	18bb      	adds	r3, r7, r2
 800180c:	18ba      	adds	r2, r7, r2
 800180e:	7812      	ldrb	r2, [r2, #0]
 8001810:	2101      	movs	r1, #1
 8001812:	430a      	orrs	r2, r1
 8001814:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001816:	e015      	b.n	8001844 <BSP_SX1272_setSF+0x160>

			case SF_12:
					config2 = config2 & 0b11001111;	// clears bits 5 & 4 from REG_MODEM_CONFIG2
 8001818:	200d      	movs	r0, #13
 800181a:	183b      	adds	r3, r7, r0
 800181c:	183a      	adds	r2, r7, r0
 800181e:	7812      	ldrb	r2, [r2, #0]
 8001820:	2130      	movs	r1, #48	; 0x30
 8001822:	438a      	bics	r2, r1
 8001824:	701a      	strb	r2, [r3, #0]
					config2 = config2 | 0b11000000;	// sets bits 7 & 6 from REG_MODEM_CONFIG2
 8001826:	183b      	adds	r3, r7, r0
 8001828:	183a      	adds	r2, r7, r0
 800182a:	7812      	ldrb	r2, [r2, #0]
 800182c:	2140      	movs	r1, #64	; 0x40
 800182e:	4249      	negs	r1, r1
 8001830:	430a      	orrs	r2, r1
 8001832:	701a      	strb	r2, [r3, #0]
					//if( currentstate._bandwidth == BW_125 )
					{ // LowDataRateOptimize (Mandatory with SF_12 if BW_125)
						config1 = config1 | 0b00000001;
 8001834:	220e      	movs	r2, #14
 8001836:	18bb      	adds	r3, r7, r2
 8001838:	18ba      	adds	r2, r7, r2
 800183a:	7812      	ldrb	r2, [r2, #0]
 800183c:	2101      	movs	r1, #1
 800183e:	430a      	orrs	r2, r1
 8001840:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001842:	46c0      	nop			; (mov r8, r8)
	}

	// Check if it is neccesary to set special settings for SF=6
	if( spr == SF_6 )
 8001844:	1dfb      	adds	r3, r7, #7
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b06      	cmp	r3, #6
 800184a:	d10a      	bne.n	8001862 <BSP_SX1272_setSF+0x17e>
	{
		// Mandatory headerOFF with SF = 6 (Implicit mode)
		BSP_SX1272_setHeaderOFF();
 800184c:	f7ff fe54 	bl	80014f8 <BSP_SX1272_setHeaderOFF>

		// Set the bit field DetectionOptimize of
		// register RegLoRaDetectOptimize to value "0b101".
		BSP_SX1272_Write(REG_DETECT_OPTIMIZE, 0x05);
 8001850:	2105      	movs	r1, #5
 8001852:	2031      	movs	r0, #49	; 0x31
 8001854:	f001 fac2 	bl	8002ddc <BSP_SX1272_Write>

		// Write 0x0C in the register RegDetectionThreshold.
		BSP_SX1272_Write(REG_DETECTION_THRESHOLD, 0x0C);
 8001858:	210c      	movs	r1, #12
 800185a:	2037      	movs	r0, #55	; 0x37
 800185c:	f001 fabe 	bl	8002ddc <BSP_SX1272_Write>
 8001860:	e007      	b.n	8001872 <BSP_SX1272_setSF+0x18e>
	}
	else
	{
		// LoRa detection Optimize: 0x03 --> SF7 to SF12
		BSP_SX1272_Write(REG_DETECT_OPTIMIZE, 0x03);
 8001862:	2103      	movs	r1, #3
 8001864:	2031      	movs	r0, #49	; 0x31
 8001866:	f001 fab9 	bl	8002ddc <BSP_SX1272_Write>

		// LoRa detection threshold: 0x0A --> SF7 to SF12
		BSP_SX1272_Write(REG_DETECTION_THRESHOLD, 0x0A);
 800186a:	210a      	movs	r1, #10
 800186c:	2037      	movs	r0, #55	; 0x37
 800186e:	f001 fab5 	bl	8002ddc <BSP_SX1272_Write>
	}

	// sets bit 2-0 (AgcAutoOn and SymbTimout) for any SF value
	config2 = config2 | 0b00000111;
 8001872:	240d      	movs	r4, #13
 8001874:	193b      	adds	r3, r7, r4
 8001876:	193a      	adds	r2, r7, r4
 8001878:	7812      	ldrb	r2, [r2, #0]
 800187a:	2107      	movs	r1, #7
 800187c:	430a      	orrs	r2, r1
 800187e:	701a      	strb	r2, [r3, #0]

	// Update 'config1' and 'config2'
	BSP_SX1272_Write(REG_MODEM_CONFIG1, config1);
 8001880:	260e      	movs	r6, #14
 8001882:	19bb      	adds	r3, r7, r6
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	0019      	movs	r1, r3
 8001888:	201d      	movs	r0, #29
 800188a:	f001 faa7 	bl	8002ddc <BSP_SX1272_Write>
	BSP_SX1272_Write(REG_MODEM_CONFIG2, config2);
 800188e:	0025      	movs	r5, r4
 8001890:	193b      	adds	r3, r7, r4
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	0019      	movs	r1, r3
 8001896:	201e      	movs	r0, #30
 8001898:	f001 faa0 	bl	8002ddc <BSP_SX1272_Write>

	// Read 'config1' and 'config2' to check update
	config1 = (BSP_SX1272_Read(REG_MODEM_CONFIG1));
 800189c:	19bc      	adds	r4, r7, r6
 800189e:	201d      	movs	r0, #29
 80018a0:	f001 fa6e 	bl	8002d80 <BSP_SX1272_Read>
 80018a4:	0003      	movs	r3, r0
 80018a6:	7023      	strb	r3, [r4, #0]
	config2 = (BSP_SX1272_Read(REG_MODEM_CONFIG2));
 80018a8:	197c      	adds	r4, r7, r5
 80018aa:	201e      	movs	r0, #30
 80018ac:	f001 fa68 	bl	8002d80 <BSP_SX1272_Read>
 80018b0:	0003      	movs	r3, r0
 80018b2:	7023      	strb	r3, [r4, #0]

	// (config2 >> 4) ---> take out bits 7-4 from REG_MODEM_CONFIG2 (=currentstate._spreadingFactor)
	// bitRead(config1, 0) ---> take out bits 1 from config1 (=LowDataRateOptimize)
	switch(spr)
 80018b4:	1dfb      	adds	r3, r7, #7
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	3b06      	subs	r3, #6
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d900      	bls.n	80018c0 <BSP_SX1272_setSF+0x1dc>
 80018be:	e0a9      	b.n	8001a14 <BSP_SX1272_setSF+0x330>
 80018c0:	009a      	lsls	r2, r3, #2
 80018c2:	4b5f      	ldr	r3, [pc, #380]	; (8001a40 <BSP_SX1272_setSF+0x35c>)
 80018c4:	18d3      	adds	r3, r2, r3
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	469f      	mov	pc, r3
	{
		case SF_6:	if(		((config2 >> 4) == spr)
 80018ca:	210d      	movs	r1, #13
 80018cc:	187b      	adds	r3, r7, r1
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	091b      	lsrs	r3, r3, #4
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	1dfa      	adds	r2, r7, #7
 80018d6:	7812      	ldrb	r2, [r2, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d000      	beq.n	80018de <BSP_SX1272_setSF+0x1fa>
 80018dc:	e09f      	b.n	8001a1e <BSP_SX1272_setSF+0x33a>
						&& 	(bitRead(config2, 2) == 1)
 80018de:	187b      	adds	r3, r7, r1
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	089b      	lsrs	r3, r3, #2
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	001a      	movs	r2, r3
 80018e8:	2301      	movs	r3, #1
 80018ea:	4013      	ands	r3, r2
 80018ec:	d100      	bne.n	80018f0 <BSP_SX1272_setSF+0x20c>
 80018ee:	e096      	b.n	8001a1e <BSP_SX1272_setSF+0x33a>
						&& 	(currentstate._header == HEADER_OFF))
 80018f0:	4b51      	ldr	r3, [pc, #324]	; (8001a38 <BSP_SX1272_setSF+0x354>)
 80018f2:	7cdb      	ldrb	r3, [r3, #19]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d000      	beq.n	80018fa <BSP_SX1272_setSF+0x216>
 80018f8:	e091      	b.n	8001a1e <BSP_SX1272_setSF+0x33a>
					{
						state = 0;
 80018fa:	230f      	movs	r3, #15
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001902:	e08c      	b.n	8001a1e <BSP_SX1272_setSF+0x33a>
		case SF_7:	if(		((config2 >> 4) == 0x07)
 8001904:	220d      	movs	r2, #13
 8001906:	18bb      	adds	r3, r7, r2
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b07      	cmp	r3, #7
 8001910:	d000      	beq.n	8001914 <BSP_SX1272_setSF+0x230>
 8001912:	e086      	b.n	8001a22 <BSP_SX1272_setSF+0x33e>
						 && (bitRead(config2, 2) == 1))
 8001914:	18bb      	adds	r3, r7, r2
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	b2db      	uxtb	r3, r3
 800191c:	001a      	movs	r2, r3
 800191e:	2301      	movs	r3, #1
 8001920:	4013      	ands	r3, r2
 8001922:	d100      	bne.n	8001926 <BSP_SX1272_setSF+0x242>
 8001924:	e07d      	b.n	8001a22 <BSP_SX1272_setSF+0x33e>
					{
						state = 0;
 8001926:	230f      	movs	r3, #15
 8001928:	18fb      	adds	r3, r7, r3
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
					}
					break;
 800192e:	e078      	b.n	8001a22 <BSP_SX1272_setSF+0x33e>
		case SF_8:	if(		((config2 >> 4) == 0x08)
 8001930:	220d      	movs	r2, #13
 8001932:	18bb      	adds	r3, r7, r2
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	091b      	lsrs	r3, r3, #4
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b08      	cmp	r3, #8
 800193c:	d000      	beq.n	8001940 <BSP_SX1272_setSF+0x25c>
 800193e:	e072      	b.n	8001a26 <BSP_SX1272_setSF+0x342>
						 && (bitRead(config2, 2) == 1))
 8001940:	18bb      	adds	r3, r7, r2
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	b2db      	uxtb	r3, r3
 8001948:	001a      	movs	r2, r3
 800194a:	2301      	movs	r3, #1
 800194c:	4013      	ands	r3, r2
 800194e:	d100      	bne.n	8001952 <BSP_SX1272_setSF+0x26e>
 8001950:	e069      	b.n	8001a26 <BSP_SX1272_setSF+0x342>
					{
						state = 0;
 8001952:	230f      	movs	r3, #15
 8001954:	18fb      	adds	r3, r7, r3
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
					}
					break;
 800195a:	e064      	b.n	8001a26 <BSP_SX1272_setSF+0x342>
		case SF_9:	if(		((config2 >> 4) == 0x09)
 800195c:	220d      	movs	r2, #13
 800195e:	18bb      	adds	r3, r7, r2
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b09      	cmp	r3, #9
 8001968:	d15f      	bne.n	8001a2a <BSP_SX1272_setSF+0x346>
						 && (bitRead(config2, 2) == 1))
 800196a:	18bb      	adds	r3, r7, r2
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	089b      	lsrs	r3, r3, #2
 8001970:	b2db      	uxtb	r3, r3
 8001972:	001a      	movs	r2, r3
 8001974:	2301      	movs	r3, #1
 8001976:	4013      	ands	r3, r2
 8001978:	d057      	beq.n	8001a2a <BSP_SX1272_setSF+0x346>
					{
						state = 0;
 800197a:	230f      	movs	r3, #15
 800197c:	18fb      	adds	r3, r7, r3
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001982:	e052      	b.n	8001a2a <BSP_SX1272_setSF+0x346>
		case SF_10:	if(		((config2 >> 4) == 0x0A)
 8001984:	220d      	movs	r2, #13
 8001986:	18bb      	adds	r3, r7, r2
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	091b      	lsrs	r3, r3, #4
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b0a      	cmp	r3, #10
 8001990:	d14d      	bne.n	8001a2e <BSP_SX1272_setSF+0x34a>
						 && (bitRead(config2, 2) == 1))
 8001992:	18bb      	adds	r3, r7, r2
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	089b      	lsrs	r3, r3, #2
 8001998:	b2db      	uxtb	r3, r3
 800199a:	001a      	movs	r2, r3
 800199c:	2301      	movs	r3, #1
 800199e:	4013      	ands	r3, r2
 80019a0:	d045      	beq.n	8001a2e <BSP_SX1272_setSF+0x34a>
					{
						state = 0;
 80019a2:	230f      	movs	r3, #15
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
					}
					break;
 80019aa:	e040      	b.n	8001a2e <BSP_SX1272_setSF+0x34a>
		case SF_11:	if(		((config2 >> 4) == 0x0B)
 80019ac:	220d      	movs	r2, #13
 80019ae:	18bb      	adds	r3, r7, r2
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	091b      	lsrs	r3, r3, #4
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b0b      	cmp	r3, #11
 80019b8:	d13b      	bne.n	8001a32 <BSP_SX1272_setSF+0x34e>
						 && (bitRead(config2, 2) == 1)
 80019ba:	18bb      	adds	r3, r7, r2
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	089b      	lsrs	r3, r3, #2
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	001a      	movs	r2, r3
 80019c4:	2301      	movs	r3, #1
 80019c6:	4013      	ands	r3, r2
 80019c8:	d033      	beq.n	8001a32 <BSP_SX1272_setSF+0x34e>
						 && (bitRead(config1, 0) == 1))
 80019ca:	230e      	movs	r3, #14
 80019cc:	18fb      	adds	r3, r7, r3
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2201      	movs	r2, #1
 80019d2:	4013      	ands	r3, r2
 80019d4:	d02d      	beq.n	8001a32 <BSP_SX1272_setSF+0x34e>
					{
						state = 0;
 80019d6:	230f      	movs	r3, #15
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
					}
					break;
 80019de:	e028      	b.n	8001a32 <BSP_SX1272_setSF+0x34e>
		case SF_12:	if(		((config2 >> 4) == 0x0C)
 80019e0:	220d      	movs	r2, #13
 80019e2:	18bb      	adds	r3, r7, r2
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	091b      	lsrs	r3, r3, #4
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b0c      	cmp	r3, #12
 80019ec:	d12a      	bne.n	8001a44 <BSP_SX1272_setSF+0x360>
						 && (bitRead(config2, 2) == 1)
 80019ee:	18bb      	adds	r3, r7, r2
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	089b      	lsrs	r3, r3, #2
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	001a      	movs	r2, r3
 80019f8:	2301      	movs	r3, #1
 80019fa:	4013      	ands	r3, r2
 80019fc:	d022      	beq.n	8001a44 <BSP_SX1272_setSF+0x360>
						 && (bitRead(config1, 0) == 1))
 80019fe:	230e      	movs	r3, #14
 8001a00:	18fb      	adds	r3, r7, r3
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2201      	movs	r2, #1
 8001a06:	4013      	ands	r3, r2
 8001a08:	d01c      	beq.n	8001a44 <BSP_SX1272_setSF+0x360>
					{
						state = 0;
 8001a0a:	230f      	movs	r3, #15
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001a12:	e017      	b.n	8001a44 <BSP_SX1272_setSF+0x360>
		default:	state = 1;
 8001a14:	230f      	movs	r3, #15
 8001a16:	18fb      	adds	r3, r7, r3
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	e013      	b.n	8001a46 <BSP_SX1272_setSF+0x362>
					break;
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	e011      	b.n	8001a46 <BSP_SX1272_setSF+0x362>
					break;
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	e00f      	b.n	8001a46 <BSP_SX1272_setSF+0x362>
					break;
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	e00d      	b.n	8001a46 <BSP_SX1272_setSF+0x362>
					break;
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	e00b      	b.n	8001a46 <BSP_SX1272_setSF+0x362>
					break;
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	e009      	b.n	8001a46 <BSP_SX1272_setSF+0x362>
					break;
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	e007      	b.n	8001a46 <BSP_SX1272_setSF+0x362>
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	2000005c 	.word	0x2000005c
 8001a3c:	080032ac 	.word	0x080032ac
 8001a40:	080032c8 	.word	0x080032c8
					break;
 8001a44:	46c0      	nop			; (mov r8, r8)
	}
  }

  BSP_SX1272_Write(REG_OP_MODE, st0);	// Getting back to previous status
 8001a46:	230c      	movs	r3, #12
 8001a48:	18fb      	adds	r3, r7, r3
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	0019      	movs	r1, r3
 8001a4e:	2001      	movs	r0, #1
 8001a50:	f001 f9c4 	bl	8002ddc <BSP_SX1272_Write>

  if( BSP_SX1272_isSF(spr) )
 8001a54:	1dfb      	adds	r3, r7, #7
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f7ff fdfb 	bl	8001654 <BSP_SX1272_isSF>
 8001a5e:	1e03      	subs	r3, r0, #0
 8001a60:	d007      	beq.n	8001a72 <BSP_SX1272_setSF+0x38e>
  { // Checking available value for currentstate._spreadingFactor
		state = 0;
 8001a62:	230f      	movs	r3, #15
 8001a64:	18fb      	adds	r3, r7, r3
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
		currentstate._spreadingFactor = spr;
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <BSP_SX1272_setSF+0x39c>)
 8001a6c:	1dfa      	adds	r2, r7, #7
 8001a6e:	7812      	ldrb	r2, [r2, #0]
 8001a70:	70da      	strb	r2, [r3, #3]
		      my_printf("** There has been an error while setting the spreading factor **");
		      my_printf("\r\n");
		  #endif
	  }
  }
  return state;
 8001a72:	230f      	movs	r3, #15
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	781b      	ldrb	r3, [r3, #0]
}
 8001a78:	0018      	movs	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b005      	add	sp, #20
 8001a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a80:	2000005c 	.word	0x2000005c

08001a84 <BSP_SX1272_isBW>:
		  it's '0' if the BW value does not exist.
 Parameters:
   band: bandwidth value to check.
*/
uint8_t	BSP_SX1272_isBW(uint16_t band)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	0002      	movs	r2, r0
 8001a8c:	1dbb      	adds	r3, r7, #6
 8001a8e:	801a      	strh	r2, [r3, #0]
	  my_printf("\r\n");
	  my_printf("Starting 'BSP_SX1272_isBW'\r\n");
  #endif

  // Checking available values for currentstate._bandwidth
  switch(band)
 8001a90:	1dbb      	adds	r3, r7, #6
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d801      	bhi.n	8001a9c <BSP_SX1272_isBW+0x18>
  {
	  case BW_125:
	  case BW_250:
	  case BW_500:	return 1;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <BSP_SX1272_isBW+0x1a>
					break;

	  default:		return 0;
 8001a9c:	2300      	movs	r3, #0
  }
  #if (SX1272_debug_mode > 1)
	  my_printf("## Finished 'BSP_SX1272_isBW' ##\r\n");
	  my_printf("\r\n");
  #endif
}
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b002      	add	sp, #8
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <BSP_SX1272_getBW>:
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
   state = -1 --> Forbidden command for this protocol
*/
int8_t	BSP_SX1272_getBW()
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
  uint8_t state = 2;
 8001aae:	1dfb      	adds	r3, r7, #7
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'getBW'\r\n");
  #endif

  if( currentstate._modem == FSK )
 8001ab4:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <BSP_SX1272_getBW+0x6c>)
 8001ab6:	7f1b      	ldrb	r3, [r3, #28]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d103      	bne.n	8001ac4 <BSP_SX1272_getBW+0x1c>
  {
	  state = -1;		// BW is not available in FSK mode
 8001abc:	1dfb      	adds	r3, r7, #7
 8001abe:	22ff      	movs	r2, #255	; 0xff
 8001ac0:	701a      	strb	r2, [r3, #0]
 8001ac2:	e020      	b.n	8001b06 <BSP_SX1272_getBW+0x5e>
	  #endif
  }
  else
  {
	  // take out bits 7-6 from REG_MODEM_CONFIG1 indicates currentstate._bandwidth
	  config1 = (BSP_SX1272_Read(REG_MODEM_CONFIG1)) >> 6;
 8001ac4:	201d      	movs	r0, #29
 8001ac6:	f001 f95b 	bl	8002d80 <BSP_SX1272_Read>
 8001aca:	0003      	movs	r3, r0
 8001acc:	001a      	movs	r2, r3
 8001ace:	1dbb      	adds	r3, r7, #6
 8001ad0:	0992      	lsrs	r2, r2, #6
 8001ad2:	701a      	strb	r2, [r3, #0]
	  currentstate._bandwidth = config1;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <BSP_SX1272_getBW+0x6c>)
 8001ad6:	1dba      	adds	r2, r7, #6
 8001ad8:	7812      	ldrb	r2, [r2, #0]
 8001ada:	705a      	strb	r2, [r3, #1]

	  if( (config1 == currentstate._bandwidth) && BSP_SX1272_isBW(currentstate._bandwidth) )
 8001adc:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <BSP_SX1272_getBW+0x6c>)
 8001ade:	785b      	ldrb	r3, [r3, #1]
 8001ae0:	1dba      	adds	r2, r7, #6
 8001ae2:	7812      	ldrb	r2, [r2, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d10b      	bne.n	8001b00 <BSP_SX1272_getBW+0x58>
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <BSP_SX1272_getBW+0x6c>)
 8001aea:	785b      	ldrb	r3, [r3, #1]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	0018      	movs	r0, r3
 8001af0:	f7ff ffc8 	bl	8001a84 <BSP_SX1272_isBW>
 8001af4:	1e03      	subs	r3, r0, #0
 8001af6:	d003      	beq.n	8001b00 <BSP_SX1272_getBW+0x58>
	  {
		  state = 0;
 8001af8:	1dfb      	adds	r3, r7, #7
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
 8001afe:	e002      	b.n	8001b06 <BSP_SX1272_getBW+0x5e>
			  my_printf("\r\n");
		  #endif
	  }
	  else
	  {
		  state = 1;
 8001b00:	1dfb      	adds	r3, r7, #7
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]
			  my_printf("** There has been an error while getting bandwidth **");
			  my_printf("\r\n");
		  #endif
	  }
  }
  return state;
 8001b06:	1dfb      	adds	r3, r7, #7
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	b25b      	sxtb	r3, r3
}
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b002      	add	sp, #8
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	2000005c 	.word	0x2000005c

08001b18 <BSP_SX1272_setBW>:
   state = 0  --> The command has been executed with no errors
 Parameters:
   band: bandwith value to set in LoRa modem configuration.
*/
int8_t	BSP_SX1272_setBW(uint16_t band)
{
 8001b18:	b5b0      	push	{r4, r5, r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	0002      	movs	r2, r0
 8001b20:	1dbb      	adds	r3, r7, #6
 8001b22:	801a      	strh	r2, [r3, #0]
  uint8_t st0;
  int8_t state = 2;
 8001b24:	250f      	movs	r5, #15
 8001b26:	197b      	adds	r3, r7, r5
 8001b28:	2202      	movs	r2, #2
 8001b2a:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'BSP_SX1272_setBW'\r\n");
  #endif

  st0 = BSP_SX1272_Read(REG_OP_MODE);	// Save the previous status
 8001b2c:	230d      	movs	r3, #13
 8001b2e:	18fc      	adds	r4, r7, r3
 8001b30:	2001      	movs	r0, #1
 8001b32:	f001 f925 	bl	8002d80 <BSP_SX1272_Read>
 8001b36:	0003      	movs	r3, r0
 8001b38:	7023      	strb	r3, [r4, #0]

  if( currentstate._modem == FSK )
 8001b3a:	4b70      	ldr	r3, [pc, #448]	; (8001cfc <BSP_SX1272_setBW+0x1e4>)
 8001b3c:	7f1b      	ldrb	r3, [r3, #28]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d105      	bne.n	8001b4e <BSP_SX1272_setBW+0x36>
  {
	  #if (SX1272_debug_mode > 1)
		  my_printf("## Notice that FSK hasn't Bandwidth parameter, ");
		  my_printf("so you are configuring it in LoRa mode ##\r\n");
	  #endif
	  state = BSP_SX1272_setLORA();
 8001b42:	f7ff fbd7 	bl	80012f4 <BSP_SX1272_setLORA>
 8001b46:	0003      	movs	r3, r0
 8001b48:	001a      	movs	r2, r3
 8001b4a:	197b      	adds	r3, r7, r5
 8001b4c:	701a      	strb	r2, [r3, #0]
  }
  BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);	// LoRa standby mode
 8001b4e:	2181      	movs	r1, #129	; 0x81
 8001b50:	2001      	movs	r0, #1
 8001b52:	f001 f943 	bl	8002ddc <BSP_SX1272_Write>
  config1 = (BSP_SX1272_Read(REG_MODEM_CONFIG1));	// Save config1 to modify only the BW
 8001b56:	230e      	movs	r3, #14
 8001b58:	18fc      	adds	r4, r7, r3
 8001b5a:	201d      	movs	r0, #29
 8001b5c:	f001 f910 	bl	8002d80 <BSP_SX1272_Read>
 8001b60:	0003      	movs	r3, r0
 8001b62:	7023      	strb	r3, [r4, #0]
  switch(band)
 8001b64:	1dbb      	adds	r3, r7, #6
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d032      	beq.n	8001bd2 <BSP_SX1272_setBW+0xba>
 8001b6c:	dc41      	bgt.n	8001bf2 <BSP_SX1272_setBW+0xda>
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <BSP_SX1272_setBW+0x60>
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d01f      	beq.n	8001bb6 <BSP_SX1272_setBW+0x9e>
 8001b76:	e03c      	b.n	8001bf2 <BSP_SX1272_setBW+0xda>
  {
	  case BW_125:  config1 = config1 & 0b00111111;	// clears bits 7 & 6 from REG_MODEM_CONFIG1
 8001b78:	240e      	movs	r4, #14
 8001b7a:	193b      	adds	r3, r7, r4
 8001b7c:	193a      	adds	r2, r7, r4
 8001b7e:	7812      	ldrb	r2, [r2, #0]
 8001b80:	213f      	movs	r1, #63	; 0x3f
 8001b82:	400a      	ands	r2, r1
 8001b84:	701a      	strb	r2, [r3, #0]
	  	  	  	  	BSP_SX1272_getSF();
 8001b86:	f7ff fd77 	bl	8001678 <BSP_SX1272_getSF>
					if( currentstate._spreadingFactor == 11 )
 8001b8a:	4b5c      	ldr	r3, [pc, #368]	; (8001cfc <BSP_SX1272_setBW+0x1e4>)
 8001b8c:	78db      	ldrb	r3, [r3, #3]
 8001b8e:	2b0b      	cmp	r3, #11
 8001b90:	d105      	bne.n	8001b9e <BSP_SX1272_setBW+0x86>
					{ // LowDataRateOptimize (Mandatory with BW_125 if SF_11)
						config1 = config1 | 0b00000001;
 8001b92:	193b      	adds	r3, r7, r4
 8001b94:	193a      	adds	r2, r7, r4
 8001b96:	7812      	ldrb	r2, [r2, #0]
 8001b98:	2101      	movs	r1, #1
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]
					}
					if( currentstate._spreadingFactor == 12 )
 8001b9e:	4b57      	ldr	r3, [pc, #348]	; (8001cfc <BSP_SX1272_setBW+0x1e4>)
 8001ba0:	78db      	ldrb	r3, [r3, #3]
 8001ba2:	2b0c      	cmp	r3, #12
 8001ba4:	d124      	bne.n	8001bf0 <BSP_SX1272_setBW+0xd8>
					{ // LowDataRateOptimize (Mandatory with BW_125 if SF_12)
						config1 = config1 | 0b00000001;
 8001ba6:	220e      	movs	r2, #14
 8001ba8:	18bb      	adds	r3, r7, r2
 8001baa:	18ba      	adds	r2, r7, r2
 8001bac:	7812      	ldrb	r2, [r2, #0]
 8001bae:	2101      	movs	r1, #1
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001bb4:	e01c      	b.n	8001bf0 <BSP_SX1272_setBW+0xd8>
	  case BW_250:  config1 = config1 & 0b01111111;	// clears bit 7 from REG_MODEM_CONFIG1
 8001bb6:	200e      	movs	r0, #14
 8001bb8:	183b      	adds	r3, r7, r0
 8001bba:	183a      	adds	r2, r7, r0
 8001bbc:	7812      	ldrb	r2, [r2, #0]
 8001bbe:	217f      	movs	r1, #127	; 0x7f
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	701a      	strb	r2, [r3, #0]
					config1 = config1 | 0b01000000;	// sets bit 6 from REG_MODEM_CONFIG1
 8001bc4:	183b      	adds	r3, r7, r0
 8001bc6:	183a      	adds	r2, r7, r0
 8001bc8:	7812      	ldrb	r2, [r2, #0]
 8001bca:	2140      	movs	r1, #64	; 0x40
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	701a      	strb	r2, [r3, #0]
					break;
 8001bd0:	e00f      	b.n	8001bf2 <BSP_SX1272_setBW+0xda>
	  case BW_500:  config1 = config1 & 0b10111111;	//clears bit 6 from REG_MODEM_CONFIG1
 8001bd2:	200e      	movs	r0, #14
 8001bd4:	183b      	adds	r3, r7, r0
 8001bd6:	183a      	adds	r2, r7, r0
 8001bd8:	7812      	ldrb	r2, [r2, #0]
 8001bda:	2140      	movs	r1, #64	; 0x40
 8001bdc:	438a      	bics	r2, r1
 8001bde:	701a      	strb	r2, [r3, #0]
					config1 = config1 | 0b10000000;	//sets bit 7 from REG_MODEM_CONFIG1
 8001be0:	183b      	adds	r3, r7, r0
 8001be2:	183a      	adds	r2, r7, r0
 8001be4:	7812      	ldrb	r2, [r2, #0]
 8001be6:	2180      	movs	r1, #128	; 0x80
 8001be8:	4249      	negs	r1, r1
 8001bea:	430a      	orrs	r2, r1
 8001bec:	701a      	strb	r2, [r3, #0]
					break;
 8001bee:	e000      	b.n	8001bf2 <BSP_SX1272_setBW+0xda>
					break;
 8001bf0:	46c0      	nop			; (mov r8, r8)
  }
  BSP_SX1272_Write(REG_MODEM_CONFIG1,config1);		// Update config1
 8001bf2:	240e      	movs	r4, #14
 8001bf4:	193b      	adds	r3, r7, r4
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	201d      	movs	r0, #29
 8001bfc:	f001 f8ee 	bl	8002ddc <BSP_SX1272_Write>

  config1 = (BSP_SX1272_Read(REG_MODEM_CONFIG1));
 8001c00:	193c      	adds	r4, r7, r4
 8001c02:	201d      	movs	r0, #29
 8001c04:	f001 f8bc 	bl	8002d80 <BSP_SX1272_Read>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	7023      	strb	r3, [r4, #0]
  // (config1 >> 6) ---> take out bits 7-6 from REG_MODEM_CONFIG1 (=currentstate._bandwidth)
  switch(band)
 8001c0c:	1dbb      	adds	r3, r7, #6
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d041      	beq.n	8001c98 <BSP_SX1272_setBW+0x180>
 8001c14:	dc51      	bgt.n	8001cba <BSP_SX1272_setBW+0x1a2>
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <BSP_SX1272_setBW+0x108>
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d030      	beq.n	8001c80 <BSP_SX1272_setBW+0x168>
 8001c1e:	e04c      	b.n	8001cba <BSP_SX1272_setBW+0x1a2>
  {
	   case BW_125: if( (config1 >> 6) == BW_125 )
 8001c20:	210e      	movs	r1, #14
 8001c22:	187b      	adds	r3, r7, r1
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	099b      	lsrs	r3, r3, #6
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d140      	bne.n	8001cb0 <BSP_SX1272_setBW+0x198>
					{
						state = 0;
 8001c2e:	200f      	movs	r0, #15
 8001c30:	183b      	adds	r3, r7, r0
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
						if( currentstate._spreadingFactor == 11 )
 8001c36:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <BSP_SX1272_setBW+0x1e4>)
 8001c38:	78db      	ldrb	r3, [r3, #3]
 8001c3a:	2b0b      	cmp	r3, #11
 8001c3c:	d10c      	bne.n	8001c58 <BSP_SX1272_setBW+0x140>
						{
							if( bitRead(config1, 0) == 1 )
 8001c3e:	187b      	adds	r3, r7, r1
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2201      	movs	r2, #1
 8001c44:	4013      	ands	r3, r2
 8001c46:	d003      	beq.n	8001c50 <BSP_SX1272_setBW+0x138>
							{ // LowDataRateOptimize
								state = 0;
 8001c48:	183b      	adds	r3, r7, r0
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
 8001c4e:	e003      	b.n	8001c58 <BSP_SX1272_setBW+0x140>
							}
							else
							{
								state = 1;
 8001c50:	230f      	movs	r3, #15
 8001c52:	18fb      	adds	r3, r7, r3
 8001c54:	2201      	movs	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
							}
						}
						if( currentstate._spreadingFactor == 12 )
 8001c58:	4b28      	ldr	r3, [pc, #160]	; (8001cfc <BSP_SX1272_setBW+0x1e4>)
 8001c5a:	78db      	ldrb	r3, [r3, #3]
 8001c5c:	2b0c      	cmp	r3, #12
 8001c5e:	d127      	bne.n	8001cb0 <BSP_SX1272_setBW+0x198>
						{
							if( bitRead(config1, 0) == 1 )
 8001c60:	230e      	movs	r3, #14
 8001c62:	18fb      	adds	r3, r7, r3
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2201      	movs	r2, #1
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d004      	beq.n	8001c76 <BSP_SX1272_setBW+0x15e>
							{ // LowDataRateOptimize
								state = 0;
 8001c6c:	230f      	movs	r3, #15
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
							{
								state = 1;
							}
						}
					}
					break;
 8001c74:	e01c      	b.n	8001cb0 <BSP_SX1272_setBW+0x198>
								state = 1;
 8001c76:	230f      	movs	r3, #15
 8001c78:	18fb      	adds	r3, r7, r3
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]
					break;
 8001c7e:	e017      	b.n	8001cb0 <BSP_SX1272_setBW+0x198>
	   case BW_250: if( (config1 >> 6) == BW_250 )
 8001c80:	230e      	movs	r3, #14
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	099b      	lsrs	r3, r3, #6
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d112      	bne.n	8001cb4 <BSP_SX1272_setBW+0x19c>
					{
						state = 0;
 8001c8e:	230f      	movs	r3, #15
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001c96:	e00d      	b.n	8001cb4 <BSP_SX1272_setBW+0x19c>
	   case BW_500: if( (config1 >> 6) == BW_500 )
 8001c98:	230e      	movs	r3, #14
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	099b      	lsrs	r3, r3, #6
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d108      	bne.n	8001cb8 <BSP_SX1272_setBW+0x1a0>
					{
						state = 0;
 8001ca6:	230f      	movs	r3, #15
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001cae:	e003      	b.n	8001cb8 <BSP_SX1272_setBW+0x1a0>
					break;
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	e002      	b.n	8001cba <BSP_SX1272_setBW+0x1a2>
					break;
 8001cb4:	46c0      	nop			; (mov r8, r8)
 8001cb6:	e000      	b.n	8001cba <BSP_SX1272_setBW+0x1a2>
					break;
 8001cb8:	46c0      	nop			; (mov r8, r8)
  }

  if( !BSP_SX1272_isBW(band) )
 8001cba:	1dbb      	adds	r3, r7, #6
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f7ff fee0 	bl	8001a84 <BSP_SX1272_isBW>
 8001cc4:	1e03      	subs	r3, r0, #0
 8001cc6:	d104      	bne.n	8001cd2 <BSP_SX1272_setBW+0x1ba>
  {
	  state = 1;
 8001cc8:	230f      	movs	r3, #15
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]
 8001cd0:	e004      	b.n	8001cdc <BSP_SX1272_setBW+0x1c4>
		  my_printf("\r\n");
	  #endif
  }
  else
  {
	  currentstate._bandwidth = band;
 8001cd2:	1dbb      	adds	r3, r7, #6
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <BSP_SX1272_setBW+0x1e4>)
 8001cda:	705a      	strb	r2, [r3, #1]
		  my_printf("%d",band);
		  my_printf(" has been successfully set ##\r\n");
		  my_printf("\r\n");
	  #endif
  }
  BSP_SX1272_Write(REG_OP_MODE, st0);	// Getting back to previous status
 8001cdc:	230d      	movs	r3, #13
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	0019      	movs	r1, r3
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f001 f879 	bl	8002ddc <BSP_SX1272_Write>
  return state;
 8001cea:	230f      	movs	r3, #15
 8001cec:	18fb      	adds	r3, r7, r3
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	b25b      	sxtb	r3, r3
}
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b004      	add	sp, #16
 8001cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	2000005c 	.word	0x2000005c

08001d00 <BSP_SX1272_isCR>:
		  it's '0' if the CR value does not exist.
 Parameters:
   cod: coding rate value to check.
*/
uint8_t	BSP_SX1272_isCR(uint8_t cod)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	0002      	movs	r2, r0
 8001d08:	1dfb      	adds	r3, r7, #7
 8001d0a:	701a      	strb	r2, [r3, #0]
	  my_printf("\r\n");
	  my_printf("Starting 'BSP_SX1272_isCR'\r\n");
  #endif

  // Checking available values for currentstate._codingRate
  switch(cod)
 8001d0c:	1dfb      	adds	r3, r7, #7
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d801      	bhi.n	8001d1a <BSP_SX1272_isCR+0x1a>
  {
	  case CR_5:
	  case CR_6:
	  case CR_7:
	  case CR_8:	return 1;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <BSP_SX1272_isCR+0x1c>
					break;

	  default:		return 0;
 8001d1a:	2300      	movs	r3, #0
  }
  #if (SX1272_debug_mode > 1)
	  my_printf("## Finished 'BSP_SX1272_isCR' ##\r\n");
	  my_printf("\r\n");
  #endif
}
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b002      	add	sp, #8
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <BSP_SX1272_setCR>:
   state = -1 --> Forbidden command for this protocol
 Parameters:
   cod: coding rate value to set in LoRa modem configuration.
*/
int8_t	BSP_SX1272_setCR(uint8_t cod)
{
 8001d24:	b5b0      	push	{r4, r5, r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	0002      	movs	r2, r0
 8001d2c:	1dfb      	adds	r3, r7, #7
 8001d2e:	701a      	strb	r2, [r3, #0]
  uint8_t st0;
  int8_t state = 2;
 8001d30:	250f      	movs	r5, #15
 8001d32:	197b      	adds	r3, r7, r5
 8001d34:	2202      	movs	r2, #2
 8001d36:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'BSP_SX1272_setCR'\r\n");
  #endif

  st0 = BSP_SX1272_Read(REG_OP_MODE);		// Save the previous status
 8001d38:	230d      	movs	r3, #13
 8001d3a:	18fc      	adds	r4, r7, r3
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f001 f81f 	bl	8002d80 <BSP_SX1272_Read>
 8001d42:	0003      	movs	r3, r0
 8001d44:	7023      	strb	r3, [r4, #0]

  if( currentstate._modem == FSK )
 8001d46:	4b6b      	ldr	r3, [pc, #428]	; (8001ef4 <BSP_SX1272_setCR+0x1d0>)
 8001d48:	7f1b      	ldrb	r3, [r3, #28]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <BSP_SX1272_setCR+0x38>
  {
	  #if (SX1272_debug_mode > 1)
		  my_printf("## Notice that FSK hasn't Coding Rate parameter, ");
		  my_printf("so you are configuring it in LoRa mode ##\r\n");
	  #endif
	  state = BSP_SX1272_setLORA();
 8001d4e:	f7ff fad1 	bl	80012f4 <BSP_SX1272_setLORA>
 8001d52:	0003      	movs	r3, r0
 8001d54:	001a      	movs	r2, r3
 8001d56:	197b      	adds	r3, r7, r5
 8001d58:	701a      	strb	r2, [r3, #0]
 8001d5a:	e0ac      	b.n	8001eb6 <BSP_SX1272_setCR+0x192>
  }
  else
  {
	  BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);		// Set Standby mode to write in registers
 8001d5c:	2181      	movs	r1, #129	; 0x81
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f001 f83c 	bl	8002ddc <BSP_SX1272_Write>

	  config1 = BSP_SX1272_Read(REG_MODEM_CONFIG1);	// Save config1 to modify only the CR
 8001d64:	230e      	movs	r3, #14
 8001d66:	18fc      	adds	r4, r7, r3
 8001d68:	201d      	movs	r0, #29
 8001d6a:	f001 f809 	bl	8002d80 <BSP_SX1272_Read>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	7023      	strb	r3, [r4, #0]
	  switch(cod)
 8001d72:	1dfb      	adds	r3, r7, #7
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d032      	beq.n	8001de0 <BSP_SX1272_setCR+0xbc>
 8001d7a:	dc3f      	bgt.n	8001dfc <BSP_SX1272_setCR+0xd8>
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d021      	beq.n	8001dc4 <BSP_SX1272_setCR+0xa0>
 8001d80:	dc3c      	bgt.n	8001dfc <BSP_SX1272_setCR+0xd8>
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d002      	beq.n	8001d8c <BSP_SX1272_setCR+0x68>
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d00e      	beq.n	8001da8 <BSP_SX1272_setCR+0x84>
 8001d8a:	e037      	b.n	8001dfc <BSP_SX1272_setCR+0xd8>
	  {
		 case CR_5: config1 = config1 & 0b11001111;	// clears bits 5 & 4 from REG_MODEM_CONFIG1
 8001d8c:	200e      	movs	r0, #14
 8001d8e:	183b      	adds	r3, r7, r0
 8001d90:	183a      	adds	r2, r7, r0
 8001d92:	7812      	ldrb	r2, [r2, #0]
 8001d94:	2130      	movs	r1, #48	; 0x30
 8001d96:	438a      	bics	r2, r1
 8001d98:	701a      	strb	r2, [r3, #0]
					config1 = config1 | 0b00001000;	// sets bit 3 from REG_MODEM_CONFIG1
 8001d9a:	183b      	adds	r3, r7, r0
 8001d9c:	183a      	adds	r2, r7, r0
 8001d9e:	7812      	ldrb	r2, [r2, #0]
 8001da0:	2108      	movs	r1, #8
 8001da2:	430a      	orrs	r2, r1
 8001da4:	701a      	strb	r2, [r3, #0]
					break;
 8001da6:	e029      	b.n	8001dfc <BSP_SX1272_setCR+0xd8>
		 case CR_6: config1 = config1 & 0b11010111;	// clears bits 5 & 3 from REG_MODEM_CONFIG1
 8001da8:	200e      	movs	r0, #14
 8001daa:	183b      	adds	r3, r7, r0
 8001dac:	183a      	adds	r2, r7, r0
 8001dae:	7812      	ldrb	r2, [r2, #0]
 8001db0:	2128      	movs	r1, #40	; 0x28
 8001db2:	438a      	bics	r2, r1
 8001db4:	701a      	strb	r2, [r3, #0]
					config1 = config1 | 0b00010000;	// sets bit 4 from REG_MODEM_CONFIG1
 8001db6:	183b      	adds	r3, r7, r0
 8001db8:	183a      	adds	r2, r7, r0
 8001dba:	7812      	ldrb	r2, [r2, #0]
 8001dbc:	2110      	movs	r1, #16
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	701a      	strb	r2, [r3, #0]
					break;
 8001dc2:	e01b      	b.n	8001dfc <BSP_SX1272_setCR+0xd8>
		 case CR_7: config1 = config1 & 0b11011111;	// clears bit 5 from REG_MODEM_CONFIG1
 8001dc4:	200e      	movs	r0, #14
 8001dc6:	183b      	adds	r3, r7, r0
 8001dc8:	183a      	adds	r2, r7, r0
 8001dca:	7812      	ldrb	r2, [r2, #0]
 8001dcc:	2120      	movs	r1, #32
 8001dce:	438a      	bics	r2, r1
 8001dd0:	701a      	strb	r2, [r3, #0]
					config1 = config1 | 0b00011000;	// sets bits 4 & 3 from REG_MODEM_CONFIG1
 8001dd2:	183b      	adds	r3, r7, r0
 8001dd4:	183a      	adds	r2, r7, r0
 8001dd6:	7812      	ldrb	r2, [r2, #0]
 8001dd8:	2118      	movs	r1, #24
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	701a      	strb	r2, [r3, #0]
					break;
 8001dde:	e00d      	b.n	8001dfc <BSP_SX1272_setCR+0xd8>
		 case CR_8: config1 = config1 & 0b11100111;	// clears bits 4 & 3 from REG_MODEM_CONFIG1
 8001de0:	200e      	movs	r0, #14
 8001de2:	183b      	adds	r3, r7, r0
 8001de4:	183a      	adds	r2, r7, r0
 8001de6:	7812      	ldrb	r2, [r2, #0]
 8001de8:	2118      	movs	r1, #24
 8001dea:	438a      	bics	r2, r1
 8001dec:	701a      	strb	r2, [r3, #0]
					config1 = config1 | 0b00100000;	// sets bit 5 from REG_MODEM_CONFIG1
 8001dee:	183b      	adds	r3, r7, r0
 8001df0:	183a      	adds	r2, r7, r0
 8001df2:	7812      	ldrb	r2, [r2, #0]
 8001df4:	2120      	movs	r1, #32
 8001df6:	430a      	orrs	r2, r1
 8001df8:	701a      	strb	r2, [r3, #0]
					break;
 8001dfa:	46c0      	nop			; (mov r8, r8)
	  }
	  BSP_SX1272_Write(REG_MODEM_CONFIG1, config1);		// Update config1
 8001dfc:	240e      	movs	r4, #14
 8001dfe:	193b      	adds	r3, r7, r4
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	0019      	movs	r1, r3
 8001e04:	201d      	movs	r0, #29
 8001e06:	f000 ffe9 	bl	8002ddc <BSP_SX1272_Write>

	  config1 = BSP_SX1272_Read(REG_MODEM_CONFIG1);
 8001e0a:	193c      	adds	r4, r7, r4
 8001e0c:	201d      	movs	r0, #29
 8001e0e:	f000 ffb7 	bl	8002d80 <BSP_SX1272_Read>
 8001e12:	0003      	movs	r3, r0
 8001e14:	7023      	strb	r3, [r4, #0]
	  // ((config1 >> 3) & 0b0000111) ---> take out bits 5-3 from REG_MODEM_CONFIG1 (=currentstate._codingRate)
	  switch(cod)
 8001e16:	1dfb      	adds	r3, r7, #7
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d035      	beq.n	8001e8a <BSP_SX1272_setCR+0x166>
 8001e1e:	dc4a      	bgt.n	8001eb6 <BSP_SX1272_setCR+0x192>
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d023      	beq.n	8001e6c <BSP_SX1272_setCR+0x148>
 8001e24:	dc47      	bgt.n	8001eb6 <BSP_SX1272_setCR+0x192>
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d002      	beq.n	8001e30 <BSP_SX1272_setCR+0x10c>
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d00f      	beq.n	8001e4e <BSP_SX1272_setCR+0x12a>
 8001e2e:	e042      	b.n	8001eb6 <BSP_SX1272_setCR+0x192>
	  {
		 case CR_5: if( ((config1 >> 3) & 0b0000111) == 0x01 )
 8001e30:	230e      	movs	r3, #14
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	08db      	lsrs	r3, r3, #3
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	001a      	movs	r2, r3
 8001e3c:	2307      	movs	r3, #7
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d131      	bne.n	8001ea8 <BSP_SX1272_setCR+0x184>
					{
						state = 0;
 8001e44:	230f      	movs	r3, #15
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001e4c:	e02c      	b.n	8001ea8 <BSP_SX1272_setCR+0x184>
		 case CR_6: if( ((config1 >> 3) & 0b0000111) == 0x02 )
 8001e4e:	230e      	movs	r3, #14
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	08db      	lsrs	r3, r3, #3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	001a      	movs	r2, r3
 8001e5a:	2307      	movs	r3, #7
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d124      	bne.n	8001eac <BSP_SX1272_setCR+0x188>
					{
						state = 0;
 8001e62:	230f      	movs	r3, #15
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001e6a:	e01f      	b.n	8001eac <BSP_SX1272_setCR+0x188>
		 case CR_7: if( ((config1 >> 3) & 0b0000111) == 0x03 )
 8001e6c:	230e      	movs	r3, #14
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	08db      	lsrs	r3, r3, #3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	001a      	movs	r2, r3
 8001e78:	2307      	movs	r3, #7
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d117      	bne.n	8001eb0 <BSP_SX1272_setCR+0x18c>
					{
						state = 0;
 8001e80:	230f      	movs	r3, #15
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001e88:	e012      	b.n	8001eb0 <BSP_SX1272_setCR+0x18c>
		 case CR_8: if( ((config1 >> 3) & 0b0000111) == 0x04 )
 8001e8a:	230e      	movs	r3, #14
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	08db      	lsrs	r3, r3, #3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	001a      	movs	r2, r3
 8001e96:	2307      	movs	r3, #7
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d10a      	bne.n	8001eb4 <BSP_SX1272_setCR+0x190>
					{
						state = 0;
 8001e9e:	230f      	movs	r3, #15
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001ea6:	e005      	b.n	8001eb4 <BSP_SX1272_setCR+0x190>
					break;
 8001ea8:	46c0      	nop			; (mov r8, r8)
 8001eaa:	e004      	b.n	8001eb6 <BSP_SX1272_setCR+0x192>
					break;
 8001eac:	46c0      	nop			; (mov r8, r8)
 8001eae:	e002      	b.n	8001eb6 <BSP_SX1272_setCR+0x192>
					break;
 8001eb0:	46c0      	nop			; (mov r8, r8)
 8001eb2:	e000      	b.n	8001eb6 <BSP_SX1272_setCR+0x192>
					break;
 8001eb4:	46c0      	nop			; (mov r8, r8)
	  }
  }

  if( BSP_SX1272_isCR(cod) )
 8001eb6:	1dfb      	adds	r3, r7, #7
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f7ff ff20 	bl	8001d00 <BSP_SX1272_isCR>
 8001ec0:	1e03      	subs	r3, r0, #0
 8001ec2:	d004      	beq.n	8001ece <BSP_SX1272_setCR+0x1aa>
  {
	  currentstate._codingRate = cod;
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <BSP_SX1272_setCR+0x1d0>)
 8001ec6:	1dfa      	adds	r2, r7, #7
 8001ec8:	7812      	ldrb	r2, [r2, #0]
 8001eca:	709a      	strb	r2, [r3, #2]
 8001ecc:	e003      	b.n	8001ed6 <BSP_SX1272_setCR+0x1b2>
		  my_printf("\r\n");
	  #endif
  }
  else
  {
	  state = 1;
 8001ece:	230f      	movs	r3, #15
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
	  #if (SX1272_debug_mode > 1)
		  my_printf("** There has been an error while configuring Coding Rate parameter **\r\n");
		  my_printf("\r\n");
	  #endif
  }
  BSP_SX1272_Write(REG_OP_MODE,st0);	// Getting back to previous status
 8001ed6:	230d      	movs	r3, #13
 8001ed8:	18fb      	adds	r3, r7, r3
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	0019      	movs	r1, r3
 8001ede:	2001      	movs	r0, #1
 8001ee0:	f000 ff7c 	bl	8002ddc <BSP_SX1272_Write>
  return state;
 8001ee4:	230f      	movs	r3, #15
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	b25b      	sxtb	r3, r3
}
 8001eec:	0018      	movs	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b004      	add	sp, #16
 8001ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef4:	2000005c 	.word	0x2000005c

08001ef8 <BSP_SX1272_isChannel>:
		  it's '0' if the CR value does not exist.
 Parameters:
   ch: frequency channel value to check.
*/
uint8_t	BSP_SX1272_isChannel(uint32_t ch)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	  my_printf("\r\n");
	  my_printf("Starting 'BSP_SX1272_isChannel'\r\n");
  #endif

  // Checking available values for currentstate._channel
  switch(ch)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a6c      	ldr	r2, [pc, #432]	; (80020b4 <BSP_SX1272_isChannel+0x1bc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d100      	bne.n	8001f0a <BSP_SX1272_isChannel+0x12>
 8001f08:	e0cc      	b.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a69      	ldr	r2, [pc, #420]	; (80020b4 <BSP_SX1272_isChannel+0x1bc>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d900      	bls.n	8001f14 <BSP_SX1272_isChannel+0x1c>
 8001f12:	e0c9      	b.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a68      	ldr	r2, [pc, #416]	; (80020b8 <BSP_SX1272_isChannel+0x1c0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d100      	bne.n	8001f1e <BSP_SX1272_isChannel+0x26>
 8001f1c:	e0c2      	b.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a65      	ldr	r2, [pc, #404]	; (80020b8 <BSP_SX1272_isChannel+0x1c0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d900      	bls.n	8001f28 <BSP_SX1272_isChannel+0x30>
 8001f26:	e0bf      	b.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a64      	ldr	r2, [pc, #400]	; (80020bc <BSP_SX1272_isChannel+0x1c4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d100      	bne.n	8001f32 <BSP_SX1272_isChannel+0x3a>
 8001f30:	e0b8      	b.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a61      	ldr	r2, [pc, #388]	; (80020bc <BSP_SX1272_isChannel+0x1c4>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d900      	bls.n	8001f3c <BSP_SX1272_isChannel+0x44>
 8001f3a:	e0b5      	b.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a60      	ldr	r2, [pc, #384]	; (80020c0 <BSP_SX1272_isChannel+0x1c8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d100      	bne.n	8001f46 <BSP_SX1272_isChannel+0x4e>
 8001f44:	e0ae      	b.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a5d      	ldr	r2, [pc, #372]	; (80020c0 <BSP_SX1272_isChannel+0x1c8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d900      	bls.n	8001f50 <BSP_SX1272_isChannel+0x58>
 8001f4e:	e0ab      	b.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a5c      	ldr	r2, [pc, #368]	; (80020c4 <BSP_SX1272_isChannel+0x1cc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d100      	bne.n	8001f5a <BSP_SX1272_isChannel+0x62>
 8001f58:	e0a4      	b.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a59      	ldr	r2, [pc, #356]	; (80020c4 <BSP_SX1272_isChannel+0x1cc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d900      	bls.n	8001f64 <BSP_SX1272_isChannel+0x6c>
 8001f62:	e0a1      	b.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a58      	ldr	r2, [pc, #352]	; (80020c8 <BSP_SX1272_isChannel+0x1d0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d100      	bne.n	8001f6e <BSP_SX1272_isChannel+0x76>
 8001f6c:	e09a      	b.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a55      	ldr	r2, [pc, #340]	; (80020c8 <BSP_SX1272_isChannel+0x1d0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d900      	bls.n	8001f78 <BSP_SX1272_isChannel+0x80>
 8001f76:	e097      	b.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a54      	ldr	r2, [pc, #336]	; (80020cc <BSP_SX1272_isChannel+0x1d4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d100      	bne.n	8001f82 <BSP_SX1272_isChannel+0x8a>
 8001f80:	e090      	b.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a51      	ldr	r2, [pc, #324]	; (80020cc <BSP_SX1272_isChannel+0x1d4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d900      	bls.n	8001f8c <BSP_SX1272_isChannel+0x94>
 8001f8a:	e08d      	b.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a50      	ldr	r2, [pc, #320]	; (80020d0 <BSP_SX1272_isChannel+0x1d8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d100      	bne.n	8001f96 <BSP_SX1272_isChannel+0x9e>
 8001f94:	e086      	b.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4d      	ldr	r2, [pc, #308]	; (80020d0 <BSP_SX1272_isChannel+0x1d8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d900      	bls.n	8001fa0 <BSP_SX1272_isChannel+0xa8>
 8001f9e:	e083      	b.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a4c      	ldr	r2, [pc, #304]	; (80020d4 <BSP_SX1272_isChannel+0x1dc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d100      	bne.n	8001faa <BSP_SX1272_isChannel+0xb2>
 8001fa8:	e07c      	b.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a49      	ldr	r2, [pc, #292]	; (80020d4 <BSP_SX1272_isChannel+0x1dc>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d900      	bls.n	8001fb4 <BSP_SX1272_isChannel+0xbc>
 8001fb2:	e079      	b.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a48      	ldr	r2, [pc, #288]	; (80020d8 <BSP_SX1272_isChannel+0x1e0>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d100      	bne.n	8001fbe <BSP_SX1272_isChannel+0xc6>
 8001fbc:	e072      	b.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a45      	ldr	r2, [pc, #276]	; (80020d8 <BSP_SX1272_isChannel+0x1e0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d900      	bls.n	8001fc8 <BSP_SX1272_isChannel+0xd0>
 8001fc6:	e06f      	b.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a44      	ldr	r2, [pc, #272]	; (80020dc <BSP_SX1272_isChannel+0x1e4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d100      	bne.n	8001fd2 <BSP_SX1272_isChannel+0xda>
 8001fd0:	e068      	b.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a41      	ldr	r2, [pc, #260]	; (80020dc <BSP_SX1272_isChannel+0x1e4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d900      	bls.n	8001fdc <BSP_SX1272_isChannel+0xe4>
 8001fda:	e065      	b.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a40      	ldr	r2, [pc, #256]	; (80020e0 <BSP_SX1272_isChannel+0x1e8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d100      	bne.n	8001fe6 <BSP_SX1272_isChannel+0xee>
 8001fe4:	e05e      	b.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a3d      	ldr	r2, [pc, #244]	; (80020e0 <BSP_SX1272_isChannel+0x1e8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d900      	bls.n	8001ff0 <BSP_SX1272_isChannel+0xf8>
 8001fee:	e05b      	b.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a3c      	ldr	r2, [pc, #240]	; (80020e4 <BSP_SX1272_isChannel+0x1ec>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d055      	beq.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a3a      	ldr	r2, [pc, #232]	; (80020e4 <BSP_SX1272_isChannel+0x1ec>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d853      	bhi.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a39      	ldr	r2, [pc, #228]	; (80020e8 <BSP_SX1272_isChannel+0x1f0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d04d      	beq.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a37      	ldr	r2, [pc, #220]	; (80020e8 <BSP_SX1272_isChannel+0x1f0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d84b      	bhi.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a36      	ldr	r2, [pc, #216]	; (80020ec <BSP_SX1272_isChannel+0x1f4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d045      	beq.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a34      	ldr	r2, [pc, #208]	; (80020ec <BSP_SX1272_isChannel+0x1f4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d843      	bhi.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a33      	ldr	r2, [pc, #204]	; (80020f0 <BSP_SX1272_isChannel+0x1f8>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d03d      	beq.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a31      	ldr	r2, [pc, #196]	; (80020f0 <BSP_SX1272_isChannel+0x1f8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d83b      	bhi.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	23d9      	movs	r3, #217	; 0xd9
 8002034:	041b      	lsls	r3, r3, #16
 8002036:	429a      	cmp	r2, r3
 8002038:	d034      	beq.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	23d9      	movs	r3, #217	; 0xd9
 800203e:	041b      	lsls	r3, r3, #16
 8002040:	429a      	cmp	r2, r3
 8002042:	d831      	bhi.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a2b      	ldr	r2, [pc, #172]	; (80020f4 <BSP_SX1272_isChannel+0x1fc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d02b      	beq.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a29      	ldr	r2, [pc, #164]	; (80020f4 <BSP_SX1272_isChannel+0x1fc>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d829      	bhi.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a28      	ldr	r2, [pc, #160]	; (80020f8 <BSP_SX1272_isChannel+0x200>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d023      	beq.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a26      	ldr	r2, [pc, #152]	; (80020f8 <BSP_SX1272_isChannel+0x200>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d821      	bhi.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a25      	ldr	r2, [pc, #148]	; (80020fc <BSP_SX1272_isChannel+0x204>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d01b      	beq.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a23      	ldr	r2, [pc, #140]	; (80020fc <BSP_SX1272_isChannel+0x204>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d819      	bhi.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a22      	ldr	r2, [pc, #136]	; (8002100 <BSP_SX1272_isChannel+0x208>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d013      	beq.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a20      	ldr	r2, [pc, #128]	; (8002100 <BSP_SX1272_isChannel+0x208>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d811      	bhi.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a1f      	ldr	r2, [pc, #124]	; (8002104 <BSP_SX1272_isChannel+0x20c>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00b      	beq.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a1d      	ldr	r2, [pc, #116]	; (8002104 <BSP_SX1272_isChannel+0x20c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d809      	bhi.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a1c      	ldr	r2, [pc, #112]	; (8002108 <BSP_SX1272_isChannel+0x210>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d003      	beq.n	80020a4 <BSP_SX1272_isChannel+0x1ac>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a1b      	ldr	r2, [pc, #108]	; (800210c <BSP_SX1272_isChannel+0x214>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d101      	bne.n	80020a8 <BSP_SX1272_isChannel+0x1b0>
	  case CH_07_900:
	  case CH_08_900:
	  case CH_09_900:
	  case CH_10_900:
	  case CH_11_900:
	  case CH_12_900:	return 1;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <BSP_SX1272_isChannel+0x1b2>
						break;

	  default:			return 0;
 80020a8:	2300      	movs	r3, #0
  }
  #if (SX1272_debug_mode > 1)
	  my_printf("## Finished 'BSP_SX1272_isChannel' ##\r\n");
	  my_printf("\r\n");
  #endif
}
 80020aa:	0018      	movs	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	b002      	add	sp, #8
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	00e7b5c2 	.word	0x00e7b5c2
 80020b8:	00e72b85 	.word	0x00e72b85
 80020bc:	00e6a147 	.word	0x00e6a147
 80020c0:	00e6170a 	.word	0x00e6170a
 80020c4:	00e58ccc 	.word	0x00e58ccc
 80020c8:	00e5028f 	.word	0x00e5028f
 80020cc:	00e4c000 	.word	0x00e4c000
 80020d0:	00e47851 	.word	0x00e47851
 80020d4:	00e3ee14 	.word	0x00e3ee14
 80020d8:	00e363d7 	.word	0x00e363d7
 80020dc:	00e2d999 	.word	0x00e2d999
 80020e0:	00e24f5c 	.word	0x00e24f5c
 80020e4:	00e1c51e 	.word	0x00e1c51e
 80020e8:	00d92000 	.word	0x00d92000
 80020ec:	00d91333 	.word	0x00d91333
 80020f0:	00d90666 	.word	0x00d90666
 80020f4:	00d8c000 	.word	0x00d8c000
 80020f8:	00d8accc 	.word	0x00d8accc
 80020fc:	00d89999 	.word	0x00d89999
 8002100:	00d88666 	.word	0x00d88666
 8002104:	00d87333 	.word	0x00d87333
 8002108:	00d84ccc 	.word	0x00d84ccc
 800210c:	00d86000 	.word	0x00d86000

08002110 <BSP_SX1272_setChannel>:
   state = -1 --> Forbidden command for this protocol
 Parameters:
   ch: frequency channel value to set in configuration.
*/
int8_t BSP_SX1272_setChannel(uint32_t ch)
{
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b089      	sub	sp, #36	; 0x24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint8_t st0;
  int8_t state = 2;
 8002118:	231f      	movs	r3, #31
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	2202      	movs	r2, #2
 800211e:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'setChannel'\r\n");
  #endif

  st0 = BSP_SX1272_Read(REG_OP_MODE);	// Save the previous status
 8002120:	231e      	movs	r3, #30
 8002122:	18fc      	adds	r4, r7, r3
 8002124:	2001      	movs	r0, #1
 8002126:	f000 fe2b 	bl	8002d80 <BSP_SX1272_Read>
 800212a:	0003      	movs	r3, r0
 800212c:	7023      	strb	r3, [r4, #0]
  if( currentstate._modem == LORA )
 800212e:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <BSP_SX1272_setChannel+0x108>)
 8002130:	7f1b      	ldrb	r3, [r3, #28]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d104      	bne.n	8002140 <BSP_SX1272_setChannel+0x30>
  {
	  // LoRa Stdby mode in order to write in registers
	  BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);
 8002136:	2181      	movs	r1, #129	; 0x81
 8002138:	2001      	movs	r0, #1
 800213a:	f000 fe4f 	bl	8002ddc <BSP_SX1272_Write>
 800213e:	e003      	b.n	8002148 <BSP_SX1272_setChannel+0x38>
  }
  else
  {
	  // FSK Stdby mode in order to write in registers
	  BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);
 8002140:	2101      	movs	r1, #1
 8002142:	2001      	movs	r0, #1
 8002144:	f000 fe4a 	bl	8002ddc <BSP_SX1272_Write>
  }

  freq3 = ((ch >> 16) & 0x0FF);		// frequency channel MSB
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	0c1b      	lsrs	r3, r3, #16
 800214c:	22ff      	movs	r2, #255	; 0xff
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
  freq2 = ((ch >> 8) & 0x0FF);		// frequency channel MIB
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	22ff      	movs	r2, #255	; 0xff
 8002158:	4013      	ands	r3, r2
 800215a:	617b      	str	r3, [r7, #20]
  freq1 = (ch & 0xFF);				// frequency channel LSB
 800215c:	2413      	movs	r4, #19
 800215e:	193b      	adds	r3, r7, r4
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	701a      	strb	r2, [r3, #0]

  BSP_SX1272_Write(REG_FRF_MSB, freq3);
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	0019      	movs	r1, r3
 800216a:	2006      	movs	r0, #6
 800216c:	f000 fe36 	bl	8002ddc <BSP_SX1272_Write>
  BSP_SX1272_Write(REG_FRF_MID, freq2);
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	0019      	movs	r1, r3
 8002176:	2007      	movs	r0, #7
 8002178:	f000 fe30 	bl	8002ddc <BSP_SX1272_Write>
  BSP_SX1272_Write(REG_FRF_LSB, freq1);
 800217c:	193b      	adds	r3, r7, r4
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	0019      	movs	r1, r3
 8002182:	2008      	movs	r0, #8
 8002184:	f000 fe2a 	bl	8002ddc <BSP_SX1272_Write>

  // storing MSB in freq channel value
  freq3 = (BSP_SX1272_Read(REG_FRF_MSB));
 8002188:	2006      	movs	r0, #6
 800218a:	f000 fdf9 	bl	8002d80 <BSP_SX1272_Read>
 800218e:	0003      	movs	r3, r0
 8002190:	61bb      	str	r3, [r7, #24]
  freq = (freq3 << 8) & 0xFFFFFF;
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	021b      	lsls	r3, r3, #8
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	60fb      	str	r3, [r7, #12]

  // storing MID in freq channel value
  freq2 = (BSP_SX1272_Read(REG_FRF_MID));
 800219c:	2007      	movs	r0, #7
 800219e:	f000 fdef 	bl	8002d80 <BSP_SX1272_Read>
 80021a2:	0003      	movs	r3, r0
 80021a4:	617b      	str	r3, [r7, #20]
  freq = (freq << 8) + ((freq2 << 8) & 0xFFFFFF);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	021a      	lsls	r2, r3, #8
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	021b      	lsls	r3, r3, #8
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	18d3      	adds	r3, r2, r3
 80021b4:	60fb      	str	r3, [r7, #12]

  // storing LSB in freq channel value
  freq = freq + ((BSP_SX1272_Read(REG_FRF_LSB)) & 0xFFFFFF);
 80021b6:	2008      	movs	r0, #8
 80021b8:	f000 fde2 	bl	8002d80 <BSP_SX1272_Read>
 80021bc:	0003      	movs	r3, r0
 80021be:	001a      	movs	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	189b      	adds	r3, r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]

  if( freq == ch )
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d107      	bne.n	80021de <BSP_SX1272_setChannel+0xce>
  {
    state = 0;
 80021ce:	231f      	movs	r3, #31
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
    currentstate._channel = ch;
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <BSP_SX1272_setChannel+0x108>)
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	e003      	b.n	80021e6 <BSP_SX1272_setChannel+0xd6>
		my_printf("\r\n");
	#endif
  }
  else
  {
    state = 1;
 80021de:	231f      	movs	r3, #31
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	2201      	movs	r2, #1
 80021e4:	701a      	strb	r2, [r3, #0]
  }

  if( !BSP_SX1272_isChannel(ch) )
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	0018      	movs	r0, r3
 80021ea:	f7ff fe85 	bl	8001ef8 <BSP_SX1272_isChannel>
 80021ee:	1e03      	subs	r3, r0, #0
 80021f0:	d103      	bne.n	80021fa <BSP_SX1272_setChannel+0xea>
  {
	 state = -1;
 80021f2:	231f      	movs	r3, #31
 80021f4:	18fb      	adds	r3, r7, r3
 80021f6:	22ff      	movs	r2, #255	; 0xff
 80021f8:	701a      	strb	r2, [r3, #0]
		 my_printf("is not a correct value **\r\n");
		 my_printf("\r\n");
	 #endif
  }

  BSP_SX1272_Write(REG_OP_MODE, st0);	// Getting back to previous status
 80021fa:	231e      	movs	r3, #30
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	0019      	movs	r1, r3
 8002202:	2001      	movs	r0, #1
 8002204:	f000 fdea 	bl	8002ddc <BSP_SX1272_Write>
  return state;
 8002208:	231f      	movs	r3, #31
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b25b      	sxtb	r3, r3
}
 8002210:	0018      	movs	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	b009      	add	sp, #36	; 0x24
 8002216:	bd90      	pop	{r4, r7, pc}
 8002218:	2000005c 	.word	0x2000005c

0800221c <BSP_SX1272_setPower>:
 Parameters:
   pow: power option to set in configuration. The input value range is from
   0 to 14 dBm.
*/
int8_t BSP_SX1272_setPower(uint8_t pow)
{
 800221c:	b5b0      	push	{r4, r5, r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	0002      	movs	r2, r0
 8002224:	1dfb      	adds	r3, r7, #7
 8002226:	701a      	strb	r2, [r3, #0]
  uint8_t st0;
  int8_t state = 2;
 8002228:	230f      	movs	r3, #15
 800222a:	18fb      	adds	r3, r7, r3
 800222c:	2202      	movs	r2, #2
 800222e:	701a      	strb	r2, [r3, #0]
  uint8_t value = 0x00;
 8002230:	230e      	movs	r3, #14
 8002232:	18fb      	adds	r3, r7, r3
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'setPower'\r\n");
  #endif

  st0 = BSP_SX1272_Read(REG_OP_MODE);	  // Save the previous status
 8002238:	230d      	movs	r3, #13
 800223a:	18fc      	adds	r4, r7, r3
 800223c:	2001      	movs	r0, #1
 800223e:	f000 fd9f 	bl	8002d80 <BSP_SX1272_Read>
 8002242:	0003      	movs	r3, r0
 8002244:	7023      	strb	r3, [r4, #0]
  if( currentstate._modem == LORA )
 8002246:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <BSP_SX1272_setPower+0xb4>)
 8002248:	7f1b      	ldrb	r3, [r3, #28]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d104      	bne.n	8002258 <BSP_SX1272_setPower+0x3c>
  { // LoRa Stdby mode to write in registers
	  BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);
 800224e:	2181      	movs	r1, #129	; 0x81
 8002250:	2001      	movs	r0, #1
 8002252:	f000 fdc3 	bl	8002ddc <BSP_SX1272_Write>
 8002256:	e003      	b.n	8002260 <BSP_SX1272_setPower+0x44>
  }
  else
  { // FSK Stdby mode to write in registers
	  BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);
 8002258:	2101      	movs	r1, #1
 800225a:	2001      	movs	r0, #1
 800225c:	f000 fdbe 	bl	8002ddc <BSP_SX1272_Write>
  }

  if ( (pow >= 0) && (pow < 15) )
 8002260:	1dfb      	adds	r3, r7, #7
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b0e      	cmp	r3, #14
 8002266:	d804      	bhi.n	8002272 <BSP_SX1272_setPower+0x56>
  {
	  currentstate._power = pow;
 8002268:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <BSP_SX1272_setPower+0xb4>)
 800226a:	1dfa      	adds	r2, r7, #7
 800226c:	7812      	ldrb	r2, [r2, #0]
 800226e:	721a      	strb	r2, [r3, #8]
 8002270:	e003      	b.n	800227a <BSP_SX1272_setPower+0x5e>
  }
  else
  {
	  state = -1;
 8002272:	230f      	movs	r3, #15
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	22ff      	movs	r2, #255	; 0xff
 8002278:	701a      	strb	r2, [r3, #0]
		  my_printf("## Power value is not valid ##\r\n");
		  my_printf("\r\n");
	  #endif
  }

  BSP_SX1272_Write(REG_PA_CONFIG, currentstate._power);	// Setting output power value
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <BSP_SX1272_setPower+0xb4>)
 800227c:	7a1b      	ldrb	r3, [r3, #8]
 800227e:	0019      	movs	r1, r3
 8002280:	2009      	movs	r0, #9
 8002282:	f000 fdab 	bl	8002ddc <BSP_SX1272_Write>
  value = BSP_SX1272_Read(REG_PA_CONFIG);
 8002286:	250e      	movs	r5, #14
 8002288:	197c      	adds	r4, r7, r5
 800228a:	2009      	movs	r0, #9
 800228c:	f000 fd78 	bl	8002d80 <BSP_SX1272_Read>
 8002290:	0003      	movs	r3, r0
 8002292:	7023      	strb	r3, [r4, #0]

  if( value == currentstate._power )
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <BSP_SX1272_setPower+0xb4>)
 8002296:	7a1b      	ldrb	r3, [r3, #8]
 8002298:	197a      	adds	r2, r7, r5
 800229a:	7812      	ldrb	r2, [r2, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d104      	bne.n	80022aa <BSP_SX1272_setPower+0x8e>
  {
	  state = 0;
 80022a0:	230f      	movs	r3, #15
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
 80022a8:	e003      	b.n	80022b2 <BSP_SX1272_setPower+0x96>
		  my_printf("\r\n");
	  #endif
  }
  else
  {
	  state = 1;
 80022aa:	230f      	movs	r3, #15
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
  }

  BSP_SX1272_Write(REG_OP_MODE, st0);	// Getting back to previous status
 80022b2:	230d      	movs	r3, #13
 80022b4:	18fb      	adds	r3, r7, r3
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	0019      	movs	r1, r3
 80022ba:	2001      	movs	r0, #1
 80022bc:	f000 fd8e 	bl	8002ddc <BSP_SX1272_Write>
  return state;
 80022c0:	230f      	movs	r3, #15
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	b25b      	sxtb	r3, r3
}
 80022c8:	0018      	movs	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b004      	add	sp, #16
 80022ce:	bdb0      	pop	{r4, r5, r7, pc}
 80022d0:	2000005c 	.word	0x2000005c

080022d4 <BSP_SX1272_setPreambleLength>:
   state = 0  --> The command has been executed with no errors
 Parameters:
   l: length value to set as preamble length.
*/
uint8_t BSP_SX1272_setPreambleLength(uint16_t l)
{
 80022d4:	b5b0      	push	{r4, r5, r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	0002      	movs	r2, r0
 80022dc:	1dbb      	adds	r3, r7, #6
 80022de:	801a      	strh	r2, [r3, #0]
	uint8_t st0;
	uint8_t p_length;
	int8_t state = 2;
 80022e0:	250f      	movs	r5, #15
 80022e2:	197b      	adds	r3, r7, r5
 80022e4:	2202      	movs	r2, #2
 80022e6:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'setPreambleLength'\r\n");
	#endif

	st0 = BSP_SX1272_Read(REG_OP_MODE);	// Save the previous status
 80022e8:	230e      	movs	r3, #14
 80022ea:	18fc      	adds	r4, r7, r3
 80022ec:	2001      	movs	r0, #1
 80022ee:	f000 fd47 	bl	8002d80 <BSP_SX1272_Read>
 80022f2:	0003      	movs	r3, r0
 80022f4:	7023      	strb	r3, [r4, #0]
	state = 1;
 80022f6:	197b      	adds	r3, r7, r5
 80022f8:	2201      	movs	r2, #1
 80022fa:	701a      	strb	r2, [r3, #0]
	if( currentstate._modem == LORA )
 80022fc:	4b26      	ldr	r3, [pc, #152]	; (8002398 <BSP_SX1272_setPreambleLength+0xc4>)
 80022fe:	7f1b      	ldrb	r3, [r3, #28]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d11c      	bne.n	800233e <BSP_SX1272_setPreambleLength+0x6a>
  	{ // LoRa mode
  		BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);    // Set Standby mode to write in registers
 8002304:	2181      	movs	r1, #129	; 0x81
 8002306:	2001      	movs	r0, #1
 8002308:	f000 fd68 	bl	8002ddc <BSP_SX1272_Write>
  		p_length = ((l >> 8) & 0x0FF);
 800230c:	1dbb      	adds	r3, r7, #6
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	b29a      	uxth	r2, r3
 8002314:	240d      	movs	r4, #13
 8002316:	193b      	adds	r3, r7, r4
 8002318:	701a      	strb	r2, [r3, #0]
  		// Storing MSB preamble length in LoRa mode
		BSP_SX1272_Write(REG_PREAMBLE_MSB_LORA, p_length);
 800231a:	193b      	adds	r3, r7, r4
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	0019      	movs	r1, r3
 8002320:	2020      	movs	r0, #32
 8002322:	f000 fd5b 	bl	8002ddc <BSP_SX1272_Write>
		p_length = (l & 0x0FF);
 8002326:	0021      	movs	r1, r4
 8002328:	187b      	adds	r3, r7, r1
 800232a:	1dba      	adds	r2, r7, #6
 800232c:	8812      	ldrh	r2, [r2, #0]
 800232e:	701a      	strb	r2, [r3, #0]
		// Storing LSB preamble length in LoRa mode
		BSP_SX1272_Write(REG_PREAMBLE_LSB_LORA, p_length);
 8002330:	187b      	adds	r3, r7, r1
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	0019      	movs	r1, r3
 8002336:	2021      	movs	r0, #33	; 0x21
 8002338:	f000 fd50 	bl	8002ddc <BSP_SX1272_Write>
 800233c:	e01b      	b.n	8002376 <BSP_SX1272_setPreambleLength+0xa2>
	}
	else
	{ // FSK mode
		BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);    // Set Standby mode to write in registers
 800233e:	2101      	movs	r1, #1
 8002340:	2001      	movs	r0, #1
 8002342:	f000 fd4b 	bl	8002ddc <BSP_SX1272_Write>
		p_length = ((l >> 8) & 0x0FF);
 8002346:	1dbb      	adds	r3, r7, #6
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	b29a      	uxth	r2, r3
 800234e:	240d      	movs	r4, #13
 8002350:	193b      	adds	r3, r7, r4
 8002352:	701a      	strb	r2, [r3, #0]
  		// Storing MSB preamble length in FSK mode
		BSP_SX1272_Write(REG_PREAMBLE_MSB_FSK, p_length);
 8002354:	193b      	adds	r3, r7, r4
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	0019      	movs	r1, r3
 800235a:	2025      	movs	r0, #37	; 0x25
 800235c:	f000 fd3e 	bl	8002ddc <BSP_SX1272_Write>
		p_length = (l & 0x0FF);
 8002360:	0021      	movs	r1, r4
 8002362:	187b      	adds	r3, r7, r1
 8002364:	1dba      	adds	r2, r7, #6
 8002366:	8812      	ldrh	r2, [r2, #0]
 8002368:	701a      	strb	r2, [r3, #0]
  		// Storing LSB preamble length in FSK mode
		BSP_SX1272_Write(REG_PREAMBLE_LSB_FSK, p_length);
 800236a:	187b      	adds	r3, r7, r1
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	0019      	movs	r1, r3
 8002370:	2026      	movs	r0, #38	; 0x26
 8002372:	f000 fd33 	bl	8002ddc <BSP_SX1272_Write>
	}

	state = 0;
 8002376:	240f      	movs	r4, #15
 8002378:	193b      	adds	r3, r7, r4
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
		my_printf("%d",l);
		my_printf(" has been successfully set ##\r\n");
		my_printf("\r\n");
	#endif

	BSP_SX1272_Write(REG_OP_MODE, st0);	// Getting back to previous status
 800237e:	230e      	movs	r3, #14
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	0019      	movs	r1, r3
 8002386:	2001      	movs	r0, #1
 8002388:	f000 fd28 	bl	8002ddc <BSP_SX1272_Write>
	return state;
 800238c:	193b      	adds	r3, r7, r4
 800238e:	781b      	ldrb	r3, [r3, #0]
}
 8002390:	0018      	movs	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	b004      	add	sp, #16
 8002396:	bdb0      	pop	{r4, r5, r7, pc}
 8002398:	2000005c 	.word	0x2000005c

0800239c <BSP_SX1272_setPacketLength>:
   state = -1 --> Forbidden command for this protocol
 Parameters:
   l: length value to set as payload length.
*/
int8_t BSP_SX1272_setPacketLength(uint8_t l)
{
 800239c:	b5b0      	push	{r4, r5, r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	0002      	movs	r2, r0
 80023a4:	1dfb      	adds	r3, r7, #7
 80023a6:	701a      	strb	r2, [r3, #0]
	uint8_t st0;
	uint8_t value = 0x00;
 80023a8:	250f      	movs	r5, #15
 80023aa:	197b      	adds	r3, r7, r5
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
	int8_t state = 2;
 80023b0:	230e      	movs	r3, #14
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	2202      	movs	r2, #2
 80023b6:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'setPacketLength'\r\n");
	#endif

	st0 = BSP_SX1272_Read(REG_OP_MODE);	// Save the previous status
 80023b8:	230d      	movs	r3, #13
 80023ba:	18fc      	adds	r4, r7, r3
 80023bc:	2001      	movs	r0, #1
 80023be:	f000 fcdf 	bl	8002d80 <BSP_SX1272_Read>
 80023c2:	0003      	movs	r3, r0
 80023c4:	7023      	strb	r3, [r4, #0]
	//----
	//	truncPayload(l);
	currentstate.packet_sent.length = l;
 80023c6:	4b26      	ldr	r3, [pc, #152]	; (8002460 <BSP_SX1272_setPacketLength+0xc4>)
 80023c8:	1dfa      	adds	r2, r7, #7
 80023ca:	2120      	movs	r1, #32
 80023cc:	7812      	ldrb	r2, [r2, #0]
 80023ce:	545a      	strb	r2, [r3, r1]
	//
	if( currentstate._modem == LORA )
 80023d0:	4b23      	ldr	r3, [pc, #140]	; (8002460 <BSP_SX1272_setPacketLength+0xc4>)
 80023d2:	7f1b      	ldrb	r3, [r3, #28]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d111      	bne.n	80023fc <BSP_SX1272_setPacketLength+0x60>
  	{ // LORA mode
  		BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);    // Set LoRa Standby mode to write in registers
 80023d8:	2181      	movs	r1, #129	; 0x81
 80023da:	2001      	movs	r0, #1
 80023dc:	f000 fcfe 	bl	8002ddc <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_PAYLOAD_LENGTH_LORA, currentstate.packet_sent.length);
 80023e0:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <BSP_SX1272_setPacketLength+0xc4>)
 80023e2:	2220      	movs	r2, #32
 80023e4:	5c9b      	ldrb	r3, [r3, r2]
 80023e6:	0019      	movs	r1, r3
 80023e8:	2022      	movs	r0, #34	; 0x22
 80023ea:	f000 fcf7 	bl	8002ddc <BSP_SX1272_Write>
		// Storing payload length in LoRa mode
		value = BSP_SX1272_Read(REG_PAYLOAD_LENGTH_LORA);
 80023ee:	197c      	adds	r4, r7, r5
 80023f0:	2022      	movs	r0, #34	; 0x22
 80023f2:	f000 fcc5 	bl	8002d80 <BSP_SX1272_Read>
 80023f6:	0003      	movs	r3, r0
 80023f8:	7023      	strb	r3, [r4, #0]
 80023fa:	e011      	b.n	8002420 <BSP_SX1272_setPacketLength+0x84>
	}
	else
	{ // FSK mode
		BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);    //  Set FSK Standby mode to write in registers
 80023fc:	2101      	movs	r1, #1
 80023fe:	2001      	movs	r0, #1
 8002400:	f000 fcec 	bl	8002ddc <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_PAYLOAD_LENGTH_FSK, currentstate.packet_sent.length);
 8002404:	4b16      	ldr	r3, [pc, #88]	; (8002460 <BSP_SX1272_setPacketLength+0xc4>)
 8002406:	2220      	movs	r2, #32
 8002408:	5c9b      	ldrb	r3, [r3, r2]
 800240a:	0019      	movs	r1, r3
 800240c:	2032      	movs	r0, #50	; 0x32
 800240e:	f000 fce5 	bl	8002ddc <BSP_SX1272_Write>
		// Storing payload length in FSK mode
		value = BSP_SX1272_Read(REG_PAYLOAD_LENGTH_FSK);
 8002412:	230f      	movs	r3, #15
 8002414:	18fc      	adds	r4, r7, r3
 8002416:	2032      	movs	r0, #50	; 0x32
 8002418:	f000 fcb2 	bl	8002d80 <BSP_SX1272_Read>
 800241c:	0003      	movs	r3, r0
 800241e:	7023      	strb	r3, [r4, #0]
	}

	if( currentstate.packet_sent.length == value )
 8002420:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <BSP_SX1272_setPacketLength+0xc4>)
 8002422:	2220      	movs	r2, #32
 8002424:	5c9b      	ldrb	r3, [r3, r2]
 8002426:	220f      	movs	r2, #15
 8002428:	18ba      	adds	r2, r7, r2
 800242a:	7812      	ldrb	r2, [r2, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d104      	bne.n	800243a <BSP_SX1272_setPacketLength+0x9e>
	{
		state = 0;
 8002430:	230e      	movs	r3, #14
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	e003      	b.n	8002442 <BSP_SX1272_setPacketLength+0xa6>
			my_printf("\r\n");
		#endif
	}
	else
	{
		state = 1;
 800243a:	230e      	movs	r3, #14
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
	}

	BSP_SX1272_Write(REG_OP_MODE, st0);	// Getting back to previous status
 8002442:	230d      	movs	r3, #13
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	0019      	movs	r1, r3
 800244a:	2001      	movs	r0, #1
 800244c:	f000 fcc6 	bl	8002ddc <BSP_SX1272_Write>
  	//BSP_DELAY_ms(250);
	return state;
 8002450:	230e      	movs	r3, #14
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b25b      	sxtb	r3, r3
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	b004      	add	sp, #16
 800245e:	bdb0      	pop	{r4, r5, r7, pc}
 8002460:	2000005c 	.word	0x2000005c

08002464 <BSP_SX1272_setNodeAddress>:
   state = -1 --> Forbidden command for this protocol
 Parameters:
   addr: address value to set as node address.
*/
int8_t BSP_SX1272_setNodeAddress(uint8_t addr)
{
 8002464:	b5b0      	push	{r4, r5, r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	0002      	movs	r2, r0
 800246c:	1dfb      	adds	r3, r7, #7
 800246e:	701a      	strb	r2, [r3, #0]
	uint8_t st0;
	uint8_t value;
	uint8_t state = 2;
 8002470:	250f      	movs	r5, #15
 8002472:	197b      	adds	r3, r7, r5
 8002474:	2202      	movs	r2, #2
 8002476:	701a      	strb	r2, [r3, #0]
		#endif
	}
	else
	{
		// Saving node address
		currentstate._nodeAddress = addr;
 8002478:	4b26      	ldr	r3, [pc, #152]	; (8002514 <BSP_SX1272_setNodeAddress+0xb0>)
 800247a:	1dfa      	adds	r2, r7, #7
 800247c:	7812      	ldrb	r2, [r2, #0]
 800247e:	749a      	strb	r2, [r3, #18]
		st0 = BSP_SX1272_Read(REG_OP_MODE);	  // Save the previous status
 8002480:	230e      	movs	r3, #14
 8002482:	18fc      	adds	r4, r7, r3
 8002484:	2001      	movs	r0, #1
 8002486:	f000 fc7b 	bl	8002d80 <BSP_SX1272_Read>
 800248a:	0003      	movs	r3, r0
 800248c:	7023      	strb	r3, [r4, #0]

		// in LoRa mode
		state = 0;
 800248e:	197b      	adds	r3, r7, r5
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]

		if( currentstate._modem == LORA )
 8002494:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <BSP_SX1272_setNodeAddress+0xb0>)
 8002496:	7f1b      	ldrb	r3, [r3, #28]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d103      	bne.n	80024a4 <BSP_SX1272_setNodeAddress+0x40>
		{
			// in LoRa mode, address is SW controlled
			// set status to success
			state = 0;
 800249c:	197b      	adds	r3, r7, r5
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	e02e      	b.n	8002502 <BSP_SX1272_setNodeAddress+0x9e>
		}
		else if( currentstate._modem == FSK )
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <BSP_SX1272_setNodeAddress+0xb0>)
 80024a6:	7f1b      	ldrb	r3, [r3, #28]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d12a      	bne.n	8002502 <BSP_SX1272_setNodeAddress+0x9e>
		{
			//Set FSK Standby mode to write in registers
			BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);
 80024ac:	2101      	movs	r1, #1
 80024ae:	2001      	movs	r0, #1
 80024b0:	f000 fc94 	bl	8002ddc <BSP_SX1272_Write>

			// Storing node and broadcast address
			BSP_SX1272_Write(REG_NODE_ADRS, addr);
 80024b4:	1dfb      	adds	r3, r7, #7
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	0019      	movs	r1, r3
 80024ba:	2033      	movs	r0, #51	; 0x33
 80024bc:	f000 fc8e 	bl	8002ddc <BSP_SX1272_Write>
			BSP_SX1272_Write(REG_BROADCAST_ADRS, BROADCAST_0);
 80024c0:	2100      	movs	r1, #0
 80024c2:	2034      	movs	r0, #52	; 0x34
 80024c4:	f000 fc8a 	bl	8002ddc <BSP_SX1272_Write>

			value = BSP_SX1272_Read(REG_NODE_ADRS);
 80024c8:	250d      	movs	r5, #13
 80024ca:	197c      	adds	r4, r7, r5
 80024cc:	2033      	movs	r0, #51	; 0x33
 80024ce:	f000 fc57 	bl	8002d80 <BSP_SX1272_Read>
 80024d2:	0003      	movs	r3, r0
 80024d4:	7023      	strb	r3, [r4, #0]
			BSP_SX1272_Write(REG_OP_MODE, st0);		// Getting back to previous status
 80024d6:	230e      	movs	r3, #14
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	0019      	movs	r1, r3
 80024de:	2001      	movs	r0, #1
 80024e0:	f000 fc7c 	bl	8002ddc <BSP_SX1272_Write>

			if( value == currentstate._nodeAddress )
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <BSP_SX1272_setNodeAddress+0xb0>)
 80024e6:	7c9b      	ldrb	r3, [r3, #18]
 80024e8:	197a      	adds	r2, r7, r5
 80024ea:	7812      	ldrb	r2, [r2, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d104      	bne.n	80024fa <BSP_SX1272_setNodeAddress+0x96>
			{
				state = 0;
 80024f0:	230f      	movs	r3, #15
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
 80024f8:	e003      	b.n	8002502 <BSP_SX1272_setNodeAddress+0x9e>
					my_printf("\r\n");
				#endif
			}
			else
			{
				state = 1;
 80024fa:	230f      	movs	r3, #15
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
					my_printf("\r\n");
				#endif
			}
		}
	}
	return state;
 8002502:	230f      	movs	r3, #15
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	b25b      	sxtb	r3, r3
}
 800250a:	0018      	movs	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	b004      	add	sp, #16
 8002510:	bdb0      	pop	{r4, r5, r7, pc}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	2000005c 	.word	0x2000005c

08002518 <BSP_SX1272_setMaxCurrent>:
	Imax = 45+5*OcpTrim [mA] 	if OcpTrim <= 15 (120 mA) /
	Imax = -30+10*OcpTrim [mA] 	if 15 < OcpTrim <= 27 (130 to 240 mA)
	Imax = 240mA 				for higher settings
*/
int8_t BSP_SX1272_setMaxCurrent(uint8_t rate)
{
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	0002      	movs	r2, r0
 8002520:	1dfb      	adds	r3, r7, #7
 8002522:	701a      	strb	r2, [r3, #0]
	int8_t state = 2;
 8002524:	210f      	movs	r1, #15
 8002526:	187b      	adds	r3, r7, r1
 8002528:	2202      	movs	r2, #2
 800252a:	701a      	strb	r2, [r3, #0]
		my_printf("\r\n");
		my_printf("Starting 'setMaxCurrent'\r\n");
	#endif

	// Maximum rate value = 0x1B, because maximum current supply = 240 mA
	if (rate > 0x1B)
 800252c:	1dfb      	adds	r3, r7, #7
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b1b      	cmp	r3, #27
 8002532:	d903      	bls.n	800253c <BSP_SX1272_setMaxCurrent+0x24>
	{
		state = -1;
 8002534:	187b      	adds	r3, r7, r1
 8002536:	22ff      	movs	r2, #255	; 0xff
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	e02e      	b.n	800259a <BSP_SX1272_setMaxCurrent+0x82>
		#endif
	}
	else
	{
		// Enable Over Current Protection
		rate |= 0b00100000;
 800253c:	1dfb      	adds	r3, r7, #7
 800253e:	1dfa      	adds	r2, r7, #7
 8002540:	7812      	ldrb	r2, [r2, #0]
 8002542:	2120      	movs	r1, #32
 8002544:	430a      	orrs	r2, r1
 8002546:	701a      	strb	r2, [r3, #0]

		state = 1;
 8002548:	230f      	movs	r3, #15
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
		st0 = BSP_SX1272_Read(REG_OP_MODE);	// Save the previous status
 8002550:	230e      	movs	r3, #14
 8002552:	18fc      	adds	r4, r7, r3
 8002554:	2001      	movs	r0, #1
 8002556:	f000 fc13 	bl	8002d80 <BSP_SX1272_Read>
 800255a:	0003      	movs	r3, r0
 800255c:	7023      	strb	r3, [r4, #0]
		if( currentstate._modem == LORA )
 800255e:	4b13      	ldr	r3, [pc, #76]	; (80025ac <BSP_SX1272_setMaxCurrent+0x94>)
 8002560:	7f1b      	ldrb	r3, [r3, #28]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d104      	bne.n	8002570 <BSP_SX1272_setMaxCurrent+0x58>
		{ // LoRa mode
			BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);	// Set LoRa Standby mode to write in registers
 8002566:	2181      	movs	r1, #129	; 0x81
 8002568:	2001      	movs	r0, #1
 800256a:	f000 fc37 	bl	8002ddc <BSP_SX1272_Write>
 800256e:	e003      	b.n	8002578 <BSP_SX1272_setMaxCurrent+0x60>
		}
		else
		{ // FSK mode
			BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);	// Set FSK Standby mode to write in registers
 8002570:	2101      	movs	r1, #1
 8002572:	2001      	movs	r0, #1
 8002574:	f000 fc32 	bl	8002ddc <BSP_SX1272_Write>
		}
		BSP_SX1272_Write(REG_OCP, rate);		// Modifying maximum current supply
 8002578:	1dfb      	adds	r3, r7, #7
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	0019      	movs	r1, r3
 800257e:	200b      	movs	r0, #11
 8002580:	f000 fc2c 	bl	8002ddc <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_OP_MODE, st0);		// Getting back to previous status
 8002584:	230e      	movs	r3, #14
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	0019      	movs	r1, r3
 800258c:	2001      	movs	r0, #1
 800258e:	f000 fc25 	bl	8002ddc <BSP_SX1272_Write>
		state = 0;
 8002592:	230f      	movs	r3, #15
 8002594:	18fb      	adds	r3, r7, r3
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
	}
	return state;
 800259a:	230f      	movs	r3, #15
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	b25b      	sxtb	r3, r3
}
 80025a2:	0018      	movs	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b005      	add	sp, #20
 80025a8:	bd90      	pop	{r4, r7, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	2000005c 	.word	0x2000005c

080025b0 <BSP_SX1272_truncPayload>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_truncPayload(uint16_t length16)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	0002      	movs	r2, r0
 80025b8:	1dbb      	adds	r3, r7, #6
 80025ba:	801a      	strh	r2, [r3, #0]
	uint8_t state = 2;
 80025bc:	210f      	movs	r1, #15
 80025be:	187b      	adds	r3, r7, r1
 80025c0:	2202      	movs	r2, #2
 80025c2:	701a      	strb	r2, [r3, #0]

	state = 1;
 80025c4:	187b      	adds	r3, r7, r1
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'truncPayload'\r\n");
	#endif

	if( length16 > MAX_PAYLOAD )
 80025ca:	1dbb      	adds	r3, r7, #6
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	2bfb      	cmp	r3, #251	; 0xfb
 80025d0:	d903      	bls.n	80025da <BSP_SX1272_truncPayload+0x2a>
	{
		currentstate._payloadlength = MAX_PAYLOAD;
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <BSP_SX1272_truncPayload+0x4c>)
 80025d4:	22fb      	movs	r2, #251	; 0xfb
 80025d6:	821a      	strh	r2, [r3, #16]
 80025d8:	e006      	b.n	80025e8 <BSP_SX1272_truncPayload+0x38>
	}
	else
	{
		currentstate._payloadlength = (length16 & 0xFF);
 80025da:	1dbb      	adds	r3, r7, #6
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	22ff      	movs	r2, #255	; 0xff
 80025e0:	4013      	ands	r3, r2
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <BSP_SX1272_truncPayload+0x4c>)
 80025e6:	821a      	strh	r2, [r3, #16]
	}
	state = 0;
 80025e8:	210f      	movs	r1, #15
 80025ea:	187b      	adds	r3, r7, r1
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]

	return state;
 80025f0:	187b      	adds	r3, r7, r1
 80025f2:	781b      	ldrb	r3, [r3, #0]
}
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b004      	add	sp, #16
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	2000005c 	.word	0x2000005c

08002600 <BSP_SX1272_setDestination>:
   state = 0  --> The command has been executed with no errors
 Parameters:
   dest: destination value of the packet sent.
*/
int8_t BSP_SX1272_setDestination(uint8_t dest)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	0002      	movs	r2, r0
 8002608:	1dfb      	adds	r3, r7, #7
 800260a:	701a      	strb	r2, [r3, #0]
	int8_t state = 2;
 800260c:	210f      	movs	r1, #15
 800260e:	187b      	adds	r3, r7, r1
 8002610:	2202      	movs	r2, #2
 8002612:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'setDestination'\r\n");
	#endif

	state = 1;
 8002614:	187b      	adds	r3, r7, r1
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]
	currentstate._destination = dest; // Storing destination in a global variable
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <BSP_SX1272_setDestination+0x5c>)
 800261c:	1dfa      	adds	r2, r7, #7
 800261e:	7812      	ldrb	r2, [r2, #0]
 8002620:	759a      	strb	r2, [r3, #22]
	currentstate.packet_sent.dst = dest;	 // Setting destination in packet structure
 8002622:	4b0e      	ldr	r3, [pc, #56]	; (800265c <BSP_SX1272_setDestination+0x5c>)
 8002624:	1dfa      	adds	r2, r7, #7
 8002626:	7812      	ldrb	r2, [r2, #0]
 8002628:	775a      	strb	r2, [r3, #29]
	currentstate.packet_sent.src = currentstate._nodeAddress; // Setting source in packet structure
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <BSP_SX1272_setDestination+0x5c>)
 800262c:	7c9a      	ldrb	r2, [r3, #18]
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <BSP_SX1272_setDestination+0x5c>)
 8002630:	779a      	strb	r2, [r3, #30]
	currentstate.packet_sent.packnum = currentstate._packetNumber;	// Setting packet number in packet structure
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <BSP_SX1272_setDestination+0x5c>)
 8002634:	7dda      	ldrb	r2, [r3, #23]
 8002636:	4b09      	ldr	r3, [pc, #36]	; (800265c <BSP_SX1272_setDestination+0x5c>)
 8002638:	77da      	strb	r2, [r3, #31]
	currentstate._packetNumber++;
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <BSP_SX1272_setDestination+0x5c>)
 800263c:	7ddb      	ldrb	r3, [r3, #23]
 800263e:	3301      	adds	r3, #1
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4b06      	ldr	r3, [pc, #24]	; (800265c <BSP_SX1272_setDestination+0x5c>)
 8002644:	75da      	strb	r2, [r3, #23]
	state = 0;
 8002646:	187b      	adds	r3, r7, r1
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
		my_printf("## Packet number ");
		my_printf("%d",currentstate.packet_sent.packnum);
		my_printf(" successfully set ##\r\n");
		my_printf("\r\n");
	#endif
	return state;
 800264c:	187b      	adds	r3, r7, r1
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	b25b      	sxtb	r3, r3
}
 8002652:	0018      	movs	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	b004      	add	sp, #16
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	2000005c 	.word	0x2000005c

08002660 <BSP_SX1272_setPayload>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_setPayload(char *payload)
{
 8002660:	b5b0      	push	{r4, r5, r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	uint8_t state = 2;
 8002668:	250b      	movs	r5, #11
 800266a:	197b      	adds	r3, r7, r5
 800266c:	2202      	movs	r2, #2
 800266e:	701a      	strb	r2, [r3, #0]
	uint8_t state_f = 2;
 8002670:	230a      	movs	r3, #10
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	2202      	movs	r2, #2
 8002676:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'setPayload'\r\n");
	#endif

	state = 1;
 8002678:	197b      	adds	r3, r7, r5
 800267a:	2201      	movs	r2, #1
 800267c:	701a      	strb	r2, [r3, #0]
	length16 = (uint16_t)strlen(payload);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	0018      	movs	r0, r3
 8002682:	f7fd fd41 	bl	8000108 <strlen>
 8002686:	0002      	movs	r2, r0
 8002688:	2108      	movs	r1, #8
 800268a:	187b      	adds	r3, r7, r1
 800268c:	801a      	strh	r2, [r3, #0]
	state = BSP_SX1272_truncPayload(length16);
 800268e:	197c      	adds	r4, r7, r5
 8002690:	187b      	adds	r3, r7, r1
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	0018      	movs	r0, r3
 8002696:	f7ff ff8b 	bl	80025b0 <BSP_SX1272_truncPayload>
 800269a:	0003      	movs	r3, r0
 800269c:	7023      	strb	r3, [r4, #0]
	if( state == 0 )
 800269e:	197b      	adds	r3, r7, r5
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d117      	bne.n	80026d6 <BSP_SX1272_setPayload+0x76>
	{
		// fill data field until the end of the string
		for(unsigned int i = 0; i < currentstate._payloadlength; i++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	e00d      	b.n	80026c8 <BSP_SX1272_setPayload+0x68>
		{
			currentstate.packet_sent.data[i] = payload[i];
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	18d3      	adds	r3, r2, r3
 80026b2:	7818      	ldrb	r0, [r3, #0]
 80026b4:	4a1c      	ldr	r2, [pc, #112]	; (8002728 <BSP_SX1272_setPayload+0xc8>)
 80026b6:	2121      	movs	r1, #33	; 0x21
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	18d3      	adds	r3, r2, r3
 80026bc:	185b      	adds	r3, r3, r1
 80026be:	1c02      	adds	r2, r0, #0
 80026c0:	701a      	strb	r2, [r3, #0]
		for(unsigned int i = 0; i < currentstate._payloadlength; i++)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	3301      	adds	r3, #1
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	4b17      	ldr	r3, [pc, #92]	; (8002728 <BSP_SX1272_setPayload+0xc8>)
 80026ca:	8a1b      	ldrh	r3, [r3, #16]
 80026cc:	001a      	movs	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d3eb      	bcc.n	80026ac <BSP_SX1272_setPayload+0x4c>
 80026d4:	e005      	b.n	80026e2 <BSP_SX1272_setPayload+0x82>
		}
	}
	else
	{
		state_f = state;
 80026d6:	230a      	movs	r3, #10
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	220b      	movs	r2, #11
 80026dc:	18ba      	adds	r2, r7, r2
 80026de:	7812      	ldrb	r2, [r2, #0]
 80026e0:	701a      	strb	r2, [r3, #0]
	}

	// In the case of FSK mode, the max payload is more restrictive
	if( ( currentstate._modem == FSK ) && ( currentstate._payloadlength > MAX_PAYLOAD_FSK ) )
 80026e2:	4b11      	ldr	r3, [pc, #68]	; (8002728 <BSP_SX1272_setPayload+0xc8>)
 80026e4:	7f1b      	ldrb	r3, [r3, #28]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10a      	bne.n	8002700 <BSP_SX1272_setPayload+0xa0>
 80026ea:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <BSP_SX1272_setPayload+0xc8>)
 80026ec:	8a1b      	ldrh	r3, [r3, #16]
 80026ee:	2b3c      	cmp	r3, #60	; 0x3c
 80026f0:	d906      	bls.n	8002700 <BSP_SX1272_setPayload+0xa0>
	{
		currentstate._payloadlength = MAX_PAYLOAD_FSK;
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <BSP_SX1272_setPayload+0xc8>)
 80026f4:	223c      	movs	r2, #60	; 0x3c
 80026f6:	821a      	strh	r2, [r3, #16]
		state = 1;
 80026f8:	230b      	movs	r3, #11
 80026fa:	18fb      	adds	r3, r7, r3
 80026fc:	2201      	movs	r2, #1
 80026fe:	701a      	strb	r2, [r3, #0]
		#endif
	}

	// Set length with the actual counter value
	// Setting packet length in packet structure
	state_f = BSP_SX1272_setPacketLength(currentstate._payloadlength + OFFSET_PAYLOADLENGTH);
 8002700:	4b09      	ldr	r3, [pc, #36]	; (8002728 <BSP_SX1272_setPayload+0xc8>)
 8002702:	8a1b      	ldrh	r3, [r3, #16]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	3305      	adds	r3, #5
 8002708:	b2db      	uxtb	r3, r3
 800270a:	0018      	movs	r0, r3
 800270c:	f7ff fe46 	bl	800239c <BSP_SX1272_setPacketLength>
 8002710:	0003      	movs	r3, r0
 8002712:	001a      	movs	r2, r3
 8002714:	210a      	movs	r1, #10
 8002716:	187b      	adds	r3, r7, r1
 8002718:	701a      	strb	r2, [r3, #0]
	return state_f;
 800271a:	187b      	adds	r3, r7, r1
 800271c:	781b      	ldrb	r3, [r3, #0]
}
 800271e:	0018      	movs	r0, r3
 8002720:	46bd      	mov	sp, r7
 8002722:	b004      	add	sp, #16
 8002724:	bdb0      	pop	{r4, r5, r7, pc}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	2000005c 	.word	0x2000005c

0800272c <BSP_SX1272_setPacket>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_setPacket(uint8_t dest, char *payload)
{
 800272c:	b5b0      	push	{r4, r5, r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	0002      	movs	r2, r0
 8002734:	6039      	str	r1, [r7, #0]
 8002736:	1dfb      	adds	r3, r7, #7
 8002738:	701a      	strb	r2, [r3, #0]
	int8_t state = 2;
 800273a:	250f      	movs	r5, #15
 800273c:	197b      	adds	r3, r7, r5
 800273e:	2202      	movs	r2, #2
 8002740:	701a      	strb	r2, [r3, #0]
		my_printf("\r\n");
		my_printf("Starting 'setPacket'\r\n");
	#endif

	// Save the previous status
	st0 = BSP_SX1272_Read(REG_OP_MODE);
 8002742:	230b      	movs	r3, #11
 8002744:	18fc      	adds	r4, r7, r3
 8002746:	2001      	movs	r0, #1
 8002748:	f000 fb1a 	bl	8002d80 <BSP_SX1272_Read>
 800274c:	0003      	movs	r3, r0
 800274e:	7023      	strb	r3, [r4, #0]
	// Initializing flags
	BSP_SX1272_clearFlags();
 8002750:	f7fe fd9c 	bl	800128c <BSP_SX1272_clearFlags>

	// Updating incorrect value
	currentstate._reception = CORRECT_PACKET;
 8002754:	4b47      	ldr	r3, [pc, #284]	; (8002874 <BSP_SX1272_setPacket+0x148>)
 8002756:	2200      	movs	r2, #0
 8002758:	761a      	strb	r2, [r3, #24]


	if (currentstate._retries == 0)
 800275a:	4b46      	ldr	r3, [pc, #280]	; (8002874 <BSP_SX1272_setPacket+0x148>)
 800275c:	7e5b      	ldrb	r3, [r3, #25]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d115      	bne.n	800278e <BSP_SX1272_setPacket+0x62>
	{
		// Updating these values only if it is the first try
		// Setting destination in packet structure
		state = BSP_SX1272_setDestination(dest);
 8002762:	197c      	adds	r4, r7, r5
 8002764:	1dfb      	adds	r3, r7, #7
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	0018      	movs	r0, r3
 800276a:	f7ff ff49 	bl	8002600 <BSP_SX1272_setDestination>
 800276e:	0003      	movs	r3, r0
 8002770:	7023      	strb	r3, [r4, #0]
		if( state == 0 )
 8002772:	197b      	adds	r3, r7, r5
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	b25b      	sxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d11a      	bne.n	80027b2 <BSP_SX1272_setPacket+0x86>
		{
			state = BSP_SX1272_setPayload(payload);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	0018      	movs	r0, r3
 8002780:	f7ff ff6e 	bl	8002660 <BSP_SX1272_setPayload>
 8002784:	0003      	movs	r3, r0
 8002786:	001a      	movs	r2, r3
 8002788:	197b      	adds	r3, r7, r5
 800278a:	701a      	strb	r2, [r3, #0]
 800278c:	e011      	b.n	80027b2 <BSP_SX1272_setPacket+0x86>
		}
	}
	else
	{
		state = BSP_SX1272_setPacketLength(currentstate._payloadlength + OFFSET_PAYLOADLENGTH);
 800278e:	4b39      	ldr	r3, [pc, #228]	; (8002874 <BSP_SX1272_setPacket+0x148>)
 8002790:	8a1b      	ldrh	r3, [r3, #16]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	3305      	adds	r3, #5
 8002796:	b2db      	uxtb	r3, r3
 8002798:	220f      	movs	r2, #15
 800279a:	18bc      	adds	r4, r7, r2
 800279c:	0018      	movs	r0, r3
 800279e:	f7ff fdfd 	bl	800239c <BSP_SX1272_setPacketLength>
 80027a2:	0003      	movs	r3, r0
 80027a4:	7023      	strb	r3, [r4, #0]
		currentstate.packet_sent.retry = currentstate._retries;
 80027a6:	4b33      	ldr	r3, [pc, #204]	; (8002874 <BSP_SX1272_setPacket+0x148>)
 80027a8:	7e59      	ldrb	r1, [r3, #25]
 80027aa:	4a32      	ldr	r2, [pc, #200]	; (8002874 <BSP_SX1272_setPacket+0x148>)
 80027ac:	238e      	movs	r3, #142	; 0x8e
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	54d1      	strb	r1, [r2, r3]
			my_printf(" time **\r\n");
		#endif
	}

	// Setting address pointer in FIFO data buffer
	BSP_SX1272_Write(REG_FIFO_TX_BASE_ADDR, 0x00);
 80027b2:	2100      	movs	r1, #0
 80027b4:	200e      	movs	r0, #14
 80027b6:	f000 fb11 	bl	8002ddc <BSP_SX1272_Write>
	BSP_SX1272_Write(REG_FIFO_ADDR_PTR, 0x00);
 80027ba:	2100      	movs	r1, #0
 80027bc:	200d      	movs	r0, #13
 80027be:	f000 fb0d 	bl	8002ddc <BSP_SX1272_Write>
	if( state == 0 )
 80027c2:	220f      	movs	r2, #15
 80027c4:	18bb      	adds	r3, r7, r2
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	b25b      	sxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d144      	bne.n	8002858 <BSP_SX1272_setPacket+0x12c>
	{
		state = 1;
 80027ce:	18bb      	adds	r3, r7, r2
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
		// Writing packet to send in FIFO
		BSP_SX1272_Write(REG_FIFO, currentstate.packet_sent.dst); 		// Writing the destination in FIFO
 80027d4:	4b27      	ldr	r3, [pc, #156]	; (8002874 <BSP_SX1272_setPacket+0x148>)
 80027d6:	7f5b      	ldrb	r3, [r3, #29]
 80027d8:	0019      	movs	r1, r3
 80027da:	2000      	movs	r0, #0
 80027dc:	f000 fafe 	bl	8002ddc <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_FIFO, currentstate.packet_sent.src);		// Writing the source in FIFO
 80027e0:	4b24      	ldr	r3, [pc, #144]	; (8002874 <BSP_SX1272_setPacket+0x148>)
 80027e2:	7f9b      	ldrb	r3, [r3, #30]
 80027e4:	0019      	movs	r1, r3
 80027e6:	2000      	movs	r0, #0
 80027e8:	f000 faf8 	bl	8002ddc <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_FIFO, currentstate.packet_sent.packnum);	// Writing the packet number in FIFO
 80027ec:	4b21      	ldr	r3, [pc, #132]	; (8002874 <BSP_SX1272_setPacket+0x148>)
 80027ee:	7fdb      	ldrb	r3, [r3, #31]
 80027f0:	0019      	movs	r1, r3
 80027f2:	2000      	movs	r0, #0
 80027f4:	f000 faf2 	bl	8002ddc <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_FIFO, currentstate.packet_sent.length); 	// Writing the packet length in FIFO
 80027f8:	4b1e      	ldr	r3, [pc, #120]	; (8002874 <BSP_SX1272_setPacket+0x148>)
 80027fa:	2220      	movs	r2, #32
 80027fc:	5c9b      	ldrb	r3, [r3, r2]
 80027fe:	0019      	movs	r1, r3
 8002800:	2000      	movs	r0, #0
 8002802:	f000 faeb 	bl	8002ddc <BSP_SX1272_Write>
		for( uint16_t i = 0; i < currentstate._payloadlength; i++)
 8002806:	230c      	movs	r3, #12
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	2200      	movs	r2, #0
 800280c:	801a      	strh	r2, [r3, #0]
 800280e:	e010      	b.n	8002832 <BSP_SX1272_setPacket+0x106>
		{
			BSP_SX1272_Write(REG_FIFO, currentstate.packet_sent.data[i]);  // Writing the payload in FIFO
 8002810:	240c      	movs	r4, #12
 8002812:	193b      	adds	r3, r7, r4
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	4a17      	ldr	r2, [pc, #92]	; (8002874 <BSP_SX1272_setPacket+0x148>)
 8002818:	2121      	movs	r1, #33	; 0x21
 800281a:	18d3      	adds	r3, r2, r3
 800281c:	185b      	adds	r3, r3, r1
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	0019      	movs	r1, r3
 8002822:	2000      	movs	r0, #0
 8002824:	f000 fada 	bl	8002ddc <BSP_SX1272_Write>
		for( uint16_t i = 0; i < currentstate._payloadlength; i++)
 8002828:	193b      	adds	r3, r7, r4
 800282a:	881a      	ldrh	r2, [r3, #0]
 800282c:	193b      	adds	r3, r7, r4
 800282e:	3201      	adds	r2, #1
 8002830:	801a      	strh	r2, [r3, #0]
 8002832:	4b10      	ldr	r3, [pc, #64]	; (8002874 <BSP_SX1272_setPacket+0x148>)
 8002834:	8a1b      	ldrh	r3, [r3, #16]
 8002836:	220c      	movs	r2, #12
 8002838:	18ba      	adds	r2, r7, r2
 800283a:	8812      	ldrh	r2, [r2, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d3e7      	bcc.n	8002810 <BSP_SX1272_setPacket+0xe4>
		}
		BSP_SX1272_Write(REG_FIFO, currentstate.packet_sent.retry);		// Writing the number retry in FIFO
 8002840:	4a0c      	ldr	r2, [pc, #48]	; (8002874 <BSP_SX1272_setPacket+0x148>)
 8002842:	238e      	movs	r3, #142	; 0x8e
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	0019      	movs	r1, r3
 800284a:	2000      	movs	r0, #0
 800284c:	f000 fac6 	bl	8002ddc <BSP_SX1272_Write>
		state = 0;
 8002850:	230f      	movs	r3, #15
 8002852:	18fb      	adds	r3, r7, r3
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
			}
			my_printf("%d",currentstate.packet_sent.retry);			// Printing retry number
			my_printf(" ##\r\n");
		#endif
	}
	BSP_SX1272_Write(REG_OP_MODE, st0);	// Getting back to previous status
 8002858:	230b      	movs	r3, #11
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	0019      	movs	r1, r3
 8002860:	2001      	movs	r0, #1
 8002862:	f000 fabb 	bl	8002ddc <BSP_SX1272_Write>
	return state;
 8002866:	230f      	movs	r3, #15
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	781b      	ldrb	r3, [r3, #0]
}
 800286c:	0018      	movs	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	b004      	add	sp, #16
 8002872:	bdb0      	pop	{r4, r5, r7, pc}
 8002874:	2000005c 	.word	0x2000005c

08002878 <BSP_SX1272_sendWithTimeout>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_sendWithTimeout(uint32_t wait)
{
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	uint8_t state = 2;
 8002880:	230f      	movs	r3, #15
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	2202      	movs	r2, #2
 8002886:	701a      	strb	r2, [r3, #0]
	uint8_t value = 0x00;
 8002888:	240e      	movs	r4, #14
 800288a:	193b      	adds	r3, r7, r4
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
		my_printf("\r\n");
		my_printf("Starting 'sendWithTimeout'\r\n");
	#endif

	// wait to TxDone flag
	previous = millis();
 8002890:	f7fe fc9a 	bl	80011c8 <millis>
 8002894:	0003      	movs	r3, r0
 8002896:	60bb      	str	r3, [r7, #8]
	if( currentstate._modem == LORA )
 8002898:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <BSP_SX1272_sendWithTimeout+0x128>)
 800289a:	7f1b      	ldrb	r3, [r3, #28]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d135      	bne.n	800290c <BSP_SX1272_sendWithTimeout+0x94>
	{
		/// LoRa mode
		// Initializing flags
		BSP_SX1272_clearFlags();
 80028a0:	f7fe fcf4 	bl	800128c <BSP_SX1272_clearFlags>
		// LORA mode - Tx
		BSP_SX1272_Write(REG_OP_MODE, LORA_TX_MODE);
 80028a4:	2183      	movs	r1, #131	; 0x83
 80028a6:	2001      	movs	r0, #1
 80028a8:	f000 fa98 	bl	8002ddc <BSP_SX1272_Write>

		value = BSP_SX1272_Read(REG_IRQ_FLAGS);
 80028ac:	193c      	adds	r4, r7, r4
 80028ae:	2012      	movs	r0, #18
 80028b0:	f000 fa66 	bl	8002d80 <BSP_SX1272_Read>
 80028b4:	0003      	movs	r3, r0
 80028b6:	7023      	strb	r3, [r4, #0]

		// Wait until the packet is sent (TX Done flag) or the timeout expires
		while ((bitRead(value, 3) == 0) && (millis() - previous < wait))
 80028b8:	e011      	b.n	80028de <BSP_SX1272_sendWithTimeout+0x66>
		{
			value = BSP_SX1272_Read(REG_IRQ_FLAGS);
 80028ba:	230e      	movs	r3, #14
 80028bc:	18fc      	adds	r4, r7, r3
 80028be:	2012      	movs	r0, #18
 80028c0:	f000 fa5e 	bl	8002d80 <BSP_SX1272_Read>
 80028c4:	0003      	movs	r3, r0
 80028c6:	7023      	strb	r3, [r4, #0]
			// Condition to avoid an overflow (DO NOT REMOVE)
			if( millis() < previous )
 80028c8:	f7fe fc7e 	bl	80011c8 <millis>
 80028cc:	0003      	movs	r3, r0
 80028ce:	001a      	movs	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d903      	bls.n	80028de <BSP_SX1272_sendWithTimeout+0x66>
			{
				previous = millis();
 80028d6:	f7fe fc77 	bl	80011c8 <millis>
 80028da:	0003      	movs	r3, r0
 80028dc:	60bb      	str	r3, [r7, #8]
		while ((bitRead(value, 3) == 0) && (millis() - previous < wait))
 80028de:	230e      	movs	r3, #14
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	08db      	lsrs	r3, r3, #3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	001a      	movs	r2, r3
 80028ea:	2301      	movs	r3, #1
 80028ec:	4013      	ands	r3, r2
 80028ee:	d108      	bne.n	8002902 <BSP_SX1272_sendWithTimeout+0x8a>
 80028f0:	f7fe fc6a 	bl	80011c8 <millis>
 80028f4:	0003      	movs	r3, r0
 80028f6:	001a      	movs	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d8db      	bhi.n	80028ba <BSP_SX1272_sendWithTimeout+0x42>
			}
		}
		state = 1;
 8002902:	230f      	movs	r3, #15
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	2201      	movs	r2, #1
 8002908:	701a      	strb	r2, [r3, #0]
 800290a:	e033      	b.n	8002974 <BSP_SX1272_sendWithTimeout+0xfc>
	}
	else
	{
    // Initializing flags
		/// FSK mode
		BSP_SX1272_Write(REG_OP_MODE, FSK_TX_MODE);  // FSK mode - Tx
 800290c:	2103      	movs	r1, #3
 800290e:	2001      	movs	r0, #1
 8002910:	f000 fa64 	bl	8002ddc <BSP_SX1272_Write>

		value = BSP_SX1272_Read(REG_IRQ_FLAGS2);
 8002914:	230e      	movs	r3, #14
 8002916:	18fc      	adds	r4, r7, r3
 8002918:	203f      	movs	r0, #63	; 0x3f
 800291a:	f000 fa31 	bl	8002d80 <BSP_SX1272_Read>
 800291e:	0003      	movs	r3, r0
 8002920:	7023      	strb	r3, [r4, #0]
		// Wait until the packet is sent (Packet Sent flag) or the timeout expires
		while ((bitRead(value, 3) == 0) && (millis() - previous < wait))
 8002922:	e011      	b.n	8002948 <BSP_SX1272_sendWithTimeout+0xd0>
		{
			value = BSP_SX1272_Read(REG_IRQ_FLAGS2);
 8002924:	230e      	movs	r3, #14
 8002926:	18fc      	adds	r4, r7, r3
 8002928:	203f      	movs	r0, #63	; 0x3f
 800292a:	f000 fa29 	bl	8002d80 <BSP_SX1272_Read>
 800292e:	0003      	movs	r3, r0
 8002930:	7023      	strb	r3, [r4, #0]

			// Condition to avoid an overflow (DO NOT REMOVE)
			if( millis() < previous )
 8002932:	f7fe fc49 	bl	80011c8 <millis>
 8002936:	0003      	movs	r3, r0
 8002938:	001a      	movs	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	4293      	cmp	r3, r2
 800293e:	d903      	bls.n	8002948 <BSP_SX1272_sendWithTimeout+0xd0>
			{
				previous = millis();
 8002940:	f7fe fc42 	bl	80011c8 <millis>
 8002944:	0003      	movs	r3, r0
 8002946:	60bb      	str	r3, [r7, #8]
		while ((bitRead(value, 3) == 0) && (millis() - previous < wait))
 8002948:	230e      	movs	r3, #14
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	08db      	lsrs	r3, r3, #3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	001a      	movs	r2, r3
 8002954:	2301      	movs	r3, #1
 8002956:	4013      	ands	r3, r2
 8002958:	d108      	bne.n	800296c <BSP_SX1272_sendWithTimeout+0xf4>
 800295a:	f7fe fc35 	bl	80011c8 <millis>
 800295e:	0003      	movs	r3, r0
 8002960:	001a      	movs	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	429a      	cmp	r2, r3
 800296a:	d8db      	bhi.n	8002924 <BSP_SX1272_sendWithTimeout+0xac>
			}
		}
		state = 1;
 800296c:	230f      	movs	r3, #15
 800296e:	18fb      	adds	r3, r7, r3
 8002970:	2201      	movs	r2, #1
 8002972:	701a      	strb	r2, [r3, #0]
	}
	if( bitRead(value, 3) == 1 )
 8002974:	230e      	movs	r3, #14
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	08db      	lsrs	r3, r3, #3
 800297c:	b2db      	uxtb	r3, r3
 800297e:	001a      	movs	r2, r3
 8002980:	2301      	movs	r3, #1
 8002982:	4013      	ands	r3, r2
 8002984:	d003      	beq.n	800298e <BSP_SX1272_sendWithTimeout+0x116>
	{
		state = 0;	// Packet successfully sent
 8002986:	230f      	movs	r3, #15
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	2200      	movs	r2, #0
 800298c:	701a      	strb	r2, [r3, #0]
			#endif
		}
	}

	// Initializing flags
	BSP_SX1272_clearFlags();
 800298e:	f7fe fc7d 	bl	800128c <BSP_SX1272_clearFlags>
	return state;
 8002992:	230f      	movs	r3, #15
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	781b      	ldrb	r3, [r3, #0]
}
 8002998:	0018      	movs	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	b005      	add	sp, #20
 800299e:	bd90      	pop	{r4, r7, pc}
 80029a0:	2000005c 	.word	0x2000005c

080029a4 <BSP_SX1272_sendPacketTimeout>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_sendPacketTimeout(uint8_t dest, char *payload, uint32_t wait)
{
 80029a4:	b5b0      	push	{r4, r5, r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	210f      	movs	r1, #15
 80029b0:	187b      	adds	r3, r7, r1
 80029b2:	1c02      	adds	r2, r0, #0
 80029b4:	701a      	strb	r2, [r3, #0]
	uint8_t state = 2;
 80029b6:	2517      	movs	r5, #23
 80029b8:	197b      	adds	r3, r7, r5
 80029ba:	2202      	movs	r2, #2
 80029bc:	701a      	strb	r2, [r3, #0]
		my_printf("\r\n");
		my_printf("Starting 'sendPacketTimeout'\r\n");
		my_printf("Passe dans sendPacketTimeout(uint8_t dest, char *payload, uint32_t wait)\r\n");
	#endif

	state = BSP_SX1272_setPacket(dest, payload);	// Setting a packet with 'dest' destination
 80029be:	197c      	adds	r4, r7, r5
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	187b      	adds	r3, r7, r1
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	0011      	movs	r1, r2
 80029c8:	0018      	movs	r0, r3
 80029ca:	f7ff feaf 	bl	800272c <BSP_SX1272_setPacket>
 80029ce:	0003      	movs	r3, r0
 80029d0:	7023      	strb	r3, [r4, #0]
	if (state == 0)								// and writing it in FIFO.
 80029d2:	197b      	adds	r3, r7, r5
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <BSP_SX1272_sendPacketTimeout+0x44>
	{
		state = BSP_SX1272_sendWithTimeout(wait);	// Sending the packet
 80029da:	197c      	adds	r4, r7, r5
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	0018      	movs	r0, r3
 80029e0:	f7ff ff4a 	bl	8002878 <BSP_SX1272_sendWithTimeout>
 80029e4:	0003      	movs	r3, r0
 80029e6:	7023      	strb	r3, [r4, #0]
	}
	return state;
 80029e8:	2317      	movs	r3, #23
 80029ea:	18fb      	adds	r3, r7, r3
 80029ec:	781b      	ldrb	r3, [r3, #0]
}
 80029ee:	0018      	movs	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b006      	add	sp, #24
 80029f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080029f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	0002      	movs	r2, r0
 8002a00:	1dfb      	adds	r3, r7, #7
 8002a02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a04:	1dfb      	adds	r3, r7, #7
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b7f      	cmp	r3, #127	; 0x7f
 8002a0a:	d809      	bhi.n	8002a20 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a0c:	1dfb      	adds	r3, r7, #7
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	001a      	movs	r2, r3
 8002a12:	231f      	movs	r3, #31
 8002a14:	401a      	ands	r2, r3
 8002a16:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <__NVIC_EnableIRQ+0x30>)
 8002a18:	2101      	movs	r1, #1
 8002a1a:	4091      	lsls	r1, r2
 8002a1c:	000a      	movs	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]
  }
}
 8002a20:	46c0      	nop			; (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b002      	add	sp, #8
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	e000e100 	.word	0xe000e100

08002a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a2c:	b590      	push	{r4, r7, lr}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	0002      	movs	r2, r0
 8002a34:	6039      	str	r1, [r7, #0]
 8002a36:	1dfb      	adds	r3, r7, #7
 8002a38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a3a:	1dfb      	adds	r3, r7, #7
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b7f      	cmp	r3, #127	; 0x7f
 8002a40:	d828      	bhi.n	8002a94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a42:	4a2f      	ldr	r2, [pc, #188]	; (8002b00 <__NVIC_SetPriority+0xd4>)
 8002a44:	1dfb      	adds	r3, r7, #7
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	b25b      	sxtb	r3, r3
 8002a4a:	089b      	lsrs	r3, r3, #2
 8002a4c:	33c0      	adds	r3, #192	; 0xc0
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	589b      	ldr	r3, [r3, r2]
 8002a52:	1dfa      	adds	r2, r7, #7
 8002a54:	7812      	ldrb	r2, [r2, #0]
 8002a56:	0011      	movs	r1, r2
 8002a58:	2203      	movs	r2, #3
 8002a5a:	400a      	ands	r2, r1
 8002a5c:	00d2      	lsls	r2, r2, #3
 8002a5e:	21ff      	movs	r1, #255	; 0xff
 8002a60:	4091      	lsls	r1, r2
 8002a62:	000a      	movs	r2, r1
 8002a64:	43d2      	mvns	r2, r2
 8002a66:	401a      	ands	r2, r3
 8002a68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	019b      	lsls	r3, r3, #6
 8002a6e:	22ff      	movs	r2, #255	; 0xff
 8002a70:	401a      	ands	r2, r3
 8002a72:	1dfb      	adds	r3, r7, #7
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	0018      	movs	r0, r3
 8002a78:	2303      	movs	r3, #3
 8002a7a:	4003      	ands	r3, r0
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a80:	481f      	ldr	r0, [pc, #124]	; (8002b00 <__NVIC_SetPriority+0xd4>)
 8002a82:	1dfb      	adds	r3, r7, #7
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b25b      	sxtb	r3, r3
 8002a88:	089b      	lsrs	r3, r3, #2
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	33c0      	adds	r3, #192	; 0xc0
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002a92:	e031      	b.n	8002af8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a94:	4a1b      	ldr	r2, [pc, #108]	; (8002b04 <__NVIC_SetPriority+0xd8>)
 8002a96:	1dfb      	adds	r3, r7, #7
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	0019      	movs	r1, r3
 8002a9c:	230f      	movs	r3, #15
 8002a9e:	400b      	ands	r3, r1
 8002aa0:	3b08      	subs	r3, #8
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	3306      	adds	r3, #6
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	18d3      	adds	r3, r2, r3
 8002aaa:	3304      	adds	r3, #4
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	1dfa      	adds	r2, r7, #7
 8002ab0:	7812      	ldrb	r2, [r2, #0]
 8002ab2:	0011      	movs	r1, r2
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	00d2      	lsls	r2, r2, #3
 8002aba:	21ff      	movs	r1, #255	; 0xff
 8002abc:	4091      	lsls	r1, r2
 8002abe:	000a      	movs	r2, r1
 8002ac0:	43d2      	mvns	r2, r2
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	019b      	lsls	r3, r3, #6
 8002aca:	22ff      	movs	r2, #255	; 0xff
 8002acc:	401a      	ands	r2, r3
 8002ace:	1dfb      	adds	r3, r7, #7
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	4003      	ands	r3, r0
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002adc:	4809      	ldr	r0, [pc, #36]	; (8002b04 <__NVIC_SetPriority+0xd8>)
 8002ade:	1dfb      	adds	r3, r7, #7
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	001c      	movs	r4, r3
 8002ae4:	230f      	movs	r3, #15
 8002ae6:	4023      	ands	r3, r4
 8002ae8:	3b08      	subs	r3, #8
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	430a      	orrs	r2, r1
 8002aee:	3306      	adds	r3, #6
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	18c3      	adds	r3, r0, r3
 8002af4:	3304      	adds	r3, #4
 8002af6:	601a      	str	r2, [r3, #0]
}
 8002af8:	46c0      	nop			; (mov r8, r8)
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b003      	add	sp, #12
 8002afe:	bd90      	pop	{r4, r7, pc}
 8002b00:	e000e100 	.word	0xe000e100
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <BSP_Console_Init>:
 * TX -> PA2 (AF1)
 * RX -> PA3 (AF1)
 */

void BSP_Console_Init()
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8002b0c:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <BSP_Console_Init+0xb4>)
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	4b2a      	ldr	r3, [pc, #168]	; (8002bbc <BSP_Console_Init+0xb4>)
 8002b12:	2180      	movs	r1, #128	; 0x80
 8002b14:	0289      	lsls	r1, r1, #10
 8002b16:	430a      	orrs	r2, r1
 8002b18:	615a      	str	r2, [r3, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 8002b1a:	2390      	movs	r3, #144	; 0x90
 8002b1c:	05db      	lsls	r3, r3, #23
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	2390      	movs	r3, #144	; 0x90
 8002b22:	05db      	lsls	r3, r3, #23
 8002b24:	21f0      	movs	r1, #240	; 0xf0
 8002b26:	438a      	bics	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER2_Pos) | (0x02 <<GPIO_MODER_MODER3_Pos);
 8002b2a:	2390      	movs	r3, #144	; 0x90
 8002b2c:	05db      	lsls	r3, r3, #23
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	2390      	movs	r3, #144	; 0x90
 8002b32:	05db      	lsls	r3, r3, #23
 8002b34:	21a0      	movs	r1, #160	; 0xa0
 8002b36:	430a      	orrs	r2, r1
 8002b38:	601a      	str	r2, [r3, #0]

	// Set PA2 and PA3 to AF1 (USART2)
	GPIOA->AFR[0] &= ~(0x0000FF00);
 8002b3a:	2390      	movs	r3, #144	; 0x90
 8002b3c:	05db      	lsls	r3, r3, #23
 8002b3e:	6a1a      	ldr	r2, [r3, #32]
 8002b40:	2390      	movs	r3, #144	; 0x90
 8002b42:	05db      	lsls	r3, r3, #23
 8002b44:	491e      	ldr	r1, [pc, #120]	; (8002bc0 <BSP_Console_Init+0xb8>)
 8002b46:	400a      	ands	r2, r1
 8002b48:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00001100);
 8002b4a:	2390      	movs	r3, #144	; 0x90
 8002b4c:	05db      	lsls	r3, r3, #23
 8002b4e:	6a1a      	ldr	r2, [r3, #32]
 8002b50:	2390      	movs	r3, #144	; 0x90
 8002b52:	05db      	lsls	r3, r3, #23
 8002b54:	2188      	movs	r1, #136	; 0x88
 8002b56:	0149      	lsls	r1, r1, #5
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	621a      	str	r2, [r3, #32]

	// Enable USART2 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8002b5c:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <BSP_Console_Init+0xb4>)
 8002b5e:	69da      	ldr	r2, [r3, #28]
 8002b60:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <BSP_Console_Init+0xb4>)
 8002b62:	2180      	movs	r1, #128	; 0x80
 8002b64:	0289      	lsls	r1, r1, #10
 8002b66:	430a      	orrs	r2, r1
 8002b68:	61da      	str	r2, [r3, #28]

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART2->CR1 = 0x00000000;
 8002b6a:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <BSP_Console_Init+0xbc>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 8002b70:	4b14      	ldr	r3, [pc, #80]	; (8002bc4 <BSP_Console_Init+0xbc>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 8002b76:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <BSP_Console_Init+0xbc>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]

	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->CFGR3 &= ~RCC_CFGR3_USART2SW_Msk;
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <BSP_Console_Init+0xb4>)
 8002b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b80:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <BSP_Console_Init+0xb4>)
 8002b82:	4911      	ldr	r1, [pc, #68]	; (8002bc8 <BSP_Console_Init+0xc0>)
 8002b84:	400a      	ands	r2, r1
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
	// BRR = 417 -> Baud Rate = 115107.9137 -> 0.08% error
	//
	// With OVER8=1 and Fck=48MHz, USARTDIV = 2*48E6/115200 = 833.3333
	// BRR = 833 -> Baud Rate = 115246.0984 -> 0.04% error (better)

	USART2->CR1 |= USART_CR1_OVER8;
 8002b88:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <BSP_Console_Init+0xbc>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <BSP_Console_Init+0xbc>)
 8002b8e:	2180      	movs	r1, #128	; 0x80
 8002b90:	0209      	lsls	r1, r1, #8
 8002b92:	430a      	orrs	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]
	USART2->BRR = 833;
 8002b96:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <BSP_Console_Init+0xbc>)
 8002b98:	4a0c      	ldr	r2, [pc, #48]	; (8002bcc <BSP_Console_Init+0xc4>)
 8002b9a:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8002b9c:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <BSP_Console_Init+0xbc>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <BSP_Console_Init+0xbc>)
 8002ba2:	210c      	movs	r1, #12
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]

	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <BSP_Console_Init+0xbc>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <BSP_Console_Init+0xbc>)
 8002bae:	2101      	movs	r1, #1
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]
}
 8002bb4:	46c0      	nop			; (mov r8, r8)
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	ffff00ff 	.word	0xffff00ff
 8002bc4:	40004400 	.word	0x40004400
 8002bc8:	fffcffff 	.word	0xfffcffff
 8002bcc:	00000341 	.word	0x00000341

08002bd0 <BSP_TIMER_Timebase_Init>:
 * Prescaler   = 48000 -> Counting period = 1ms
 * Auto-reload = 200   -> Update period   = 200ms
 */

void BSP_TIMER_Timebase_Init()
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
	// Enable TIM6 clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8002bd4:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <BSP_TIMER_Timebase_Init+0x54>)
 8002bd6:	69da      	ldr	r2, [r3, #28]
 8002bd8:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <BSP_TIMER_Timebase_Init+0x54>)
 8002bda:	2110      	movs	r1, #16
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	61da      	str	r2, [r3, #28]

	// Reset TIM6 configuration
	TIM6->CR1 = 0x0000;
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <BSP_TIMER_Timebase_Init+0x58>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
	TIM6->CR2 = 0x0000;
 8002be6:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <BSP_TIMER_Timebase_Init+0x58>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	605a      	str	r2, [r3, #4]

	// Set TIM6 prescaler
	// Fck = 48MHz -> /48 = 100kHz counting frequency
	TIM6->PSC = (uint16_t) 480 -1;
 8002bec:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <BSP_TIMER_Timebase_Init+0x58>)
 8002bee:	22e0      	movs	r2, #224	; 0xe0
 8002bf0:	32ff      	adds	r2, #255	; 0xff
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28

	// Set TIM6 auto-reload register for 1ms
	TIM6->ARR = (uint16_t) 100 -1;
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <BSP_TIMER_Timebase_Init+0x58>)
 8002bf6:	2263      	movs	r2, #99	; 0x63
 8002bf8:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable auto-reload preload
	TIM6->CR1 |= TIM_CR1_ARPE;
 8002bfa:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <BSP_TIMER_Timebase_Init+0x58>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <BSP_TIMER_Timebase_Init+0x58>)
 8002c00:	2180      	movs	r1, #128	; 0x80
 8002c02:	430a      	orrs	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]

	// Enable Interrupt upon Update Event
	TIM6->DIER |= TIM_DIER_UIE;
 8002c06:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <BSP_TIMER_Timebase_Init+0x58>)
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <BSP_TIMER_Timebase_Init+0x58>)
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	60da      	str	r2, [r3, #12]

	// Start TIM6 counter
	TIM6->CR1 |= TIM_CR1_CEN;
 8002c12:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <BSP_TIMER_Timebase_Init+0x58>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	4b04      	ldr	r3, [pc, #16]	; (8002c28 <BSP_TIMER_Timebase_Init+0x58>)
 8002c18:	2101      	movs	r1, #1
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	601a      	str	r2, [r3, #0]
}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40001000 	.word	0x40001000

08002c2c <BSP_NVIC_Init>:
 * BSP_NVIC_Init()
 * Setup NVIC controller for desired interrupts
 */

void BSP_NVIC_Init()
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
	// Set maximum priority for EXTI line 4 to 15 interrupts
	NVIC_SetPriority(EXTI4_15_IRQn, 0);
 8002c30:	2100      	movs	r1, #0
 8002c32:	2007      	movs	r0, #7
 8002c34:	f7ff fefa 	bl	8002a2c <__NVIC_SetPriority>

	// Enable EXTI line 4 to 15 (user button on line 13) interrupts
	NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002c38:	2007      	movs	r0, #7
 8002c3a:	f7ff fedd 	bl	80029f8 <__NVIC_EnableIRQ>

	// Set priority level 1 for TIM6 interrupt
	NVIC_SetPriority(TIM6_DAC_IRQn, 1);
 8002c3e:	2101      	movs	r1, #1
 8002c40:	2011      	movs	r0, #17
 8002c42:	f7ff fef3 	bl	8002a2c <__NVIC_SetPriority>

	// Enable TIM6 interrupts
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c46:	2011      	movs	r0, #17
 8002c48:	f7ff fed6 	bl	80029f8 <__NVIC_EnableIRQ>
}
 8002c4c:	46c0      	nop			; (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <BSP_millis>:

int BSP_millis()
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
	return timebase_tick_ms;
 8002c58:	4b02      	ldr	r3, [pc, #8]	; (8002c64 <BSP_millis+0x10>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
}
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	20000384 	.word	0x20000384

08002c68 <BSP_SPI1_Init>:
#include "comSX1272.h"

static uint8_t BSP_SPI_SendReceive(uint8_t tx_byte);

void BSP_SPI1_Init()
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0

	/////////////////////////////////////////////////
	// Configure PB6 as CS pin
	//
	// Enable GPIOB clock
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8002c6c:	4b3f      	ldr	r3, [pc, #252]	; (8002d6c <BSP_SPI1_Init+0x104>)
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	4b3e      	ldr	r3, [pc, #248]	; (8002d6c <BSP_SPI1_Init+0x104>)
 8002c72:	2180      	movs	r1, #128	; 0x80
 8002c74:	02c9      	lsls	r1, r1, #11
 8002c76:	430a      	orrs	r2, r1
 8002c78:	615a      	str	r2, [r3, #20]

	// Configure PB6 as output
	GPIOB->MODER &= ~GPIO_MODER_MODER6_Msk;
 8002c7a:	4b3d      	ldr	r3, [pc, #244]	; (8002d70 <BSP_SPI1_Init+0x108>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	4b3c      	ldr	r3, [pc, #240]	; (8002d70 <BSP_SPI1_Init+0x108>)
 8002c80:	493c      	ldr	r1, [pc, #240]	; (8002d74 <BSP_SPI1_Init+0x10c>)
 8002c82:	400a      	ands	r2, r1
 8002c84:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (0x01 <<GPIO_MODER_MODER6_Pos);
 8002c86:	4b3a      	ldr	r3, [pc, #232]	; (8002d70 <BSP_SPI1_Init+0x108>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	4b39      	ldr	r3, [pc, #228]	; (8002d70 <BSP_SPI1_Init+0x108>)
 8002c8c:	2180      	movs	r1, #128	; 0x80
 8002c8e:	0149      	lsls	r1, r1, #5
 8002c90:	430a      	orrs	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]

	// Configure PB6 as Push-Pull output
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_6;
 8002c94:	4b36      	ldr	r3, [pc, #216]	; (8002d70 <BSP_SPI1_Init+0x108>)
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	4b35      	ldr	r3, [pc, #212]	; (8002d70 <BSP_SPI1_Init+0x108>)
 8002c9a:	2140      	movs	r1, #64	; 0x40
 8002c9c:	438a      	bics	r2, r1
 8002c9e:	605a      	str	r2, [r3, #4]

	// Configure PB6 as High-Speed Output
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR6_Msk;
 8002ca0:	4b33      	ldr	r3, [pc, #204]	; (8002d70 <BSP_SPI1_Init+0x108>)
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	4b32      	ldr	r3, [pc, #200]	; (8002d70 <BSP_SPI1_Init+0x108>)
 8002ca6:	4933      	ldr	r1, [pc, #204]	; (8002d74 <BSP_SPI1_Init+0x10c>)
 8002ca8:	400a      	ands	r2, r1
 8002caa:	609a      	str	r2, [r3, #8]
	GPIOB->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR6_Pos);
 8002cac:	4b30      	ldr	r3, [pc, #192]	; (8002d70 <BSP_SPI1_Init+0x108>)
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	4b2f      	ldr	r3, [pc, #188]	; (8002d70 <BSP_SPI1_Init+0x108>)
 8002cb2:	21c0      	movs	r1, #192	; 0xc0
 8002cb4:	0189      	lsls	r1, r1, #6
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	609a      	str	r2, [r3, #8]

	// Disable PB6 Pull-up/Pull-down
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPDR6_Msk;
 8002cba:	4b2d      	ldr	r3, [pc, #180]	; (8002d70 <BSP_SPI1_Init+0x108>)
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	4b2c      	ldr	r3, [pc, #176]	; (8002d70 <BSP_SPI1_Init+0x108>)
 8002cc0:	492c      	ldr	r1, [pc, #176]	; (8002d74 <BSP_SPI1_Init+0x10c>)
 8002cc2:	400a      	ands	r2, r1
 8002cc4:	60da      	str	r2, [r3, #12]

	// Idle state is high
	GPIOB->BSRR = GPIO_BSRR_BS_6;
 8002cc6:	4b2a      	ldr	r3, [pc, #168]	; (8002d70 <BSP_SPI1_Init+0x108>)
 8002cc8:	2240      	movs	r2, #64	; 0x40
 8002cca:	619a      	str	r2, [r3, #24]

	///////////////////////////////////////////////////
	// Configure PA5, PA6, PA7 as SPI1 pins (AF0)
	//
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8002ccc:	4b27      	ldr	r3, [pc, #156]	; (8002d6c <BSP_SPI1_Init+0x104>)
 8002cce:	695a      	ldr	r2, [r3, #20]
 8002cd0:	4b26      	ldr	r3, [pc, #152]	; (8002d6c <BSP_SPI1_Init+0x104>)
 8002cd2:	2180      	movs	r1, #128	; 0x80
 8002cd4:	0289      	lsls	r1, r1, #10
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	615a      	str	r2, [r3, #20]

	// Configure PA5, PA6, PA7 as AF mode
	GPIOA->MODER &= ~(GPIO_MODER_MODER5 | GPIO_MODER_MODER6 | GPIO_MODER_MODER7);
 8002cda:	2390      	movs	r3, #144	; 0x90
 8002cdc:	05db      	lsls	r3, r3, #23
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	2390      	movs	r3, #144	; 0x90
 8002ce2:	05db      	lsls	r3, r3, #23
 8002ce4:	4924      	ldr	r1, [pc, #144]	; (8002d78 <BSP_SPI1_Init+0x110>)
 8002ce6:	400a      	ands	r2, r1
 8002ce8:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<10U) |(0x02 <<12U) |(0x02 <<14U);
 8002cea:	2390      	movs	r3, #144	; 0x90
 8002cec:	05db      	lsls	r3, r3, #23
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	2390      	movs	r3, #144	; 0x90
 8002cf2:	05db      	lsls	r3, r3, #23
 8002cf4:	21a8      	movs	r1, #168	; 0xa8
 8002cf6:	0209      	lsls	r1, r1, #8
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]

	// Connect to SPI1 (AF0)
	GPIOA->AFR[0] &= ~(0xFFF00000);
 8002cfc:	2390      	movs	r3, #144	; 0x90
 8002cfe:	05db      	lsls	r3, r3, #23
 8002d00:	6a1a      	ldr	r2, [r3, #32]
 8002d02:	2390      	movs	r3, #144	; 0x90
 8002d04:	05db      	lsls	r3, r3, #23
 8002d06:	0312      	lsls	r2, r2, #12
 8002d08:	0b12      	lsrs	r2, r2, #12
 8002d0a:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00000000);
 8002d0c:	2390      	movs	r3, #144	; 0x90
 8002d0e:	05da      	lsls	r2, r3, #23
 8002d10:	2390      	movs	r3, #144	; 0x90
 8002d12:	05db      	lsls	r3, r3, #23
 8002d14:	6a12      	ldr	r2, [r2, #32]
 8002d16:	621a      	str	r2, [r3, #32]

	// Enable SPI1 Clock
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8002d18:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <BSP_SPI1_Init+0x104>)
 8002d1a:	699a      	ldr	r2, [r3, #24]
 8002d1c:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <BSP_SPI1_Init+0x104>)
 8002d1e:	2180      	movs	r1, #128	; 0x80
 8002d20:	0149      	lsls	r1, r1, #5
 8002d22:	430a      	orrs	r2, r1
 8002d24:	619a      	str	r2, [r3, #24]

	// Configure SPI with default config
	// 4-wire = full-duplex (MISO/MOSI on separated lines)
	// 8-bit, no CRC, MSB first
	// CPHA = 0, CPOL = 0 -> SPI mode 0 (first clock rising edge)
	SPI1->CR1 = 0x0000;
 8002d26:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <BSP_SPI1_Init+0x114>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
	SPI1->CR2 = 0x0000;
 8002d2c:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <BSP_SPI1_Init+0x114>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	605a      	str	r2, [r3, #4]

	// Set the baudrate to 48MHz /128 = 375kHz (slow, but easy to debug)
	SPI1->CR1 |= 0x06 <<SPI_CR1_BR_Pos;
 8002d32:	4b12      	ldr	r3, [pc, #72]	; (8002d7c <BSP_SPI1_Init+0x114>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <BSP_SPI1_Init+0x114>)
 8002d38:	2130      	movs	r1, #48	; 0x30
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]

	// Set data size to 8-bit
	SPI1->CR2 |= 0x07 <<SPI_CR2_DS_Pos;
 8002d3e:	4b0f      	ldr	r3, [pc, #60]	; (8002d7c <BSP_SPI1_Init+0x114>)
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <BSP_SPI1_Init+0x114>)
 8002d44:	21e0      	movs	r1, #224	; 0xe0
 8002d46:	00c9      	lsls	r1, r1, #3
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	605a      	str	r2, [r3, #4]

	// Set as master (SSI must be high), with software managed NSS
	SPI1->CR1 |= SPI_CR1_MSTR | SPI_CR1_SSI | SPI_CR1_SSM;
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <BSP_SPI1_Init+0x114>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <BSP_SPI1_Init+0x114>)
 8002d52:	21c1      	movs	r1, #193	; 0xc1
 8002d54:	0089      	lsls	r1, r1, #2
 8002d56:	430a      	orrs	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]

	// Enable SPI1
	SPI1->CR1 |= SPI_CR1_SPE;
 8002d5a:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <BSP_SPI1_Init+0x114>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <BSP_SPI1_Init+0x114>)
 8002d60:	2140      	movs	r1, #64	; 0x40
 8002d62:	430a      	orrs	r2, r1
 8002d64:	601a      	str	r2, [r3, #0]
}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	48000400 	.word	0x48000400
 8002d74:	ffffcfff 	.word	0xffffcfff
 8002d78:	ffff03ff 	.word	0xffff03ff
 8002d7c:	40013000 	.word	0x40013000

08002d80 <BSP_SX1272_Read>:

uint8_t BSP_SX1272_Read(uint8_t register_address)
{
 8002d80:	b5b0      	push	{r4, r5, r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	0002      	movs	r2, r0
 8002d88:	1dfb      	adds	r3, r7, #7
 8002d8a:	701a      	strb	r2, [r3, #0]
	uint8_t data=0;
 8002d8c:	240f      	movs	r4, #15
 8002d8e:	193b      	adds	r3, r7, r4
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
	// Set FIFO threshold to 1-byte
	SPI1->CR2 |= SPI_CR2_FRXTH;
 8002d94:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <BSP_SX1272_Read+0x54>)
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <BSP_SX1272_Read+0x54>)
 8002d9a:	2180      	movs	r1, #128	; 0x80
 8002d9c:	0149      	lsls	r1, r1, #5
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	605a      	str	r2, [r3, #4]

	// Select slave (CS -> low)
	GPIOB->BSRR = GPIO_BSRR_BR_6;
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <BSP_SX1272_Read+0x58>)
 8002da4:	2280      	movs	r2, #128	; 0x80
 8002da6:	03d2      	lsls	r2, r2, #15
 8002da8:	619a      	str	r2, [r3, #24]

	// Send register address to read from
	BSP_SPI_SendReceive(register_address);
 8002daa:	1dfb      	adds	r3, r7, #7
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	0018      	movs	r0, r3
 8002db0:	f000 f842 	bl	8002e38 <BSP_SPI_SendReceive>

	data = BSP_SPI_SendReceive(0x00);
 8002db4:	0025      	movs	r5, r4
 8002db6:	193c      	adds	r4, r7, r4
 8002db8:	2000      	movs	r0, #0
 8002dba:	f000 f83d 	bl	8002e38 <BSP_SPI_SendReceive>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	7023      	strb	r3, [r4, #0]

	// Release slave (CS -> High)
	GPIOB->BSRR = GPIO_BSRR_BS_6;
 8002dc2:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <BSP_SX1272_Read+0x58>)
 8002dc4:	2240      	movs	r2, #64	; 0x40
 8002dc6:	619a      	str	r2, [r3, #24]

	return data;
 8002dc8:	197b      	adds	r3, r7, r5
 8002dca:	781b      	ldrb	r3, [r3, #0]
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b004      	add	sp, #16
 8002dd2:	bdb0      	pop	{r4, r5, r7, pc}
 8002dd4:	40013000 	.word	0x40013000
 8002dd8:	48000400 	.word	0x48000400

08002ddc <BSP_SX1272_Write>:

void BSP_SX1272_Write(uint8_t register_address, uint8_t data)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	0002      	movs	r2, r0
 8002de4:	1dfb      	adds	r3, r7, #7
 8002de6:	701a      	strb	r2, [r3, #0]
 8002de8:	1dbb      	adds	r3, r7, #6
 8002dea:	1c0a      	adds	r2, r1, #0
 8002dec:	701a      	strb	r2, [r3, #0]
	// Set FIFO threshold to 1-byte
	SPI1->CR2 |= SPI_CR2_FRXTH;
 8002dee:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <BSP_SX1272_Write+0x54>)
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <BSP_SX1272_Write+0x54>)
 8002df4:	2180      	movs	r1, #128	; 0x80
 8002df6:	0149      	lsls	r1, r1, #5
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	605a      	str	r2, [r3, #4]

	// Select slave (CS -> low)
	GPIOB->BSRR = GPIO_BSRR_BR_6;
 8002dfc:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <BSP_SX1272_Write+0x58>)
 8002dfe:	2280      	movs	r2, #128	; 0x80
 8002e00:	03d2      	lsls	r2, r2, #15
 8002e02:	619a      	str	r2, [r3, #24]

	// Send register address to write to
	BSP_SPI_SendReceive(register_address | 0x80);
 8002e04:	1dfb      	adds	r3, r7, #7
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2280      	movs	r2, #128	; 0x80
 8002e0a:	4252      	negs	r2, r2
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	0018      	movs	r0, r3
 8002e12:	f000 f811 	bl	8002e38 <BSP_SPI_SendReceive>

	// Send data to write
	BSP_SPI_SendReceive(data);
 8002e16:	1dbb      	adds	r3, r7, #6
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f000 f80c 	bl	8002e38 <BSP_SPI_SendReceive>

	// Release slave (CS -> High)
	GPIOB->BSRR = GPIO_BSRR_BS_6;
 8002e20:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <BSP_SX1272_Write+0x58>)
 8002e22:	2240      	movs	r2, #64	; 0x40
 8002e24:	619a      	str	r2, [r3, #24]
}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b002      	add	sp, #8
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	40013000 	.word	0x40013000
 8002e34:	48000400 	.word	0x48000400

08002e38 <BSP_SPI_SendReceive>:

static uint8_t BSP_SPI_SendReceive(uint8_t tx_byte)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	0002      	movs	r2, r0
 8002e40:	1dfb      	adds	r3, r7, #7
 8002e42:	701a      	strb	r2, [r3, #0]
	uint8_t	rx_byte;

	// Make sure TXE is set before sending data
	while((SPI1->SR & SPI_SR_TXE_Msk) == 0);
 8002e44:	46c0      	nop			; (mov r8, r8)
 8002e46:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <BSP_SPI_SendReceive+0x44>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d0fa      	beq.n	8002e46 <BSP_SPI_SendReceive+0xe>

	// Send tx_byte
	*(__IO uint8_t *)&SPI1->DR = tx_byte;
 8002e50:	4a0b      	ldr	r2, [pc, #44]	; (8002e80 <BSP_SPI_SendReceive+0x48>)
 8002e52:	1dfb      	adds	r3, r7, #7
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	7013      	strb	r3, [r2, #0]

	// Wait until incoming data has arrived
	while((SPI1->SR & SPI_SR_RXNE_Msk) == 0);
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <BSP_SPI_SendReceive+0x44>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	4013      	ands	r3, r2
 8002e62:	d0fa      	beq.n	8002e5a <BSP_SPI_SendReceive+0x22>

	// Read data
	rx_byte = *(__IO uint8_t *)&SPI1->DR;
 8002e64:	4a06      	ldr	r2, [pc, #24]	; (8002e80 <BSP_SPI_SendReceive+0x48>)
 8002e66:	210f      	movs	r1, #15
 8002e68:	187b      	adds	r3, r7, r1
 8002e6a:	7812      	ldrb	r2, [r2, #0]
 8002e6c:	701a      	strb	r2, [r3, #0]

	return rx_byte;
 8002e6e:	187b      	adds	r3, r7, r1
 8002e70:	781b      	ldrb	r3, [r3, #0]
}
 8002e72:	0018      	movs	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b004      	add	sp, #16
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	40013000 	.word	0x40013000
 8002e80:	4001300c 	.word	0x4001300c

08002e84 <BSP_DELAY_ms>:
/*
 *  Basic delay functions
 */

void BSP_DELAY_ms(uint32_t delay)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	uint32_t	i;
	for(i=0; i<(delay*2500); i++);		// Tuned for ms at 48MHz
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	e002      	b.n	8002e98 <BSP_DELAY_ms+0x14>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	3301      	adds	r3, #1
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a05      	ldr	r2, [pc, #20]	; (8002eb0 <BSP_DELAY_ms+0x2c>)
 8002e9c:	4353      	muls	r3, r2
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d3f6      	bcc.n	8002e92 <BSP_DELAY_ms+0xe>
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b004      	add	sp, #16
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	000009c4 	.word	0x000009c4

08002eb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002eb4:	480d      	ldr	r0, [pc, #52]	; (8002eec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002eb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eb8:	480d      	ldr	r0, [pc, #52]	; (8002ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002eba:	490e      	ldr	r1, [pc, #56]	; (8002ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ebc:	4a0e      	ldr	r2, [pc, #56]	; (8002ef8 <LoopForever+0xe>)
  movs r3, #0
 8002ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec0:	e002      	b.n	8002ec8 <LoopCopyDataInit>

08002ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ec6:	3304      	adds	r3, #4

08002ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ecc:	d3f9      	bcc.n	8002ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ece:	4a0b      	ldr	r2, [pc, #44]	; (8002efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ed0:	4c0b      	ldr	r4, [pc, #44]	; (8002f00 <LoopForever+0x16>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed4:	e001      	b.n	8002eda <LoopFillZerobss>

08002ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed8:	3204      	adds	r2, #4

08002eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002edc:	d3fb      	bcc.n	8002ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002ede:	f000 f813 	bl	8002f08 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002ee2:	f000 f8db 	bl	800309c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ee6:	f7fd fe43 	bl	8000b70 <main>

08002eea <LoopForever>:

LoopForever:
    b LoopForever
 8002eea:	e7fe      	b.n	8002eea <LoopForever>
  ldr   r0, =_estack
 8002eec:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ef4:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8002ef8:	080032fc 	.word	0x080032fc
  ldr r2, =_sbss
 8002efc:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8002f00:	20000388 	.word	0x20000388

08002f04 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f04:	e7fe      	b.n	8002f04 <ADC1_COMP_IRQHandler>
	...

08002f08 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <SystemInit+0x70>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <SystemInit+0x70>)
 8002f12:	2101      	movs	r1, #1
 8002f14:	430a      	orrs	r2, r1
 8002f16:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002f18:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <SystemInit+0x70>)
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <SystemInit+0x70>)
 8002f1e:	4917      	ldr	r1, [pc, #92]	; (8002f7c <SystemInit+0x74>)
 8002f20:	400a      	ands	r2, r1
 8002f22:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002f24:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <SystemInit+0x70>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <SystemInit+0x70>)
 8002f2a:	4915      	ldr	r1, [pc, #84]	; (8002f80 <SystemInit+0x78>)
 8002f2c:	400a      	ands	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002f30:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <SystemInit+0x70>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <SystemInit+0x70>)
 8002f36:	4913      	ldr	r1, [pc, #76]	; (8002f84 <SystemInit+0x7c>)
 8002f38:	400a      	ands	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <SystemInit+0x70>)
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <SystemInit+0x70>)
 8002f42:	4911      	ldr	r1, [pc, #68]	; (8002f88 <SystemInit+0x80>)
 8002f44:	400a      	ands	r2, r1
 8002f46:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <SystemInit+0x70>)
 8002f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <SystemInit+0x70>)
 8002f4e:	210f      	movs	r1, #15
 8002f50:	438a      	bics	r2, r1
 8002f52:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8002f54:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <SystemInit+0x70>)
 8002f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f58:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <SystemInit+0x70>)
 8002f5a:	490c      	ldr	r1, [pc, #48]	; (8002f8c <SystemInit+0x84>)
 8002f5c:	400a      	ands	r2, r1
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <SystemInit+0x70>)
 8002f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f64:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <SystemInit+0x70>)
 8002f66:	2101      	movs	r1, #1
 8002f68:	438a      	bics	r2, r1
 8002f6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002f6c:	4b02      	ldr	r3, [pc, #8]	; (8002f78 <SystemInit+0x70>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]

}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	08ffb80c 	.word	0x08ffb80c
 8002f80:	fef6ffff 	.word	0xfef6ffff
 8002f84:	fffbffff 	.word	0xfffbffff
 8002f88:	ffc0ffff 	.word	0xffc0ffff
 8002f8c:	fffcfe2c 	.word	0xfffcfe2c

08002f90 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002fa6:	4b38      	ldr	r3, [pc, #224]	; (8003088 <SystemCoreClockUpdate+0xf8>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	220c      	movs	r2, #12
 8002fac:	4013      	ands	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d011      	beq.n	8002fda <SystemCoreClockUpdate+0x4a>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d84f      	bhi.n	800305c <SystemCoreClockUpdate+0xcc>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <SystemCoreClockUpdate+0x3a>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d004      	beq.n	8002fd2 <SystemCoreClockUpdate+0x42>
 8002fc8:	e048      	b.n	800305c <SystemCoreClockUpdate+0xcc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8002fca:	4b30      	ldr	r3, [pc, #192]	; (800308c <SystemCoreClockUpdate+0xfc>)
 8002fcc:	4a30      	ldr	r2, [pc, #192]	; (8003090 <SystemCoreClockUpdate+0x100>)
 8002fce:	601a      	str	r2, [r3, #0]
      break;
 8002fd0:	e048      	b.n	8003064 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8002fd2:	4b2e      	ldr	r3, [pc, #184]	; (800308c <SystemCoreClockUpdate+0xfc>)
 8002fd4:	4a2e      	ldr	r2, [pc, #184]	; (8003090 <SystemCoreClockUpdate+0x100>)
 8002fd6:	601a      	str	r2, [r3, #0]
      break;
 8002fd8:	e044      	b.n	8003064 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8002fda:	4b2b      	ldr	r3, [pc, #172]	; (8003088 <SystemCoreClockUpdate+0xf8>)
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	23f0      	movs	r3, #240	; 0xf0
 8002fe0:	039b      	lsls	r3, r3, #14
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8002fe6:	4b28      	ldr	r3, [pc, #160]	; (8003088 <SystemCoreClockUpdate+0xf8>)
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	23c0      	movs	r3, #192	; 0xc0
 8002fec:	025b      	lsls	r3, r3, #9
 8002fee:	4013      	ands	r3, r2
 8002ff0:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	0c9b      	lsrs	r3, r3, #18
 8002ff6:	3302      	adds	r3, #2
 8002ff8:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8002ffa:	4b23      	ldr	r3, [pc, #140]	; (8003088 <SystemCoreClockUpdate+0xf8>)
 8002ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffe:	220f      	movs	r2, #15
 8003000:	4013      	ands	r3, r2
 8003002:	3301      	adds	r3, #1
 8003004:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	025b      	lsls	r3, r3, #9
 800300c:	429a      	cmp	r2, r3
 800300e:	d10a      	bne.n	8003026 <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8003010:	6839      	ldr	r1, [r7, #0]
 8003012:	481f      	ldr	r0, [pc, #124]	; (8003090 <SystemCoreClockUpdate+0x100>)
 8003014:	f7fd f880 	bl	8000118 <__udivsi3>
 8003018:	0003      	movs	r3, r0
 800301a:	001a      	movs	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	435a      	muls	r2, r3
 8003020:	4b1a      	ldr	r3, [pc, #104]	; (800308c <SystemCoreClockUpdate+0xfc>)
 8003022:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
      }
      break;
 8003024:	e01e      	b.n	8003064 <SystemCoreClockUpdate+0xd4>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	23c0      	movs	r3, #192	; 0xc0
 800302a:	025b      	lsls	r3, r3, #9
 800302c:	429a      	cmp	r2, r3
 800302e:	d10a      	bne.n	8003046 <SystemCoreClockUpdate+0xb6>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 8003030:	6839      	ldr	r1, [r7, #0]
 8003032:	4818      	ldr	r0, [pc, #96]	; (8003094 <SystemCoreClockUpdate+0x104>)
 8003034:	f7fd f870 	bl	8000118 <__udivsi3>
 8003038:	0003      	movs	r3, r0
 800303a:	001a      	movs	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	435a      	muls	r2, r3
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <SystemCoreClockUpdate+0xfc>)
 8003042:	601a      	str	r2, [r3, #0]
      break;
 8003044:	e00e      	b.n	8003064 <SystemCoreClockUpdate+0xd4>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 8003046:	6839      	ldr	r1, [r7, #0]
 8003048:	4811      	ldr	r0, [pc, #68]	; (8003090 <SystemCoreClockUpdate+0x100>)
 800304a:	f7fd f865 	bl	8000118 <__udivsi3>
 800304e:	0003      	movs	r3, r0
 8003050:	001a      	movs	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	435a      	muls	r2, r3
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <SystemCoreClockUpdate+0xfc>)
 8003058:	601a      	str	r2, [r3, #0]
      break;
 800305a:	e003      	b.n	8003064 <SystemCoreClockUpdate+0xd4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <SystemCoreClockUpdate+0xfc>)
 800305e:	4a0c      	ldr	r2, [pc, #48]	; (8003090 <SystemCoreClockUpdate+0x100>)
 8003060:	601a      	str	r2, [r3, #0]
      break;
 8003062:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003064:	4b08      	ldr	r3, [pc, #32]	; (8003088 <SystemCoreClockUpdate+0xf8>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	220f      	movs	r2, #15
 800306c:	4013      	ands	r3, r2
 800306e:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <SystemCoreClockUpdate+0x108>)
 8003070:	5cd3      	ldrb	r3, [r2, r3]
 8003072:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8003074:	4b05      	ldr	r3, [pc, #20]	; (800308c <SystemCoreClockUpdate+0xfc>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	40da      	lsrs	r2, r3
 800307c:	4b03      	ldr	r3, [pc, #12]	; (800308c <SystemCoreClockUpdate+0xfc>)
 800307e:	601a      	str	r2, [r3, #0]
}
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	b004      	add	sp, #16
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000
 800308c:	2000002c 	.word	0x2000002c
 8003090:	007a1200 	.word	0x007a1200
 8003094:	02dc6c00 	.word	0x02dc6c00
 8003098:	080032e4 	.word	0x080032e4

0800309c <__libc_init_array>:
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	2600      	movs	r6, #0
 80030a0:	4d0c      	ldr	r5, [pc, #48]	; (80030d4 <__libc_init_array+0x38>)
 80030a2:	4c0d      	ldr	r4, [pc, #52]	; (80030d8 <__libc_init_array+0x3c>)
 80030a4:	1b64      	subs	r4, r4, r5
 80030a6:	10a4      	asrs	r4, r4, #2
 80030a8:	42a6      	cmp	r6, r4
 80030aa:	d109      	bne.n	80030c0 <__libc_init_array+0x24>
 80030ac:	2600      	movs	r6, #0
 80030ae:	f000 f819 	bl	80030e4 <_init>
 80030b2:	4d0a      	ldr	r5, [pc, #40]	; (80030dc <__libc_init_array+0x40>)
 80030b4:	4c0a      	ldr	r4, [pc, #40]	; (80030e0 <__libc_init_array+0x44>)
 80030b6:	1b64      	subs	r4, r4, r5
 80030b8:	10a4      	asrs	r4, r4, #2
 80030ba:	42a6      	cmp	r6, r4
 80030bc:	d105      	bne.n	80030ca <__libc_init_array+0x2e>
 80030be:	bd70      	pop	{r4, r5, r6, pc}
 80030c0:	00b3      	lsls	r3, r6, #2
 80030c2:	58eb      	ldr	r3, [r5, r3]
 80030c4:	4798      	blx	r3
 80030c6:	3601      	adds	r6, #1
 80030c8:	e7ee      	b.n	80030a8 <__libc_init_array+0xc>
 80030ca:	00b3      	lsls	r3, r6, #2
 80030cc:	58eb      	ldr	r3, [r5, r3]
 80030ce:	4798      	blx	r3
 80030d0:	3601      	adds	r6, #1
 80030d2:	e7f2      	b.n	80030ba <__libc_init_array+0x1e>
 80030d4:	080032f4 	.word	0x080032f4
 80030d8:	080032f4 	.word	0x080032f4
 80030dc:	080032f4 	.word	0x080032f4
 80030e0:	080032f8 	.word	0x080032f8

080030e4 <_init>:
 80030e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ea:	bc08      	pop	{r3}
 80030ec:	469e      	mov	lr, r3
 80030ee:	4770      	bx	lr

080030f0 <_fini>:
 80030f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f6:	bc08      	pop	{r3}
 80030f8:	469e      	mov	lr, r3
 80030fa:	4770      	bx	lr
